// Quark's Node Runtime and associated
/* jshint node: true */
/* global Promise */

(function () {
    "use strict";

    var assert = require("assert");

    var WebSocket = require("ws");

    // CLASS QuarkWebsocket
    function QuarkWebSocket(url) {
        this.url = url;
        this.socket = new WebSocket(url);
        this.handler = null;
        this.isOpen = false;
        this.buffered = [];

        var self = this;
        this.socket.on("open", function () {
            self.isOpen = true;
            self.buffered.forEach(function (message) {
                self.socket.send(message);
            });
            self.buffered = null;
        });
    }
    QuarkWebSocket.prototype.setHandler = function (handler) {
        var self = this;
        this.handler = handler;
        this.socket.on("message", function (message) {
            handler.onMessage(self, message);
        });
    };
    QuarkWebSocket.prototype.send = function (message) {
        if (this.isOpen) {
            this.socket.send(message);
        } else {
            this.buffered.push(message);
        }
    };

    // CLASS Runtime
    function Runtime() {
        this.locked = false;
    }
    Runtime.prototype.acquire = function () {
        assert(!this.locked);
        this.locked = true;
    };
    Runtime.prototype.release = function () {
        assert(this.locked);
        this.locked = false;
    };
    Runtime.prototype.wait = function () {
        assert(this.locked);
        assert(false);
    };
    Runtime.prototype.open = function (url) {
        return new QuarkWebSocket(url);
    };
    Runtime.prototype.schedule = function (handler, delayInSeconds) {
        var self = this;
        setTimeout(function () { handler.onExecute(self); },
                   delayInSeconds * 1000);
    };
    Runtime.prototype.launch = function () {};


    module.exports = new Runtime();

})();
