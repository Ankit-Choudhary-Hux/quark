primitive void {}
primitive int {
    macro int __add__(int other) ${($self) + ($other)};
    macro int __sub__(int other) ${($self) - ($other)};
    macro int __mul__(int other) ${($self) * ($other)};
    macro int __lt__(int other) ${($self) < ($other)};
    macro int __gt__(int other) ${($self) > ($other)};
}
primitive long {
    macro int __add__(int other) ${($self) + ($other)};
    macro int __sub__(int other) ${($self) - ($other)};
    macro int __mul__(int other) ${($self) * ($other)};
    macro int __lt__(int other) ${($self) < ($other)};
    macro int __gt__(int other) ${($self) > ($other)};
}
primitive Object {
    macro int __eq__(Object other) $java{($self).equals($other)}$py{($self) == ($other)};
    macro int __ne__(Object other) $java{!(($self).equals($other))}$py{($self) != ($other)};
}
primitive String {}
primitive List<T> {
    macro void add(T element) ${($self).add($element)};
    macro T get(int index) ${($self).get($index)};
    macro int size() ${($self).size()};
}
primitive Map<K, V> {
    macro void put(K key, V value) $java{($self).put(($key), ($value))}$py{($self)[$key] = ($value)};
    macro V get(K key) ${($self).get($key)};
    macro int contains(K key) ${($self).containsKey($key)};
}
macro void print(String msg) $java{System.out.println($msg)}$py{_println($msg)};
macro long now() $java{System.currentTimeMillis()}$py{long(time.time()*1000)};