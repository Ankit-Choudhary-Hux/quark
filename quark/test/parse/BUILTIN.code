primitive void {}
primitive int {
    macro int __add__(int other) ${($self) + ($other)};
    macro int __sub__(int other) ${($self) - ($other)};
    macro int __mul__(int other) ${($self) * ($other)};
    macro int __eq__(int other) ${($self) == ($other)};
    macro int __lt__(int other) ${($self) < ($other)};
    macro int __gt__(int other) ${($self) > ($other)};
}
primitive long {
    macro int __add__(int other) ${($self) + ($other)};
    macro int __sub__(int other) ${($self) - ($other)};
    macro int __mul__(int other) ${($self) * ($other)};
    macro int __eq__(int other) ${($self) == ($other)};
    macro int __lt__(int other) ${($self) < ($other)};
    macro int __gt__(int other) ${($self) > ($other)};
}
primitive Object {}
primitive String {
    macro int __eq__(String other) ${($self).equals($other)};
}
primitive List<T> {
    macro void add(T element) ${($self).add($element)};
    macro T get(int index) ${($self).get($index)};
    macro int size() ${($self).size()};
    macro int __ne__(List<T> other) ${!(($self).equals($other))};
}
primitive Map<K, V> {
    macro void put(K key, V value) ${($self).put(($key), ($value))};
    macro V get(K key) ${($self).get($key)};
    macro int __eq__(Map<K, V> other) ${($self).equals($other)};
    macro int contains(K key) ${($self).containsKey($key)};
}
macro void print(String msg) ${System.out.println($msg)};
macro long now() ${System.currentTimeMillis()};