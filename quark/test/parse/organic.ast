File(Use(url=builtin.q), Import(Name(builtin)),

 Package(Name(foo),

  Function(Type(Name(void)), Name(f),
   Param(Type(Name(int)), Name(a)),
   Param(Type(Name(int)), Name(b)),
   Param(Type(Name(int)), Name(c)),
   Param(Type(Name(int)), Name(d)),
   Block(
    ExprStmt(Call(Attr(Call(Attr(Call(Attr(Call(Attr(Call(Attr(Call(Attr(Var(
                  Name(x)), Name(__mul__)), Var(Name(a))), Name(__mul__)),
              Var(Name(b))), Name(__mul__)), Var(Name(c))), Name(__add__)),
          Var(Name(b))), Name(__add__)), Call(Attr(Var(Name(c)),
          Name(__mul__)), Var(Name(d)))), Name(__le__)), Var(Name(t)))))),

  Function(Type(Name(void)), Name(asdf),
   Param(Type(Name(float)), Name(x)),
   Param(Type(Name(float)), Name(y)),
   Block(
    ExprStmt(Call(Attr(Call(Attr(Call(Attr(Call(Attr(Call(Attr(Var(Name(x)),
               Name(__mul__)), Var(Name(a))), Name(__mul__)), Var(Name(b))),
           Name(__mul__)), Call(Attr(Call(Attr(Var(Name(c)), Name(__add__)),
             Var(Name(b))), Name(__add__)), Var(Name(c)))), Name(__mul__)),
        Var(Name(d))), Name(__le__)), Var(Name(t)))))),

  Function(Type(Name(void)), Name(fdsa),
   Param(Type(Name(float)), Name(x)),
   Block()),

  Function(Type(Name(int)), Name(pie), Block(
    ExprStmt(Var(Name(blueberry))),
    ExprStmt(Var(Name(huckleberry))))),

  Class(Name(Foo), Type(Name(Bar)),

   Method(static=False, Type(Name(void)), Name(doFoo), Block(
     Assign(Var(Name(x)), Call(Attr(Var(Name(this)), Name(x)), Var(Name(a)),
       Var(Name(b)), Var(Name(c)))),
     Assign(Attr(Var(Name(q)), Name(asdf)), Call(Attr(Var(Name(this)),
        Name(y)), Var(Name(x)))),
     ExprStmt(Call(Attr(Var(Name(this)), Name(z)))),
     ExprStmt(Attr(Var(Name(self)), Name(doc))),
     If(Var(Name(x)), Block(
       ExprStmt(Call(Var(Name(y)))))),
     ExprStmt(Call(Attr(Var(Name(z)), Name(__neg__)))),
     If(Call(Attr(Call(Attr(Var(Name(x)), Name(__and__)), Var(Name(y))),
        Name(__or__)), Var(Name(z))), Block(
       ExprStmt(Var(Name(z))))),
     If(Call(Attr(Var(Name(x)), Name(__or__)), Call(Attr(Var(Name(y)),
         Name(__and__)), Var(Name(z)))), Block(
       ExprStmt(Var(Name(z))))),
     If(Call(Attr(Var(Name(x)), Name(__or__)),
       Call(Attr(Call(Attr(Var(Name(y)), Name(__not__))), Name(__and__)),
        Var(Name(z)))), Block(
       ExprStmt(Var(Name(z))))))))),

 Class(Name(Blah))
)