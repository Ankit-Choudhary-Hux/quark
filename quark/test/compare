#!/usr/bin/env python
#
# Copyright 2015 datawire. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
Usage:
  compare [options] [CMPFILE ...]
  compare -h | --help

CMPFILE are filenames that end with .cmp

Options:
  -h --help          Show this screen
  -p --pattern PAT   Only present paths matching this glob pattern [default: *]
  -f --force         Assume "yes" for every comparison
"""

import sys
import os
import subprocess
import filecmp
import tempfile
import fnmatch

from docopt import docopt


# Copy-pasta from datawire-common/dw
def csi(*args):
    result = ""
    numeric = []
    for a in args:
        if isinstance(a, int):
            numeric.append(str(a))
        else:
            result = "%s\x1B[%s%s" % (result, ";".join(numeric), a)
            numeric = []
    return result

CLS = csi(2, "J", 1, 1, "H")
RED = csi(1, 91, "m")
PURPLE = csi(1, 95, "m")
RESET = csi(0, "m")

try:
    rows, columns = map(int, subprocess.check_output("stty size".split()).split())
except Exception:
    rows, columns = 25, 80


def ansi(mode, st):
    return "%s%s%s" % (mode, st, RESET)


def relpath(path):
    if path.startswith("./"):
        path = path[2:]
    return path.replace(os.path.abspath(".") + "/", "")


def find_cmp_files():
    res = []
    for dirpath, dirnames, filenames in os.walk("."):
        for filename in filenames:
            if filename.endswith(".cmp"):
                path = relpath(os.path.join(dirpath, filename))
                res.append((path[:-4], path))  # expected, output
    return res


def ignorable(filename):
    return filename == "classpath" or filename.endswith(".pyc")


def collect_comparisons(dcmp, result):
    # left is expected, right is output
    for filename in dcmp.diff_files + dcmp.left_only + dcmp.right_only:
        if ignorable(filename):
            continue
        result.append((relpath(os.path.join(dcmp.left, filename)),
                       relpath(os.path.join(dcmp.right, filename))))
    for common_dirname, common_sub_dcmp in dcmp.subdirs.items():
        if common_dirname == "target":
            continue
        collect_comparisons(common_sub_dcmp, result)


def find_different_files():
    git_top = subprocess.check_output("git rev-parse --show-toplevel".split()).strip()
    emit = os.path.join(git_top, "quark/test/emit")
    output = os.path.join(emit, "output")
    expected = os.path.join(emit, "expected")
    result = []  # (expected file path, output file path), ...

    if not os.path.exists(output):
        return result

    backends = os.listdir(output)
    for backend in backends:
        tests = os.listdir(os.path.join(output, backend))
        for test in tests:
            if not os.path.isdir(os.path.join(output, backend, test)):
                continue
            obt = os.path.join(output, backend, test)
            ebt = os.path.join(expected, backend, test)
            if not os.path.exists(ebt):
                os.makedirs(ebt)
            dcmp = filecmp.dircmp(ebt, obt, ["target"])  # XXX: should only filter out target for java
            collect_comparisons(dcmp, result)
    return result


def main(options):
    names = options["CMPFILE"]
    force = options["--force"]
    pattern = options["--pattern"]

    if names:
        to_compare = [(path[:-4], path) for path in names]
    else:
        to_compare = find_cmp_files() + find_different_files()

    # Pre-filter so len(to_compare) can be used for progress indicator
    to_compare = [(expected, output) for expected, output in to_compare if fnmatch.fnmatch(output, pattern)]

    for idx, (expected, output) in enumerate(to_compare):
        if not os.path.exists(expected):
            ex = None
        elif os.path.isdir(expected):
            ex = dir
        else:
            assert os.path.isfile(expected), expected
            ex = file

        if not os.path.exists(output):
            op = None
        elif os.path.isdir(output):
            op = dir
        else:
            assert os.path.isfile(output), output
            op = file

        if ex is None and op is None:             # WTF?
            assert False, ("both missing", expected, output)
        elif ex is None and op is file:           # New file in output
            name = output + " (new file)"
            show_command = "less %s" % output
            question = "Add this file?"
            if output.endswith(".cmp"):
                do_command = "mv %s %s" % (output, expected)
            else:
                do_command = "cp %s %s" % (output, expected)
        elif ex is None and op is dir:            # New directory in output
            name = output + " (new directory)"
            show_command = "ls -l %s" % output
            question = "Add this directory and contents?"
            do_command = "cp -a %s %s" % (output, expected)

        elif ex is file and op is None:           # Expected file not present
            name = expected + " (missing file)"
            show_command = "less %s" % expected
            question = "Remove this file?"
            do_command = "rm %s" % expected
        elif ex is file and op is file:           # File has changed
            name = output
            show_command = "git diff --no-index %s %s" % (expected, output)
            question = "Overwrite this file?"
            if output.endswith(".cmp"):
                do_command = "mv %s %s" % (output, expected)
            else:
                do_command = "cp %s %s" % (output, expected)
        elif ex is file and op is dir:            # File turned into a directory
            name = output + " (expected file, got directory)"
            show_command = "ls -l %s %s" % (expected, output)
            question = "No operation available; y/n are the same."
            do_command = "echo Doing nothing"

        elif ex is dir and op is None:            # Expected dir not present
            name = expected + " (missing dir)"
            show_command = "ls -l %s" % expected
            question = "Remove this directory?"
            do_command = "rm -r %s" % expected
        elif ex is dir and op is file:            # Directory turned into a file
            name = output + " (expected directory, got file)"
            show_command = "ls -l %s %s" % (expected, output)
            question = "No operation available; y/n are the same."
            do_command = "echo Doing nothing"
        elif ex is dir and op is dir:             # WTF? Prior code should have recursed!
            assert False, ("both dirs", expected, output)

        else:                                     # WTF? I don't even...
            assert False, ("what are", ex, op, expected, output)

        if force and fnmatch.fnmatch(output, pattern):
            os.system(do_command)
        else:
            counter = "%s/%s " % (idx + 1, len(to_compare))
            print ansi(CLS, "") + counter + name, ansi(PURPLE, (columns - 2 - len(counter + name)) * "=")
            os.system(show_command)
            st = raw_input(question + " y/N/q: ").strip().upper()
            if st.startswith("Y"):
                os.system(do_command)
            elif st.startswith("Q"):
                return
            print


if __name__ == '__main__':
    main(docopt(__doc__))
