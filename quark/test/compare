#!/usr/bin/python
#
# Copyright 2015 datawire. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys, os


# Copy-pasta from datawire-common/dw
def csi(*args):
    result = ""
    numeric = []
    for a in args:
        if isinstance(a, int):
            numeric.append(str(a))
        else:
            result = "%s\x1B[%s%s" % (result, ";".join(numeric), a)
            numeric = []
    return result

CLS = csi(2, "J", 1, 1, "H")
RED = csi(1, 91, "m")
PURPLE = csi(1, 95, "m")
RESET = csi(0, "m")


def ansi(mode, st):
    return "%s%s%s" % (mode, st, RESET)


def find_cmp_files():
    res = []
    for dirpath, dirnames, filenames in os.walk("."):
        for filename in filenames:
            if filename.endswith(".cmp"):
                res.append(os.path.join(dirpath, filename))
    return res


def main():
    names = sys.argv[1:]
    if names and names[0] == "-f":
        force = True
        names.pop()
    else:
        force = False
    if not names:
        names = find_cmp_files()
    for f in names:
        name, ext = os.path.splitext(f)
        if force:
            os.system("mv %s %s" % (f, name))
        else:
            print ansi(CLS, ""), name, ansi(PURPLE, (78 - len(name)) * "=")
            if os.path.exists(name):
                os.system("git diff --no-index %s %s" % (name, f))
            else:
                os.system("less %s" % f)
            st = raw_input("Overwrite this file? y/N/q: ").strip().upper()
            if st.startswith("Y"):
                os.system("mv %s %s" % (f, name))
            elif st.startswith("Q"):
                return
            print


if __name__ == '__main__':
    main()
