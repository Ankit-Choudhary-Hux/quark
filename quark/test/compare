#!/usr/bin/python
#
# Copyright 2015 datawire. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

import sys
import os
import subprocess
import filecmp
import tempfile


# Copy-pasta from datawire-common/dw
def csi(*args):
    result = ""
    numeric = []
    for a in args:
        if isinstance(a, int):
            numeric.append(str(a))
        else:
            result = "%s\x1B[%s%s" % (result, ";".join(numeric), a)
            numeric = []
    return result

CLS = csi(2, "J", 1, 1, "H")
RED = csi(1, 91, "m")
PURPLE = csi(1, 95, "m")
RESET = csi(0, "m")


def ansi(mode, st):
    return "%s%s%s" % (mode, st, RESET)


def relpath(path):
    if path.startswith("./"):
        path = path[2:]
    return path.replace(os.path.abspath(".") + "/", "")


def find_cmp_files():
    res = []
    for dirpath, dirnames, filenames in os.walk("."):
        for filename in filenames:
            if filename.endswith(".cmp"):
                path = relpath(os.path.join(dirpath, filename))
                res.append((path[:-4], path))  # expected, output
    return res


def ignorable(filename):
    return filename == "classpath" or filename.endswith(".pyc")


def collect_comparisons(dcmp, result):
    # left is expected, right is output
    for filename in dcmp.diff_files:
        if ignorable(filename):
            continue
        result.append((relpath(os.path.join(dcmp.left, filename)),
                       relpath(os.path.join(dcmp.right, filename))))
    for filename in dcmp.left_only:
        if ignorable(filename):
            continue
        fullname = relpath(os.path.join(dcmp.left, filename))
        if os.path.isfile(fullname):
            result.append((fullname, None))
    for filename in dcmp.right_only:
        if ignorable(filename):
            continue
        fullname = relpath(os.path.join(dcmp.right, filename))
        if os.path.isfile(fullname):
            result.append((None, fullname))
    for common_dirname, common_sub_dcmp in dcmp.subdirs.items():
        if common_dirname == "target":
            continue
        collect_comparisons(common_sub_dcmp, result)


def find_different_files():
    git_top = subprocess.check_output("git rev-parse --show-toplevel".split()).strip()
    emit = os.path.join(git_top, "quark/test/emit")
    output = os.path.join(emit, "output")
    expected = os.path.join(emit, "expected")
    result = []  # (expected file path, output file path), ...

    if not os.path.exists(output):
        return result

    backends = os.listdir(output)
    for backend in backends:
        tests = os.listdir(os.path.join(output, backend))
        for test in tests:
            if not os.path.isdir(os.path.join(output, backend, test)):
                continue
            obt = os.path.join(output, backend, test)
            ebt = os.path.join(expected, backend, test)
            if not os.path.exists(ebt):
                ebt = tempfile.mkdtemp()
            dcmp = filecmp.dircmp(ebt, obt, ["target"])  # XXX: should only filter out target for java
            collect_comparisons(dcmp, result)
    return result


def main():
    names = sys.argv[1:]
    if names and names[0] == "-f":
        force = True
        names.pop()
    else:
        force = False

    if names:
        to_compare = [(path[:-4], path) for path in names]
    else:
        to_compare = find_cmp_files() + find_different_files()

    for expected, output in to_compare:
        if force:
            os.system("mv %s %s" % (output, expected))
        else:

            if expected is not None and output is not None:
                name = output
                command = "git diff --no-index %s %s" % (expected, output)
            elif expected is None:
                name = output + " (new file)"
                command = "less %s" % output
            else:
                name = expected + " (missing file)"
                command = "less %s" % expected

            print ansi(CLS, "") + name, ansi(PURPLE, (78 - len(name)) * "=")
            os.system(command)

            if output is not None:
                st = raw_input("Overwrite this file? y/N/q: ").strip().upper()
            else:
                st = raw_input("Erase this file? y/N/q: ").strip().upper()

            if st.startswith("Y"):
                if output is not None:
                    os.system("mv %s %s" % (output, expected))
                else:
                    os.system("rm %s" % expected)
            elif st.startswith("Q"):
                return
            print


if __name__ == '__main__':
    main()
