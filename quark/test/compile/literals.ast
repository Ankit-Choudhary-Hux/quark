Root(
 File(
  Primitive(Name(void)),

  Primitive(Name(int),

   MethodMacro(Type(Name(int)), Name(__add__),
    Param(Type(Name(int)), Name(other), $type=0.int),
    Native(Fixed('('), Var(Name(self), $type=0.int), Fixed(') + ('),
     Var(Name(other), $type=0.int), Fixed(')'))),

   MethodMacro(Type(Name(int)), Name(__sub__),
    Param(Type(Name(int)), Name(other), $type=0.int),
    Native(Fixed('('), Var(Name(self), $type=0.int), Fixed(') - ('),
     Var(Name(other), $type=0.int), Fixed(')'))),

   MethodMacro(Type(Name(int)), Name(__mul__),
    Param(Type(Name(int)), Name(other), $type=0.int),
    Native(Fixed('('), Var(Name(self), $type=0.int), Fixed(') * ('),
     Var(Name(other), $type=0.int), Fixed(')'))),

   MethodMacro(Type(Name(int)), Name(__eq__),
    Param(Type(Name(int)), Name(other), $type=0.int),
    Native(Fixed('('), Var(Name(self), $type=0.int), Fixed(') == ('),
     Var(Name(other), $type=0.int), Fixed(')'))),

   MethodMacro(Type(Name(int)), Name(__lt__),
    Param(Type(Name(int)), Name(other), $type=0.int),
    Native(Fixed('('), Var(Name(self), $type=0.int), Fixed(') < ('),
     Var(Name(other), $type=0.int), Fixed(')')))),

  Primitive(Name(Object)),

  Primitive(Name(String),

   MethodMacro(Type(Name(int)), Name(__eq__),
    Param(Type(Name(String)), Name(other), $type=0.String),
    Native(Fixed('('), Var(Name(self), $type=0.String), Fixed(').equals('),
     Var(Name(other), $type=0.String), Fixed(')')))),

  Primitive(Name(List), TypeParam(Name(T)),

   MethodMacro(Type(Name(void)), Name(add),
    Param(Type(Name(T)), Name(element), $type=0.List.T),
    Native(Fixed('('), Var(Name(self), $type=0.List<0.List.T>),
     Fixed(').add('), Var(Name(element), $type=0.List.T), Fixed(')'))),

   MethodMacro(Type(Name(T)), Name(get),
    Param(Type(Name(int)), Name(index), $type=0.int),
    Native(Fixed('('), Var(Name(self), $type=0.List<0.List.T>),
     Fixed(').get('), Var(Name(index), $type=0.int), Fixed(')'))),

   MethodMacro(Type(Name(int)), Name(size), Native(Fixed('('), Var(Name(self),
     $type=0.List<0.List.T>), Fixed(').size()'))),

   MethodMacro(Type(Name(int)), Name(__ne__),
    Param(Type(Name(List), Type(Name(T))), Name(other),
    $type=0.List<0.List.T>),
    Native(Fixed('!(('), Var(Name(self), $type=0.List<0.List.T>),
     Fixed(').equals('), Var(Name(other), $type=0.List<0.List.T>),
     Fixed('))')))),

  Primitive(Name(Map), TypeParam(Name(K)), TypeParam(Name(V)),

   MethodMacro(Type(Name(void)), Name(put),
    Param(Type(Name(K)), Name(key), $type=0.Map.K),
    Param(Type(Name(V)), Name(value), $type=0.Map.V),
    Native(Fixed('('), Var(Name(self), $type=0.Map<0.Map.K,0.Map.V>),
     Fixed(').put(('), Var(Name(key), $type=0.Map.K), Fixed('), ('),
     Var(Name(value), $type=0.Map.V), Fixed('))'))),

   MethodMacro(Type(Name(V)), Name(get),
    Param(Type(Name(K)), Name(key), $type=0.Map.K),
    Native(Fixed('('), Var(Name(self), $type=0.Map<0.Map.K,0.Map.V>),
     Fixed(').get('), Var(Name(key), $type=0.Map.K), Fixed(')')))),

  Macro(Type(Name(void)), Name(print),
   Param(Type(Name(String)), Name(msg), $type=0.String),
   Native(Fixed('System.out.println('), Var(Name(msg), $type=0.String),
    Fixed(')')))
 ),

 File(
  Function(Type(Name(void)), Name(test1), Block(
    Local(
     Declaration(Type(Name(List), Type(Name(int))), Name(zero), List(,
      $type=0.List<0.List.T>), $type=0.List<0.int>)),
    Local(
     Declaration(Type(Name(List), Type(Name(int))), Name(one), List(Number(1,
       $type=0.int), $type=0.List<0.int>), $type=0.List<0.int>)),
    Local(
     Declaration(Type(Name(List), Type(Name(int))), Name(many), List(Number(1,
       $type=0.int), Number(2, $type=0.int), Number(3, $type=0.int),
      $type=0.List<0.int>), $type=0.List<0.int>)))),

  Function(Type(Name(void)), Name(test2), Block(
    Local(
     Declaration(Type(Name(List), Type(Name(String))), Name(zero), List(,
      $type=0.List<0.List.T>), $type=0.List<0.String>)),
    Local(
     Declaration(Type(Name(List), Type(Name(String))), Name(one),
      List(String("one", $type=0.String), $type=0.List<0.String>),
     $type=0.List<0.String>)),
    Local(
     Declaration(Type(Name(List), Type(Name(String))), Name(many),
      List(String("one", $type=0.String), String("two", $type=0.String),
       String("three", $type=0.String), $type=0.List<0.String>),
     $type=0.List<0.String>))))
 )
)