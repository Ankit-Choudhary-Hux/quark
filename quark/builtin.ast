File(
 Primitive(Annotation(Name(mapping), Native(NativeCase(java, Fixed('Object')),
    NativeCase(py, Fixed('object')), NativeCase(js, Fixed('Object')))),
  Name(Object),

  MethodMacro(Type(Name(bool)), Name(__eq__),
   Param(Type(Name(Object)), Name(other)),
   Native(NativeCase(java,
     Fixed('('), Var(Name(self)), Fixed(')==('), Var(Name(other)),
     Fixed(') || (('), Var(Name(self)), Fixed(') != null && ('),
     Var(Name(self)), Fixed(').equals('), Var(Name(other)), Fixed('))')),
    NativeCase(py, Fixed('('), Var(Name(self)), Fixed(') == ('),
     Var(Name(other)), Fixed(')')), NativeCase(js, Fixed('('), Var(Name(self)),
     Fixed(') === ('), Var(Name(other)), Fixed(')')))),

  MethodMacro(Type(Name(bool)), Name(__ne__),
   Param(Type(Name(Object)), Name(other)),
   Native(NativeCase(java,
     Fixed('!(('), Var(Name(self)), Fixed(')==('), Var(Name(other)),
     Fixed(') || (('), Var(Name(self)), Fixed(') != null && ('),
     Var(Name(self)), Fixed(').equals('), Var(Name(other)), Fixed(')))')),
    NativeCase(py, Fixed('('), Var(Name(self)), Fixed(') != ('),
     Var(Name(other)), Fixed(')')), NativeCase(js, Fixed('('), Var(Name(self)),
     Fixed(') !== ('), Var(Name(other)), Fixed(')')))),

  MethodMacro(Type(Name(Class)), Name(getClass), Call(Var(Name(Class)),
    Native(NativeCase(java,
      Fixed('io.datawire.quark.runtime.Builtins._getClass('), Var(Name(self)),
      Fixed(')')), NativeCase(py, Fixed('_getClass('), Var(Name(self)),
      Fixed(')')), NativeCase(js, Fixed('_qrt._getClass('), Var(Name(self)),
      Fixed(')'))))),

  MethodMacro(Type(Name(Object)), Name(getField),
   Param(Type(Name(String)), Name(name)),
   Native(NativeCase(java,
     Fixed('((io.datawire.quark.runtime.QObject) ('), Var(Name(self)),
     Fixed('))._getField('), Var(Name(name)), Fixed(')')), NativeCase(py,
     Fixed('('), Var(Name(self)), Fixed(')._getField('), Var(Name(name)),
     Fixed(')')), NativeCase(js, Fixed('('), Var(Name(self)),
     Fixed(')._getField('), Var(Name(name)), Fixed(')')))),

  MethodMacro(Type(Name(void)), Name(setField),
   Param(Type(Name(String)), Name(name)),
   Param(Type(Name(Object)), Name(value)),
   Native(NativeCase(java,
     Fixed('((io.datawire.quark.runtime.QObject) ('), Var(Name(self)),
     Fixed('))._setField('), Var(Name(name)), Fixed(', '), Var(Name(value)),
     Fixed(')')), NativeCase(py, Fixed('('), Var(Name(self)),
     Fixed(')._setField(('), Var(Name(name)), Fixed('), ('), Var(Name(value)),
     Fixed('))')), NativeCase(js, Fixed('('), Var(Name(self)),
     Fixed(')._setField(('), Var(Name(name)), Fixed('), ('), Var(Name(value)),
     Fixed('))'))))),

 Function(Type(Name(void)), Name(_class),
  Param(Type(Name(Class)), Name(cls))),

 Function(Type(Name(Object)), Name(_construct),
  Param(Type(Name(String)), Name(className)),
  Param(Type(Name(List), Type(Name(Object))), Name(args))),

 Function(Type(Name(List), Type(Name(Field))), Name(_fields),
  Param(Type(Name(String)), Name(className))),

 Function(Type(Name(Object)), Name(_invoke),
  Param(Type(Name(String)), Name(className)),
  Param(Type(Name(Object)), Name(object)),
  Param(Type(Name(String)), Name(name)),
  Param(Type(Name(List), Type(Name(Object))), Name(args))),

 Class(Name(Class),
  Field(Type(Name(String)), Name(id)),
  Field(Type(Name(String)), Name(name)),
  Field(Type(Name(List), Type(Name(Class))), Name(parameters)),

  Constructor(Name(Class),
   Param(Type(Name(String)), Name(id)),
   Block(
    Assign(Attr(Var(Name(self)), Name(id)), Var(Name(id))),
    ExprStmt(Call(Var(Name(_class)), Var(Name(self)))))),

  Method(Type(Name(String)), Name(getId), Block(
    Return(Var(Name(id))))),

  Method(Type(Name(String)), Name(getName), Block(
    Return(Var(Name(name))))),

  Method(Type(Name(List), Type(Name(Class))), Name(getParameters), Block(
    Return(Var(Name(parameters))))),

  Method(Type(Name(Object)), Name(construct),
   Param(Type(Name(List), Type(Name(Object))), Name(args)),
   Block(
    Return(Call(Var(Name(_construct)), Call(Var(Name(getId))),
      Var(Name(args)))))),

  Method(Type(Name(List), Type(Name(Field))), Name(getFields), Block(
    Return(Call(Var(Name(_fields)), Attr(Var(Name(self)), Name(id)))))),

  Method(Type(Name(Field)), Name(getField),
   Param(Type(Name(String)), Name(name)),
   Block(
    Local(
     Declaration(Type(Name(List), Type(Name(Field))), Name(fields),
      Call(Var(Name(getFields))))),
    Local(
     Declaration(Type(Name(int)), Name(idx), Number(0))),
    While(Call(Attr(Var(Name(idx)), Name(__lt__)), Call(Attr(Var(Name(fields)),
        Name(size)))), Block(
      If(Call(Attr(Attr(Call(Attr(Var(Name(fields)), Name(__get__)),
           Var(Name(idx))), Name(name)), Name(__eq__)), Var(Name(name))),
       Block(
        Return(Call(Attr(Var(Name(fields)), Name(__get__)), Var(Name(idx)))))),
      Assign(Var(Name(idx)), Call(Attr(Var(Name(idx)), Name(__add__)),
        Number(1))))),
    Return(Null(null)))),

  Method(Type(Name(Object)), Name(invoke),
   Param(Type(Name(Object)), Name(object)),
   Param(Type(Name(String)), Name(method)),
   Param(Type(Name(List), Type(Name(Object))), Name(args)),
   Block(
    Return(Call(Var(Name(_invoke)), Attr(Var(Name(self)), Name(id)),
      Var(Name(object)), Var(Name(method)), Var(Name(args)))))),

  MethodMacro(Type(Name(JSONObject)), Name(toJSON),
   Call(Attr(Call(Type(Name(JSONObject))), Name(setString)),
    Attr(Var(Name(self)), Name(id)))),

  MethodMacro(Type(Name(JSONObject)), Name(__to_JSONObject),
   Call(Attr(Var(Name(self)), Name(toJSON))))),

 Class(Name(Field),
  Field(Type(Name(Class)), Name(type)),
  Field(Type(Name(String)), Name(name)),

  Constructor(Name(Field),
   Param(Type(Name(Class)), Name(type)),
   Param(Type(Name(String)), Name(name)),
   Block(
    Assign(Attr(Var(Name(self)), Name(type)), Var(Name(type))),
    Assign(Attr(Var(Name(self)), Name(name)), Var(Name(name)))))),

 Primitive(Annotation(Name(mapping), Native(NativeCase(java, Fixed('void')))),
  Name(void)),

 Primitive(Annotation(Name(mapping), Native(NativeCase(java, Fixed('Boolean')),
    NativeCase(py, Fixed('bool')), NativeCase(js, Fixed('Boolean')))),
  Name(bool),

  MethodMacro(Type(Name(bool)), Name(__not__), Native(NativeCase(java,
     Fixed('!('), Var(Name(self)), Fixed(')')), NativeCase(py, Fixed('not ('),
     Var(Name(self)), Fixed(')')), NativeCase(js, Fixed('!('), Var(Name(self)),
     Fixed(')')))),

  MethodMacro(Type(Name(bool)), Name(__and__),
   Param(Type(Name(bool)), Name(other)),
   Native(NativeCase(java,
     Fixed('('), Var(Name(self)), Fixed(') && ('), Var(Name(other)),
     Fixed(')')), NativeCase(py, Fixed('('), Var(Name(self)), Fixed(') and ('),
     Var(Name(other)), Fixed(')')), NativeCase(js, Fixed('('), Var(Name(self)),
     Fixed(') && ('), Var(Name(other)), Fixed(')')))),

  MethodMacro(Type(Name(bool)), Name(__or__),
   Param(Type(Name(bool)), Name(other)),
   Native(NativeCase(java,
     Fixed('('), Var(Name(self)), Fixed(') || ('), Var(Name(other)),
     Fixed(')')), NativeCase(py, Fixed('('), Var(Name(self)), Fixed(') or ('),
     Var(Name(other)), Fixed(')')), NativeCase(js, Fixed('('), Var(Name(self)),
     Fixed(') || ('), Var(Name(other)), Fixed(')')))),

  MethodMacro(Type(Name(String)), Name(toString), Native(NativeCase(java,
     Fixed('('), Var(Name(self)), Fixed(').toString()')), NativeCase(py,
     Fixed('str('), Var(Name(self)), Fixed(').lower()')), NativeCase(js,
     Fixed('('), Var(Name(self)), Fixed(').toString()')))),

  MethodMacro(Type(Name(JSONObject)), Name(toJSON),
   Call(Attr(Call(Type(Name(JSONObject))), Name(setBool)), Var(Name(self)))),

  MethodMacro(Type(Name(JSONObject)), Name(__to_JSONObject),
   Call(Attr(Var(Name(self)), Name(toJSON))))),

 Primitive(Name(numeric), TypeParam(Name(T)),

  MethodMacro(Type(Name(T)), Name(__neg__), Native(NativeCase(Fixed('-('),
     Var(Name(self)), Fixed(')')))),

  MethodMacro(Type(Name(T)), Name(__add__),
   Param(Type(Name(T)), Name(other)),
   Native(NativeCase(Fixed('('), Var(Name(self)), Fixed(') + ('),
     Var(Name(other)), Fixed(')')))),

  MethodMacro(Type(Name(T)), Name(__sub__),
   Param(Type(Name(T)), Name(other)),
   Native(NativeCase(Fixed('('), Var(Name(self)), Fixed(') - ('),
     Var(Name(other)), Fixed(')')))),

  MethodMacro(Type(Name(T)), Name(__mul__),
   Param(Type(Name(T)), Name(other)),
   Native(NativeCase(Fixed('('), Var(Name(self)), Fixed(') * ('),
     Var(Name(other)), Fixed(')')))),

  MethodMacro(Type(Name(T)), Name(__div__),
   Param(Type(Name(T)), Name(other)),
   Native(NativeCase(Fixed('('), Var(Name(self)), Fixed(') / ('),
     Var(Name(other)), Fixed(')')))),

  MethodMacro(Type(Name(bool)), Name(__lt__),
   Param(Type(Name(T)), Name(other)),
   Native(NativeCase(Fixed('('), Var(Name(self)), Fixed(') < ('),
     Var(Name(other)), Fixed(')')))),

  MethodMacro(Type(Name(bool)), Name(__gt__),
   Param(Type(Name(T)), Name(other)),
   Native(NativeCase(Fixed('('), Var(Name(self)), Fixed(') > ('),
     Var(Name(other)), Fixed(')'))))),

 Primitive(Name(integral), TypeParam(Name(T)), Type(Name(numeric),
   Type(Name(T))),

  MethodMacro(Type(Name(T)), Name(__div__),
   Param(Type(Name(T)), Name(other)),
   Native(NativeCase(java,
     Fixed('~((~('), Var(Name(self)), Fixed(')) / ('), Var(Name(other)),
     Fixed('))')), NativeCase(py, Fixed('('), Var(Name(self)), Fixed(') / ('),
     Var(Name(other)), Fixed(')')), NativeCase(js, Fixed('Math.floor(('),
     Var(Name(self)), Fixed(') / ('), Var(Name(other)), Fixed('))')))),

  MethodMacro(Type(Name(T)), Name(__mod__),
   Param(Type(Name(T)), Name(other)),
   Native(NativeCase(java,
     Fixed('Math.floorMod(('), Var(Name(self)), Fixed('), ('),
     Var(Name(other)), Fixed('))')), NativeCase(py, Fixed('('),
     Var(Name(self)), Fixed(') % ('), Var(Name(other)), Fixed(')')),
    NativeCase(js, Fixed('_qrt.modulo(('), Var(Name(self)), Fixed('), ('),
     Var(Name(other)), Fixed('))')))),

  MethodMacro(Type(Name(float)), Name(toFloat), Native(NativeCase(java,
     Fixed('Double.valueOf('), Var(Name(self)), Fixed(')')), NativeCase(py,
     Fixed('float('), Var(Name(self)), Fixed(')')), NativeCase(js, Fixed('('),
     Var(Name(self)), Fixed(')')))),

  MethodMacro(Type(Name(JSONObject)), Name(toJSON),
   Call(Attr(Call(Type(Name(JSONObject))), Name(setNumber)), Var(Name(self)))),

  MethodMacro(Type(Name(JSONObject)), Name(__to_JSONObject),
   Call(Attr(Var(Name(self)), Name(toJSON))))),

 Primitive(Annotation(Name(mapping), Native(NativeCase(java, Fixed('Byte')),
    NativeCase(py, Fixed('int')), NativeCase(js, Fixed('Number')))),
  Name(byte), Type(Name(integral), Type(Name(byte))),

  MethodMacro(Type(Name(String)), Name(toString), Native(NativeCase(java,
     Fixed('Byte.toString('), Var(Name(self)), Fixed(')')), NativeCase(py,
     Fixed('str('), Var(Name(self)), Fixed(')')), NativeCase(js,
     Fixed('_qrt.toString('), Var(Name(self)), Fixed(')'))))),

 Primitive(Annotation(Name(mapping), Native(NativeCase(java, Fixed('Short')),
    NativeCase(py, Fixed('int')), NativeCase(js, Fixed('Number')))),
  Name(short), Type(Name(integral), Type(Name(short))),

  MethodMacro(Type(Name(String)), Name(toString), Native(NativeCase(java,
     Fixed('Short.toString('), Var(Name(self)), Fixed(')')), NativeCase(py,
     Fixed('str('), Var(Name(self)), Fixed(')')), NativeCase(js,
     Fixed('_qrt.toString('), Var(Name(self)), Fixed(')'))))),

 Primitive(Annotation(Name(mapping), Native(NativeCase(java, Fixed('Integer')),
    NativeCase(py, Fixed('int')), NativeCase(js, Fixed('Number')))), Name(int),
  Type(Name(integral), Type(Name(int))),

  MethodMacro(Type(Name(String)), Name(toString), Native(NativeCase(java,
     Fixed('Integer.toString('), Var(Name(self)), Fixed(')')), NativeCase(py,
     Fixed('str('), Var(Name(self)), Fixed(')')), NativeCase(js,
     Fixed('_qrt.toString('), Var(Name(self)), Fixed(')')))),

  MethodMacro(Type(Name(byte)), Name(__to_byte), Var(Name(self))),

  MethodMacro(Type(Name(short)), Name(__to_short), Var(Name(self))),

  MethodMacro(Type(Name(long)), Name(__to_long), Var(Name(self)))),

 Primitive(Annotation(Name(mapping), Native(NativeCase(java, Fixed('Long')),
    NativeCase(py, Fixed('long')), NativeCase(js, Fixed('Number')))),
  Name(long), Type(Name(integral), Type(Name(long))),

  MethodMacro(Type(Name(String)), Name(toString), Native(NativeCase(java,
     Fixed('Long.toString('), Var(Name(self)), Fixed(')')), NativeCase(py,
     Fixed('str('), Var(Name(self)), Fixed(')')), NativeCase(js,
     Fixed('_qrt.toString('), Var(Name(self)), Fixed(')'))))),

 Primitive(Annotation(Name(mapping), Native(NativeCase(java, Fixed('Double')),
    NativeCase(py, Fixed('float')), NativeCase(js, Fixed('Number')))),
  Name(float), Type(Name(numeric), Type(Name(float))),

  MethodMacro(Type(Name(float)), Name(__div__),
   Param(Type(Name(float)), Name(other)),
   Native(NativeCase(java,
     Fixed('('), Var(Name(self)), Fixed(') / ('), Var(Name(other)),
     Fixed(')')), NativeCase(py, Fixed('float('), Var(Name(self)),
     Fixed(') / float('), Var(Name(other)), Fixed(')')), NativeCase(js,
     Fixed('('), Var(Name(self)), Fixed(') / ('), Var(Name(other)),
     Fixed(')')))),

  MethodMacro(Type(Name(long)), Name(round), Native(NativeCase(java,
     Fixed('Math.round('), Var(Name(self)), Fixed(')')), NativeCase(py,
     Fixed('long(round('), Var(Name(self)), Fixed('))')),
    NativeCase(javascript, Fixed('Math.round('), Var(Name(self)),
     Fixed(')')))),

  MethodMacro(Type(Name(String)), Name(toString), Native(NativeCase(java,
     Fixed('Double.toString('), Var(Name(self)), Fixed(')')), NativeCase(py,
     Fixed('repr('), Var(Name(self)), Fixed(')')), NativeCase(js,
     Fixed('_qrt.toString('), Var(Name(self)), Fixed(')')))),

  MethodMacro(Type(Name(JSONObject)), Name(toJSON),
   Call(Attr(Call(Type(Name(JSONObject))), Name(setNumber)), Var(Name(self)))),

  MethodMacro(Type(Name(JSONObject)), Name(__to_JSONObject),
   Call(Attr(Var(Name(self)), Name(toJSON))))),

 Primitive(Annotation(Name(mapping), Native(NativeCase(java, Fixed('String')),
    NativeCase(py, Fixed('str')), NativeCase(js, Fixed('String')))),
  Name(String),

  MethodMacro(Type(Name(String)), Name(__add__),
   Param(Type(Name(String)), Name(other)),
   Native(NativeCase(Fixed('('), Var(Name(self)), Fixed(') + ('),
     Var(Name(other)), Fixed(')')))),

  MethodMacro(Type(Name(int)), Name(size), Native(NativeCase(java, Fixed('('),
     Var(Name(self)), Fixed(').length()')), NativeCase(py, Fixed('len('),
     Var(Name(self)), Fixed(')')), NativeCase(js, Fixed('('), Var(Name(self)),
     Fixed(').length')))),

  MethodMacro(Type(Name(bool)), Name(startsWith),
   Param(Type(Name(String)), Name(other)),
   Native(NativeCase(java,
     Fixed('Boolean.valueOf(('), Var(Name(self)), Fixed(').startsWith('),
     Var(Name(other)), Fixed('))')), NativeCase(py, Fixed('('),
     Var(Name(self)), Fixed(').startswith('), Var(Name(other)), Fixed(')')),
    NativeCase(js, Fixed('(('), Var(Name(self)), Fixed(').indexOf('),
     Var(Name(other)), Fixed(')===0)')))),

  MethodMacro(Type(Name(bool)), Name(endsWith),
   Param(Type(Name(String)), Name(other)),
   Native(NativeCase(java,
     Fixed('Boolean.valueOf(('), Var(Name(self)), Fixed(').endsWith('),
     Var(Name(other)), Fixed('))')), NativeCase(py, Fixed('('),
     Var(Name(self)), Fixed(').endswith('), Var(Name(other)), Fixed(')')),
    NativeCase(js, Fixed('(('), Var(Name(self)), Fixed(').indexOf(('),
     Var(Name(other)), Fixed('), ('), Var(Name(self)), Fixed(').length - ('),
     Var(Name(other)), Fixed(').length) !== -1)')))),

  MethodMacro(Type(Name(int)), Name(find),
   Param(Type(Name(String)), Name(other)),
   Native(NativeCase(java,
     Fixed('('), Var(Name(self)), Fixed(').indexOf('), Var(Name(other)),
     Fixed(')')), NativeCase(py, Fixed('('), Var(Name(self)), Fixed(').find('),
     Var(Name(other)), Fixed(')')), NativeCase(js, Fixed('('), Var(Name(self)),
     Fixed(').indexOf('), Var(Name(other)), Fixed(')')))),

  MethodMacro(Type(Name(String)), Name(substring),
   Param(Type(Name(int)), Name(start)),
   Param(Type(Name(int)), Name(end)),
   Native(NativeCase(java,
     Fixed('('), Var(Name(self)), Fixed(').substring(('), Var(Name(start)),
     Fixed('), ('), Var(Name(end)), Fixed('))')), NativeCase(py, Fixed('('),
     Var(Name(self)), Fixed(')[('), Var(Name(start)), Fixed('):('),
     Var(Name(end)), Fixed(')]')), NativeCase(js, Fixed('('), Var(Name(self)),
     Fixed(').substring(('), Var(Name(start)), Fixed('), ('), Var(Name(end)),
     Fixed('))')))),

  MethodMacro(Type(Name(String)), Name(replace),
   Param(Type(Name(String)), Name(from)),
   Param(Type(Name(String)), Name(to)),
   Native(NativeCase(java,
     Fixed('('), Var(Name(self)),
     Fixed(').replaceFirst(java.util.regex.Pattern.quote('), Var(Name(from)),
     Fixed('), ('), Var(Name(to)), Fixed('))')), NativeCase(py, Fixed('('),
     Var(Name(self)), Fixed(').replace(('), Var(Name(from)), Fixed('), ('),
     Var(Name(to)), Fixed('), 1)')), NativeCase(js, Fixed('('),
     Var(Name(self)), Fixed(').replace(('), Var(Name(from)), Fixed('), ('),
     Var(Name(to)), Fixed('))')))),

  MethodMacro(Type(Name(List), Type(Name(String))), Name(split),
   Param(Type(Name(String)), Name(sep)),
   Native(NativeCase(java,
     Fixed('new java.util.ArrayList<String>(java.util.Arrays.asList(('),
     Var(Name(self)), Fixed(').split(java.util.regex.Pattern.quote('),
     Var(Name(sep)), Fixed('), -1)))')), NativeCase(py, Fixed('('),
     Var(Name(self)), Fixed(').split('), Var(Name(sep)), Fixed(')')),
    NativeCase(js, Fixed('('), Var(Name(self)), Fixed(').split('),
     Var(Name(sep)), Fixed(')')))),

  MethodMacro(Type(Name(String)), Name(join),
   Param(Type(Name(List), Type(Name(String))), Name(parts)),
   Native(NativeCase(java,
     Fixed('io.datawire.quark.runtime.Builtins.join(('), Var(Name(self)),
     Fixed('), ('), Var(Name(parts)), Fixed('))')), NativeCase(py, Fixed('('),
     Var(Name(self)), Fixed(').join('), Var(Name(parts)), Fixed(')')),
    NativeCase(js, Fixed('('), Var(Name(parts)), Fixed(').join('),
     Var(Name(self)), Fixed(')')))),

  MethodMacro(Type(Name(JSONObject)), Name(toJSON),
   Call(Attr(Call(Type(Name(JSONObject))), Name(setString)), Var(Name(self)))),

  MethodMacro(Type(Name(JSONObject)), Name(__to_JSONObject),
   Call(Attr(Var(Name(self)), Name(toJSON)))),

  MethodMacro(Type(Name(JSONObject)), Name(parseJSON), Native(NativeCase(java,
     Fixed('io.datawire.quark.runtime.JSONObject.parse('), Var(Name(self)),
     Fixed(')')), NativeCase(py, Fixed('_JSONObject.parse('), Var(Name(self)),
     Fixed(')')), NativeCase(js, Fixed('_qrt.json_from_string('),
     Var(Name(self)), Fixed(')'))))),

 Primitive(Annotation(Name(mapping), Native(NativeCase(java,
     Fixed('java.util.ArrayList')), NativeCase(py, Fixed('_List')),
    NativeCase(js, Fixed('Array')))), Name(List), TypeParam(Name(T)),

  MethodMacro(Type(Name(void)), Name(add),
   Param(Type(Name(T)), Name(element)),
   Native(NativeCase(java,
     Fixed('('), Var(Name(self)), Fixed(').add('), Var(Name(element)),
     Fixed(')')), NativeCase(py, Fixed('('), Var(Name(self)),
     Fixed(').append('), Var(Name(element)), Fixed(')')), NativeCase(js,
     Fixed('('), Var(Name(self)), Fixed(').push('), Var(Name(element)),
     Fixed(')')))),

  MethodMacro(Type(Name(T)), Name(__get__),
   Param(Type(Name(int)), Name(index)),
   Native(NativeCase(java,
     Fixed('('), Var(Name(self)), Fixed(').get('), Var(Name(index)),
     Fixed(')')), NativeCase(py, Fixed('('), Var(Name(self)), Fixed(')['),
     Var(Name(index)), Fixed(']')), NativeCase(js, Fixed('('), Var(Name(self)),
     Fixed(')['), Var(Name(index)), Fixed(']')))),

  MethodMacro(Type(Name(void)), Name(__set__),
   Param(Type(Name(int)), Name(index)),
   Param(Type(Name(T)), Name(value)),
   Native(NativeCase(java,
     Fixed('('), Var(Name(self)), Fixed(').set(('), Var(Name(index)),
     Fixed('), ('), Var(Name(value)), Fixed('))')), NativeCase(py, Fixed('('),
     Var(Name(self)), Fixed(')['), Var(Name(index)), Fixed('] = ('),
     Var(Name(value)), Fixed(')')), NativeCase(js, Fixed('('), Var(Name(self)),
     Fixed(')['), Var(Name(index)), Fixed('] = ('), Var(Name(value)),
     Fixed(')')))),

  MethodMacro(Type(Name(int)), Name(size), Native(NativeCase(java, Fixed('('),
     Var(Name(self)), Fixed(').size()')), NativeCase(py, Fixed('len('),
     Var(Name(self)), Fixed(')')), NativeCase(js, Fixed('('), Var(Name(self)),
     Fixed(').length'))))),

 Primitive(Annotation(Name(mapping), Native(NativeCase(java,
     Fixed('java.util.HashMap')), NativeCase(py, Fixed('_Map')), NativeCase(js,
     Fixed('Map')))), Name(Map), TypeParam(Name(K)), TypeParam(Name(V)),

  MethodMacro(Type(Name(void)), Name(__set__),
   Param(Type(Name(K)), Name(key)),
   Param(Type(Name(V)), Name(value)),
   Native(NativeCase(java,
     Fixed('('), Var(Name(self)), Fixed(').put(('), Var(Name(key)),
     Fixed('), ('), Var(Name(value)), Fixed('))')), NativeCase(py, Fixed('('),
     Var(Name(self)), Fixed(')['), Var(Name(key)), Fixed('] = ('),
     Var(Name(value)), Fixed(')')), NativeCase(js, Fixed('('), Var(Name(self)),
     Fixed(').set(('), Var(Name(key)), Fixed('), ('), Var(Name(value)),
     Fixed('))')))),

  MethodMacro(Type(Name(V)), Name(__get__),
   Param(Type(Name(K)), Name(key)),
   Native(NativeCase(java,
     Fixed('('), Var(Name(self)), Fixed(').get('), Var(Name(key)), Fixed(')')),
    NativeCase(py, Fixed('('), Var(Name(self)), Fixed(').get('),
     Var(Name(key)), Fixed(')')), NativeCase(js, Fixed('_qrt.map_get(('),
     Var(Name(self)), Fixed('), ('), Var(Name(key)), Fixed('))')))),

  MethodMacro(Type(Name(int)), Name(contains),
   Param(Type(Name(K)), Name(key)),
   Native(NativeCase(java,
     Fixed('('), Var(Name(self)), Fixed(').containsKey('), Var(Name(key)),
     Fixed(')')), NativeCase(py, Fixed('('), Var(Name(key)), Fixed(') in ('),
     Var(Name(self)), Fixed(')')), NativeCase(js, Fixed('('), Var(Name(self)),
     Fixed(').has('), Var(Name(key)), Fixed(')')))),

  MethodMacro(Type(Name(void)), Name(update),
   Param(Type(Name(Map), Type(Name(K)), Type(Name(V))), Name(other)),
   Native(NativeCase(java,
     Fixed('('), Var(Name(self)), Fixed(').putAll('), Var(Name(other)),
     Fixed(')')), NativeCase(py, Fixed('('), Var(Name(self)),
     Fixed(').update('), Var(Name(other)), Fixed(')')), NativeCase(js,
     Fixed('('), Var(Name(other)), Fixed(').forEach(function (v, k) '),
     Fixed('{'), Fixed(' ('), Var(Name(self)), Fixed(').set(k, v); '),
     Fixed('}'), Fixed(')')))),

  MethodMacro(Type(Name(String)), Name(urlencode), Native(NativeCase(java,
     Fixed('io.datawire.quark.runtime.Builtins.urlencode('), Var(Name(self)),
     Fixed(')')), NativeCase(py, Fixed('_urlencode('), Var(Name(self)),
     Fixed(')')), NativeCase(js, Fixed('_qrt.urlencode('), Var(Name(self)),
     Fixed(')'))))),

 Function(Type(Name(JSONObject)), Name(toJSON),
  Param(Type(Name(Object)), Name(obj)),
  Block(
   Local(
    Declaration(Type(Name(JSONObject)), Name(result),
     Call(Type(Name(JSONObject))))),
   If(Call(Attr(Var(Name(obj)), Name(__eq__)), Null(null)), Block(
     ExprStmt(Call(Attr(Var(Name(result)), Name(setNull)))),
     Return(Var(Name(result))))),
   Local(
    Declaration(Type(Name(Class)), Name(cls), Call(Attr(Var(Name(obj)),
       Name(getClass))))),
   Local(
    Declaration(Type(Name(int)), Name(idx), Number(0))),
   If(Call(Attr(Attr(Var(Name(cls)), Name(name)), Name(__eq__)),
     String("String")), Block(
     ExprStmt(Call(Attr(Var(Name(result)), Name(setString)),
       Cast(Var(Name(obj))))),
     Return(Var(Name(result))))),
   If(Call(Attr(Call(Attr(Call(Attr(Call(Attr(Call(Attr(Attr(Var(Name(cls)),
               Name(name)), Name(__eq__)), String("byte")), Name(__or__)),
           Call(Attr(Attr(Var(Name(cls)), Name(name)), Name(__eq__)),
            String("short"))), Name(__or__)), Call(Attr(Attr(Var(Name(cls)),
            Name(name)), Name(__eq__)), String("int"))), Name(__or__)),
       Call(Attr(Attr(Var(Name(cls)), Name(name)), Name(__eq__)),
        String("long"))), Name(__or__)), Call(Attr(Attr(Var(Name(cls)),
        Name(name)), Name(__eq__)), String("float"))), Block(
     ExprStmt(Call(Attr(Var(Name(result)), Name(setNumber)), Var(Name(obj)))),
     Return(Var(Name(result))))),
   If(Call(Attr(Attr(Var(Name(cls)), Name(name)), Name(__eq__)),
     String("List")), Block(
     ExprStmt(Call(Attr(Var(Name(result)), Name(setList)))),
     Local(
      Declaration(Type(Name(List), Type(Name(Object))), Name(list),
       Cast(Var(Name(obj))))),
     While(Call(Attr(Var(Name(idx)), Name(__lt__)), Call(Attr(Var(Name(list)),
         Name(size)))), Block(
       ExprStmt(Call(Attr(Var(Name(result)), Name(setListItem)),
         Var(Name(idx)), Call(Var(Name(toJSON)), Call(Attr(Var(Name(list)),
            Name(__get__)), Var(Name(idx)))))),
       Assign(Var(Name(idx)), Call(Attr(Var(Name(idx)), Name(__add__)),
         Number(1))))),
     Return(Var(Name(result))))),
   If(Call(Attr(Attr(Var(Name(cls)), Name(name)), Name(__eq__)),
     String("Map")), Block(
     ExprStmt(Call(Attr(Var(Name(result)), Name(setObject)))),
     Local(
      Declaration(Type(Name(Map), Type(Name(String)), Type(Name(Object))),
       Name(map), Cast(Var(Name(obj))))),
     Return(Var(Name(result))))),
   ExprStmt(Call(Attr(Var(Name(result)), Name(__set__)), String("$class"),
     Var(Name(cls)))),
   Local(
    Declaration(Type(Name(List), Type(Name(Field))), Name(fields),
     Call(Attr(Var(Name(cls)), Name(getFields))))),
   While(Call(Attr(Var(Name(idx)), Name(__lt__)), Call(Attr(Var(Name(fields)),
       Name(size)))), Block(
     ExprStmt(Call(Attr(Var(Name(result)), Name(__set__)),
       Attr(Call(Attr(Var(Name(fields)), Name(__get__)), Var(Name(idx))),
        Name(name)), Call(Var(Name(toJSON)), Call(Attr(Var(Name(obj)),
          Name(getField)), Attr(Call(Attr(Var(Name(fields)), Name(__get__)),
           Var(Name(idx))), Name(name)))))),
     Assign(Var(Name(idx)), Call(Attr(Var(Name(idx)), Name(__add__)),
       Number(1))))),
   Return(Var(Name(result))))),

 Function(Type(Name(Object)), Name(fromJSON),
  Param(Type(Name(Class)), Name(cls)),
  Param(Type(Name(JSONObject)), Name(json)),
  Block(
   If(Call(Attr(Call(Attr(Var(Name(json)), Name(__eq__)), Null(null)),
      Name(__or__)), Call(Attr(Var(Name(json)), Name(isNull)))), Block(
     Return(Null(null)))),
   Local(
    Declaration(Type(Name(int)), Name(idx), Number(0))),
   If(Call(Attr(Attr(Var(Name(cls)), Name(name)), Name(__eq__)),
     String("List")), Block(
     Local(
      Declaration(Type(Name(List), Type(Name(Object))), Name(list),
       Cast(Call(Attr(Var(Name(cls)), Name(construct)), List())))),
     While(Call(Attr(Var(Name(idx)), Name(__lt__)), Call(Attr(Var(Name(json)),
         Name(size)))), Block(
       ExprStmt(Call(Attr(Var(Name(list)), Name(add)),
         Call(Var(Name(fromJSON)), Call(Attr(Attr(Var(Name(cls)),
             Name(parameters)), Name(__get__)), Number(0)),
          Call(Attr(Var(Name(json)), Name(getListItem)), Var(Name(idx)))))),
       Assign(Var(Name(idx)), Call(Attr(Var(Name(idx)), Name(__add__)),
         Number(1))))),
     Return(Var(Name(list))))),
   Local(
    Declaration(Type(Name(List), Type(Name(Field))), Name(fields),
     Call(Attr(Var(Name(cls)), Name(getFields))))),
   Local(
    Declaration(Type(Name(Object)), Name(result), Call(Attr(Var(Name(cls)),
       Name(construct)), List()))),
   While(Call(Attr(Var(Name(idx)), Name(__lt__)), Call(Attr(Var(Name(fields)),
       Name(size)))), Block(
     Local(
      Declaration(Type(Name(Field)), Name(f), Call(Attr(Var(Name(fields)),
         Name(__get__)), Var(Name(idx))))),
     Assign(Var(Name(idx)), Call(Attr(Var(Name(idx)), Name(__add__)),
       Number(1))),
     If(Call(Attr(Attr(Attr(Var(Name(f)), Name(type)), Name(name)),
        Name(__eq__)), String("String")), Block(
       Local(
        Declaration(Type(Name(String)), Name(s), Call(Attr(Var(Name(json)),
           Name(__get__)), Attr(Var(Name(f)), Name(name))))),
       ExprStmt(Call(Attr(Var(Name(result)), Name(setField)),
         Attr(Var(Name(f)), Name(name)), Var(Name(s)))),
       Continue())),
     If(Call(Attr(Attr(Attr(Var(Name(f)), Name(type)), Name(name)),
        Name(__eq__)), String("float")), Block(
       Local(
        Declaration(Type(Name(float)), Name(flt), Call(Attr(Var(Name(json)),
           Name(__get__)), Attr(Var(Name(f)), Name(name))))),
       ExprStmt(Call(Attr(Var(Name(result)), Name(setField)),
         Attr(Var(Name(f)), Name(name)), Var(Name(flt)))),
       Continue())),
     If(Call(Attr(Attr(Attr(Var(Name(f)), Name(type)), Name(name)),
        Name(__eq__)), String("int")), Block(
       If(Call(Attr(Call(Attr(Call(Attr(Var(Name(json)), Name(__get__)),
             Attr(Var(Name(f)), Name(name))), Name(isNull))), Name(__not__))),
        Block(
         Local(
          Declaration(Type(Name(int)), Name(i), Call(Attr(Var(Name(json)),
             Name(__get__)), Attr(Var(Name(f)), Name(name))))),
         ExprStmt(Call(Attr(Var(Name(result)), Name(setField)),
           Attr(Var(Name(f)), Name(name)), Var(Name(i)))))),
       Continue())),
     If(Call(Attr(Attr(Attr(Var(Name(f)), Name(type)), Name(name)),
        Name(__eq__)), String("bool")), Block(
       If(Call(Attr(Call(Attr(Call(Attr(Var(Name(json)), Name(__get__)),
             Attr(Var(Name(f)), Name(name))), Name(isNull))), Name(__not__))),
        Block(
         Local(
          Declaration(Type(Name(bool)), Name(b), Call(Attr(Var(Name(json)),
             Name(__get__)), Attr(Var(Name(f)), Name(name))))),
         ExprStmt(Call(Attr(Var(Name(result)), Name(setField)),
           Attr(Var(Name(f)), Name(name)), Var(Name(b)))))),
       Continue())),
     ExprStmt(Call(Attr(Var(Name(result)), Name(setField)), Attr(Var(Name(f)),
        Name(name)), Call(Var(Name(fromJSON)), Attr(Var(Name(f)), Name(type)),
        Call(Attr(Var(Name(json)), Name(__get__)), Attr(Var(Name(f)),
          Name(name)))))))),
   Return(Var(Name(result))))),

 Primitive(Annotation(Name(mapping), Native(NativeCase(java,
     Fixed('io.datawire.quark.runtime.JSONObject')), NativeCase(py,
     Fixed('_JSONObject')), NativeCase(js, Fixed('_qrt.JSONObject')))),
  Name(JSONObject),

  ConstructorMacro(Name(JSONObject), Native(NativeCase(java,
     Fixed('new io.datawire.quark.runtime.JSONObject()')), NativeCase(py,
     Fixed('_JSONObject()')), NativeCase(js, Fixed('new _qrt.JSONObject()')))),

  MethodMacro(Type(Name(String)), Name(__to_String), Call(Attr(Var(Name(self)),
     Name(getString)))),

  MethodMacro(Type(Name(float)), Name(__to_float), Call(Attr(Var(Name(self)),
     Name(getNumber)))),

  MethodMacro(Type(Name(int)), Name(__to_int), Native(NativeCase(java,
     Fixed('((int) Math.round(('), Var(Name(self)), Fixed(').getNumber()))')),
    NativeCase(py, Fixed('int(round(('), Var(Name(self)),
     Fixed(').getNumber()))')), NativeCase(js, Fixed('Math.round(('),
     Var(Name(self)), Fixed(').getNumber())')))),

  MethodMacro(Type(Name(long)), Name(__to_long),
   Call(Attr(Call(Attr(Var(Name(self)), Name(getNumber))), Name(round)))),

  MethodMacro(Type(Name(bool)), Name(__to_bool), Call(Attr(Var(Name(self)),
     Name(getBool)))),

  Method(Type(Name(String)), Name(getType)),

  Method(Type(Name(JSONObject)), Name(getObjectItem),
   Param(Type(Name(String)), Name(key))),

  MethodMacro(Type(Name(JSONObject)), Name(__get__),
   Param(Type(Name(String)), Name(key)),
   Native(NativeCase(Fixed('('), Var(Name(self)), Fixed(').getObjectItem('),
     Var(Name(key)), Fixed(')')))),

  Method(Type(Name(JSONObject)), Name(getListItem),
   Param(Type(Name(int)), Name(index))),

  Method(Type(Name(int)), Name(size)),

  Method(Type(Name(String)), Name(getString)),

  Method(Type(Name(bool)), Name(isString)),

  Method(Type(Name(float)), Name(getNumber)),

  Method(Type(Name(bool)), Name(isNumber)),

  Method(Type(Name(bool)), Name(getBool)),

  Method(Type(Name(bool)), Name(isNull)),

  Method(Type(Name(bool)), Name(isDefined)),

  Method(Type(Name(bool)), Name(isUndefined)),

  Method(Type(Name(JSONObject)), Name(undefined)),

  Method(Type(Name(String)), Name(toString)),

  Method(Type(Name(JSONObject)), Name(setString),
   Param(Type(Name(String)), Name(value))),

  Method(Type(Name(JSONObject)), Name(setNumber),
   Param(Type(Name(Object)), Name(value))),

  Method(Type(Name(JSONObject)), Name(setBool),
   Param(Type(Name(bool)), Name(value))),

  Method(Type(Name(JSONObject)), Name(setNull)),

  Method(Type(Name(JSONObject)), Name(setObject)),

  Method(Type(Name(JSONObject)), Name(setList)),

  Method(Type(Name(JSONObject)), Name(setObjectItem),
   Param(Type(Name(String)), Name(key)),
   Param(Type(Name(JSONObject)), Name(value))),

  Method(Type(Name(JSONObject)), Name(setListItem),
   Param(Type(Name(int)), Name(index)),
   Param(Type(Name(JSONObject)), Name(value))),

  MethodMacro(Type(Name(void)), Name(__set__),
   Param(Type(Name(String)), Name(key)),
   Param(Type(Name(JSONObject)), Name(value)),
   Native(NativeCase(Fixed('('), Var(Name(self)), Fixed(').setObjectItem(('),
     Var(Name(key)), Fixed('), ('), Var(Name(value)), Fixed('))'))))),

 Macro(Type(Name(void)), Name(print),
  Param(Type(Name(Object)), Name(msg)),
  Native(NativeCase(java,
    Fixed('do'), Fixed('{'), Fixed('System.out.println('), Var(Name(msg)),
    Fixed(');System.out.flush();'), Fixed('}'), Fixed('while(false)')),
   NativeCase(py, Fixed('_println('), Var(Name(msg)), Fixed(')')),
   NativeCase(js, Fixed('_qrt.print('), Var(Name(msg)), Fixed(')')))),

 Macro(Type(Name(long)), Name(now), Native(NativeCase(java,
    Fixed('System.currentTimeMillis()')), NativeCase(py,
    Fixed('long(time.time()*1000)')), NativeCase(js, Fixed('Date.now()')))),

 Macro(Type(Name(void)), Name(sleep),
  Param(Type(Name(float)), Name(seconds)),
  Native(NativeCase(java,
    Fixed('io.datawire.quark.runtime.Builtins.sleep('), Var(Name(seconds)),
    Fixed(')')), NativeCase(py, Fixed('time.sleep('), Var(Name(seconds)),
    Fixed(')')), NativeCase(js, Fixed('_qrt.sleep('), Var(Name(seconds)),
    Fixed(')')))),

 Macro(Type(Name(String)), Name(url_get),
  Param(Type(Name(String)), Name(url)),
  Native(NativeCase(java,
    Fixed('io.datawire.quark.runtime.Builtins.url_get('), Var(Name(url)),
    Fixed(')')), NativeCase(py, Fixed('_url_get('), Var(Name(url)),
    Fixed(')')), NativeCase(js, Fixed('_qrt.url_get('), Var(Name(url)),
    Fixed(')')))),

 Macro(Type(Name(int)), Name(parseInt),
  Param(Type(Name(String)), Name(st)),
  Native(NativeCase(java,
    Fixed('Integer.parseInt('), Var(Name(st)), Fixed(')')), NativeCase(py,
    Fixed('int('), Var(Name(st)), Fixed(')')), NativeCase(js,
    Fixed('parseInt('), Var(Name(st)), Fixed(')')))),

 Macro(Type(Name(Codec)), Name(defaultCodec), Native(NativeCase(java,
    Fixed('io.datawire.quark.runtime.Builtins.defaultCodec()')), NativeCase(py,
    Fixed('_default_codec()')), NativeCase(js, Fixed('_qrt.defaultCodec()')))),

 Primitive(Annotation(Name(mapping), Native(NativeCase(java,
     Fixed('io.datawire.quark.runtime.WSHandler')))), Name(WSHandler),

  Method(Type(Name(void)), Name(onWSInit),
   Param(Type(Name(WebSocket)), Name(socket)),
   Block()),

  Method(Type(Name(void)), Name(onWSConnected),
   Param(Type(Name(WebSocket)), Name(socket)),
   Block()),

  Method(Type(Name(void)), Name(onWSMessage),
   Param(Type(Name(WebSocket)), Name(socket)),
   Param(Type(Name(String)), Name(message)),
   Block()),

  Method(Type(Name(void)), Name(onWSBinary),
   Param(Type(Name(WebSocket)), Name(socket)),
   Param(Type(Name(Buffer)), Name(message)),
   Block()),

  Method(Type(Name(void)), Name(onWSClosed),
   Param(Type(Name(WebSocket)), Name(socket)),
   Block()),

  Method(Type(Name(void)), Name(onWSError),
   Param(Type(Name(WebSocket)), Name(socket)),
   Block()),

  Method(Type(Name(void)), Name(onWSFinal),
   Param(Type(Name(WebSocket)), Name(socket)),
   Block())),

 Primitive(Annotation(Name(mapping), Native(NativeCase(java,
     Fixed('io.datawire.quark.runtime.WebSocket')))), Name(WebSocket),

  Method(Type(Name(bool)), Name(send),
   Param(Type(Name(String)), Name(message))),

  Method(Type(Name(bool)), Name(sendBinary),
   Param(Type(Name(Buffer)), Name(bytes))),

  Method(Type(Name(bool)), Name(close))),

 Primitive(Annotation(Name(mapping), Native(NativeCase(java,
     Fixed('io.datawire.quark.runtime.HTTPHandler')))), Name(HTTPHandler),

  Method(Type(Name(void)), Name(onHTTPInit),
   Param(Type(Name(HTTPRequest)), Name(request)),
   Block()),

  Method(Type(Name(void)), Name(onHTTPResponse),
   Param(Type(Name(HTTPRequest)), Name(request)),
   Param(Type(Name(HTTPResponse)), Name(response)),
   Block()),

  Method(Type(Name(void)), Name(onHTTPError),
   Param(Type(Name(HTTPRequest)), Name(request)),
   Param(Type(Name(String)), Name(message)),
   Block()),

  Method(Type(Name(void)), Name(onHTTPFinal),
   Param(Type(Name(HTTPRequest)), Name(request)),
   Block())),

 Primitive(Annotation(Name(mapping), Native(NativeCase(java,
     Fixed('io.datawire.quark.runtime.HTTPRequest')))), Name(HTTPRequest),

  ConstructorMacro(Name(HTTPRequest),
   Param(Type(Name(String)), Name(url)),
   Native(NativeCase(java,
     Fixed('new io.datawire.quark.runtime.ClientHTTPRequest('), Var(Name(url)),
     Fixed(')')), NativeCase(py, Fixed('_HTTPRequest('), Var(Name(url)),
     Fixed(')')), NativeCase(js, Fixed('new _qrt.HTTPRequest('),
     Var(Name(url)), Fixed(')')))),

  Method(Type(Name(String)), Name(getUrl)),

  Method(Type(Name(void)), Name(setMethod),
   Param(Type(Name(String)), Name(method))),

  Method(Type(Name(String)), Name(getMethod)),

  Method(Type(Name(void)), Name(setBody),
   Param(Type(Name(String)), Name(data))),

  Method(Type(Name(String)), Name(getBody)),

  Method(Type(Name(void)), Name(setHeader),
   Param(Type(Name(String)), Name(key)),
   Param(Type(Name(String)), Name(value))),

  Method(Type(Name(String)), Name(getHeader),
   Param(Type(Name(String)), Name(key))),

  Method(Type(Name(List), Type(Name(String))), Name(getHeaders))),

 Primitive(Annotation(Name(mapping), Native(NativeCase(java,
     Fixed('io.datawire.quark.runtime.HTTPResponse')))), Name(HTTPResponse),

  Method(Type(Name(int)), Name(getCode)),

  Method(Type(Name(void)), Name(setCode),
   Param(Type(Name(int)), Name(code))),

  Method(Type(Name(String)), Name(getBody)),

  Method(Type(Name(void)), Name(setBody),
   Param(Type(Name(String)), Name(body))),

  Method(Type(Name(void)), Name(setHeader),
   Param(Type(Name(String)), Name(key)),
   Param(Type(Name(String)), Name(value))),

  Method(Type(Name(String)), Name(getHeader),
   Param(Type(Name(String)), Name(key))),

  Method(Type(Name(List), Type(Name(String))), Name(getHeaders))),

 Primitive(Annotation(Name(mapping), Native(NativeCase(java,
     Fixed('io.datawire.quark.runtime.Task')))), Name(Task),

  Method(Type(Name(void)), Name(onExecute),
   Param(Type(Name(Runtime)), Name(runtime)))),

 Primitive(Annotation(Name(mapping), Native(NativeCase(java,
     Fixed('io.datawire.quark.runtime.Runtime')))), Name(Runtime),

  Method(Type(Name(void)), Name(acquire)),

  Method(Type(Name(void)), Name(release)),

  Method(Type(Name(void)), Name(wait),
   Param(Type(Name(float)), Name(timeoutInSeconds))),

  Method(Type(Name(void)), Name(open),
   Param(Type(Name(String)), Name(url)),
   Param(Type(Name(WSHandler)), Name(handler))),

  Method(Type(Name(void)), Name(request),
   Param(Type(Name(HTTPRequest)), Name(request)),
   Param(Type(Name(HTTPHandler)), Name(handler))),

  Method(Type(Name(void)), Name(schedule),
   Param(Type(Name(Task)), Name(handler)),
   Param(Type(Name(float)), Name(delayInSeconds))),

  Method(Type(Name(Codec)), Name(codec)),

  Method(Type(Name(void)), Name(serveHTTP),
   Param(Type(Name(String)), Name(url)),
   Param(Type(Name(HTTPServlet)), Name(servlet))),

  Method(Type(Name(void)), Name(serveWS),
   Param(Type(Name(String)), Name(url)),
   Param(Type(Name(WSServlet)), Name(servlet))),

  Method(Type(Name(void)), Name(respond),
   Param(Type(Name(HTTPRequest)), Name(request)),
   Param(Type(Name(HTTPResponse)), Name(response))),

  Method(Annotation(Name(doc),
    String("Display the explanatory message and then terminate the program")),
   Type(Name(void)), Name(fail),
   Param(Type(Name(String)), Name(message)))),

 Primitive(Annotation(Name(doc),
   String("A stateless buffer of bytes. Default byte order is network byte order.")),
  Annotation(Name(mapping), Native(NativeCase(java,
     Fixed('io.datawire.quark.runtime.Buffer')))), Name(Buffer),

  Method(Annotation(Name(doc), String("capacity of the buffer")),
   Type(Name(int)), Name(capacity)),

  Method(Annotation(Name(doc), String("read a byte at the specified index")),
   Type(Name(byte)), Name(getByte),
   Param(Type(Name(int)), Name(index))),

  Method(Annotation(Name(doc), String("write a byte at the specified index")),
   Type(Name(void)), Name(putByte),
   Param(Type(Name(int)), Name(index)),
   Param(Type(Name(byte)), Name(value))),

  Method(Annotation(Name(doc), String("read a short at the specified index")),
   Type(Name(short)), Name(getShort),
   Param(Type(Name(int)), Name(index))),

  Method(Annotation(Name(doc), String("write a short at the specified index")),
   Type(Name(void)), Name(putShort),
   Param(Type(Name(int)), Name(index)),
   Param(Type(Name(short)), Name(value))),

  Method(Annotation(Name(doc), String("read an int at the specified index")),
   Type(Name(int)), Name(getInt),
   Param(Type(Name(int)), Name(index))),

  Method(Annotation(Name(doc), String("write an int at the specified index")),
   Type(Name(void)), Name(putInt),
   Param(Type(Name(int)), Name(index)),
   Param(Type(Name(int)), Name(value))),

  Method(Annotation(Name(doc), String("read a long at the specified index")),
   Type(Name(long)), Name(getLong),
   Param(Type(Name(int)), Name(index))),

  Method(Annotation(Name(doc), String("write a long at the specified index")),
   Type(Name(void)), Name(putLong),
   Param(Type(Name(int)), Name(index)),
   Param(Type(Name(long)), Name(value))),

  Method(Annotation(Name(doc), String("read a float at the specified index")),
   Type(Name(float)), Name(getFloat),
   Param(Type(Name(int)), Name(index))),

  Method(Annotation(Name(doc), String("write a float at the specified index")),
   Type(Name(void)), Name(putFloat),
   Param(Type(Name(int)), Name(index)),
   Param(Type(Name(float)), Name(value))),

  Method(Annotation(Name(doc),
    String("decode length bytes as a UTF8 string at the specified index")),
   Type(Name(String)), Name(getStringUTF8),
   Param(Type(Name(int)), Name(index)),
   Param(Type(Name(int)), Name(length))),

  Method(Annotation(Name(doc),
    String("write a string encoded in UTF8 at the specified index and return encoded length")),
   Type(Name(int)), Name(putStringUTF8),
   Param(Type(Name(int)), Name(index)),
   Param(Type(Name(String)), Name(value))),

  Method(Annotation(Name(doc), String("get a view of the range")),
   Type(Name(Buffer)), Name(getSlice),
   Param(Type(Name(int)), Name(index)),
   Param(Type(Name(int)), Name(length))),

  Method(Annotation(Name(doc),
    String("copy length bytes from the source buffer starting at offset to the specified index")),
   Type(Name(void)), Name(putSlice),
   Param(Type(Name(int)), Name(index)),
   Param(Type(Name(Buffer)), Name(source)),
   Param(Type(Name(int)), Name(offset)),
   Param(Type(Name(int)), Name(length))),

  Method(Annotation(Name(doc),
    String("get a littleEndian view of the same buffer")), Type(Name(Buffer)),
   Name(littleEndian)),

  Method(Annotation(Name(doc),
    String("true if the buffer decodes in network byte order")),
   Type(Name(bool)), Name(isNetworkByteOrder))),

 Primitive(Annotation(Name(doc),
   String("Various String and Buffer conversion routines")),
  Annotation(Name(mapping), Native(NativeCase(java,
     Fixed('io.datawire.quark.runtime.Codec')))), Name(Codec),

  Method(Annotation(Name(doc),
    String("Create an empty buffer with the specified capacity")),
   Type(Name(Buffer)), Name(buffer),
   Param(Type(Name(int)), Name(capacity))),

  Method(Annotation(Name(doc),
    String("Encode the specified slice of the buffer and insert a space every 2^spaceScale bytes")),
   Type(Name(String)), Name(toHexdump),
   Param(Type(Name(Buffer)), Name(buffer)),
   Param(Type(Name(int)), Name(offeset)),
   Param(Type(Name(int)), Name(length)),
   Param(Type(Name(int)), Name(spaceScale))),

  Method(Annotation(Name(doc),
    String("decode the hexdump ignoring leading 0x and any intervening spaces")),
   Type(Name(Buffer)), Name(fromHexdump),
   Param(Type(Name(String)), Name(hex))),

  Method(Annotation(Name(doc),
    String("Encode the specified slice of the buffer as Base64")),
   Type(Name(String)), Name(toBase64),
   Param(Type(Name(Buffer)), Name(buffer)),
   Param(Type(Name(int)), Name(offset)),
   Param(Type(Name(int)), Name(length))),

  Method(Annotation(Name(doc), String("decode the Base64 enccoded string")),
   Type(Name(Buffer)), Name(fromBase64),
   Param(Type(Name(String)), Name(base64)))),

 Primitive(Annotation(Name(doc), String("A service addresable with an url")),
  Annotation(Name(mapping), Native(NativeCase(java,
     Fixed('io.datawire.quark.runtime.Servlet')))), Name(Servlet),

  Method(Annotation(Name(doc),
    String("called after the servlet is successfully installed. The url will be the actual url used, important especially if ephemeral port was requested")),
   Type(Name(void)), Name(onServletInit),
   Param(Type(Name(String)), Name(url)),
   Param(Type(Name(Runtime)), Name(runtime)),
   Block()),

  Method(Annotation(Name(doc),
    String("called if the servlet could not be installed")), Type(Name(void)),
   Name(onServletError),
   Param(Type(Name(String)), Name(url)),
   Param(Type(Name(String)), Name(error)),
   Block()),

  Method(Annotation(Name(doc), String("called when the servlet is removed")),
   Type(Name(void)), Name(onServletEnd),
   Param(Type(Name(String)), Name(url)),
   Block())),

 Primitive(Annotation(Name(doc), String("Http servlet")),
  Annotation(Name(mapping), Native(NativeCase(java,
     Fixed('io.datawire.quark.runtime.HTTPServlet')))), Name(HTTPServlet),
  Type(Name(Servlet)),

  Method(Annotation(Name(doc),
    String("incoming request. respond with Runtime.respond(). After responding the objects may get recycled by the runtime")),
   Type(Name(void)), Name(onHTTPRequest),
   Param(Type(Name(HTTPRequest)), Name(request)),
   Param(Type(Name(HTTPResponse)), Name(response)),
   Block())),

 Primitive(Annotation(Name(doc), String("Websocket servlet")),
  Annotation(Name(mapping), Native(NativeCase(java,
     Fixed('io.datawire.quark.runtime.WSServlet')))), Name(WSServlet),
  Type(Name(Servlet)),

  Method(Annotation(Name(doc),
    String("called for each new incoming WebSocket connection")),
   Type(Name(WSHandler)), Name(onWSConnect),
   Param(Type(Name(HTTPRequest)), Name(upgrade_request)),
   Block(
    Return(Null(null))))),

 Class(Name(ResponseHolder), Type(Name(HTTPHandler)),
  Field(Type(Name(HTTPResponse)), Name(response)),
  Field(Type(Name(String)), Name(failure), Null(null)),

  Method(Type(Name(void)), Name(onHTTPResponse),
   Param(Type(Name(HTTPRequest)), Name(request)),
   Param(Type(Name(HTTPResponse)), Name(response)),
   Block(
    Assign(Attr(Var(Name(self)), Name(response)), Var(Name(response))))),

  Method(Type(Name(void)), Name(onHTTPError),
   Param(Type(Name(HTTPRequest)), Name(request)),
   Param(Type(Name(String)), Name(message)),
   Block(
    Assign(Var(Name(failure)), Var(Name(message)))))),

 Interface(Name(Service),

  Method(Type(Name(String)), Name(getURL)),

  Method(Type(Name(Runtime)), Name(getRuntime)),

  Method(Type(Name(Object)), Name(rpc),
   Param(Type(Name(String)), Name(name)),
   Param(Type(Name(Object)), Name(message)),
   Block(
    Local(
     Declaration(Type(Name(HTTPRequest)), Name(request),
      Call(Type(Name(HTTPRequest)), Call(Var(Name(getURL)))))),
    Local(
     Declaration(Type(Name(JSONObject)), Name(json), Call(Var(Name(toJSON)),
       Var(Name(message))))),
    Local(
     Declaration(Type(Name(JSONObject)), Name(envelope),
      Call(Type(Name(JSONObject))))),
    ExprStmt(Call(Attr(Var(Name(envelope)), Name(__set__)), String("$method"),
      Var(Name(name)))),
    ExprStmt(Call(Attr(Var(Name(envelope)), Name(__set__)), String("rpc"),
      Var(Name(json)))),
    ExprStmt(Call(Attr(Var(Name(request)), Name(setBody)),
      Call(Attr(Var(Name(envelope)), Name(toString))))),
    ExprStmt(Call(Attr(Var(Name(request)), Name(setMethod)), String("POST"))),
    Local(
     Declaration(Type(Name(Runtime)), Name(rt), Call(Attr(Var(Name(self)),
        Name(getRuntime))))),
    Local(
     Declaration(Type(Name(ResponseHolder)), Name(rh),
      Call(Type(Name(ResponseHolder))))),
    ExprStmt(Call(Attr(Var(Name(rt)), Name(acquire)))),
    ExprStmt(Call(Attr(Var(Name(rt)), Name(request)), Var(Name(request)),
      Var(Name(rh)))),
    While(Call(Attr(Call(Attr(Attr(Var(Name(rh)), Name(response)),
         Name(__eq__)), Null(null)), Name(__and__)),
      Call(Attr(Attr(Var(Name(rh)), Name(failure)), Name(__eq__)),
       Null(null))), Block(
      ExprStmt(Call(Attr(Var(Name(rt)), Name(wait)), Number(3.14))))),
    ExprStmt(Call(Attr(Var(Name(rt)), Name(release)))),
    If(Call(Attr(Attr(Var(Name(rh)), Name(failure)), Name(__ne__)),
      Null(null)), Block(
      ExprStmt(Call(Attr(Var(Name(rt)), Name(fail)),
        Call(Attr(Call(Attr(Call(Attr(String("RPC "), Name(__add__)),
             Var(Name(name))), Name(__add__)), String("(...) failed: ")),
          Name(__add__)), Attr(Var(Name(rh)), Name(failure))))),
      Return(Null(null)))),
    Local(
     Declaration(Type(Name(HTTPResponse)), Name(response), Attr(Var(Name(rh)),
       Name(response)))),
    If(Call(Attr(Call(Attr(Var(Name(response)), Name(getCode))), Name(__ne__)),
      Number(200)), Block(
      ExprStmt(Call(Attr(Var(Name(rt)), Name(fail)),
        Call(Attr(Call(Attr(Call(Attr(String("RPC "), Name(__add__)),
             Var(Name(name))), Name(__add__)),
           String("(...) failed: Server returned error ")), Name(__add__)),
         Call(Attr(Call(Attr(Var(Name(response)), Name(getCode))),
           Name(toString)))))),
      Return(Null(null)))),
    Local(
     Declaration(Type(Name(String)), Name(body), Call(Attr(Var(Name(response)),
        Name(getBody))))),
    Local(
     Declaration(Type(Name(JSONObject)), Name(obj), Call(Attr(Var(Name(body)),
        Name(parseJSON))))),
    Local(
     Declaration(Type(Name(String)), Name(classname), Call(Attr(Var(Name(obj)),
        Name(__get__)), String("$class")))),
    If(Call(Attr(Var(Name(classname)), Name(__eq__)), Null(null)), Block(
      ExprStmt(Call(Attr(Var(Name(rt)), Name(fail)),
        Call(Attr(Call(Attr(String("RPC "), Name(__add__)), Var(Name(name))),
          Name(__add__)),
         String("(...) failed: Server returned unrecognizable content")))),
      Return(Null(null))), Block(
      Return(Call(Var(Name(fromJSON)), Call(Var(Name(Class)),
         Var(Name(classname))), Var(Name(obj))))))))),

 Class(Name(Client),
  Field(Type(Name(Runtime)), Name(runtime)),
  Field(Type(Name(String)), Name(url)),

  Constructor(Name(Client),
   Param(Type(Name(Runtime)), Name(runtime)),
   Param(Type(Name(String)), Name(url)),
   Block(
    Assign(Attr(Var(Name(self)), Name(runtime)), Var(Name(runtime))),
    Assign(Attr(Var(Name(self)), Name(url)), Var(Name(url))))),

  Method(Type(Name(Runtime)), Name(getRuntime), Block(
    Return(Attr(Var(Name(self)), Name(runtime))))),

  Method(Type(Name(String)), Name(getURL), Block(
    Return(Attr(Var(Name(self)), Name(url)))))),

 Class(Name(Server), TypeParam(Name(T)), Type(Name(HTTPServlet)),
  Field(Type(Name(Runtime)), Name(runtime)),
  Field(Type(Name(T)), Name(impl)),

  Constructor(Name(Server),
   Param(Type(Name(Runtime)), Name(runtime)),
   Param(Type(Name(T)), Name(impl)),
   Block(
    Assign(Attr(Var(Name(self)), Name(runtime)), Var(Name(runtime))),
    Assign(Attr(Var(Name(self)), Name(impl)), Var(Name(impl))))),

  Method(Type(Name(Runtime)), Name(getRuntime), Block(
    Return(Attr(Var(Name(self)), Name(runtime))))),

  Method(Type(Name(void)), Name(onHTTPRequest),
   Param(Type(Name(HTTPRequest)), Name(request)),
   Param(Type(Name(HTTPResponse)), Name(response)),
   Block(
    Local(
     Declaration(Type(Name(JSONObject)), Name(envelope),
      Call(Attr(Call(Attr(Var(Name(request)), Name(getBody))),
        Name(parseJSON))))),
    Local(
     Declaration(Type(Name(String)), Name(method),
      Call(Attr(Var(Name(envelope)), Name(__get__)), String("$method")))),
    Local(
     Declaration(Type(Name(JSONObject)), Name(json),
      Call(Attr(Var(Name(envelope)), Name(__get__)), String("rpc")))),
    Local(
     Declaration(Type(Name(Object)), Name(argument), Call(Var(Name(fromJSON)),
       Call(Var(Name(Class)), Call(Attr(Var(Name(json)), Name(__get__)),
         String("$class"))), Var(Name(json))))),
    Local(
     Declaration(Type(Name(Object)), Name(result),
      Call(Attr(Attr(Call(Attr(Call(Attr(Var(Name(self)), Name(getClass))),
           Name(getField)), String("impl")), Name(type)), Name(invoke)),
       Var(Name(impl)), Var(Name(method)), List(Var(Name(argument)))))),
    ExprStmt(Call(Attr(Var(Name(response)), Name(setBody)),
      Call(Attr(Call(Var(Name(toJSON)), Var(Name(result))), Name(toString))))),
    ExprStmt(Call(Attr(Var(Name(response)), Name(setCode)), Number(200))),
    ExprStmt(Call(Attr(Call(Var(Name(getRuntime))), Name(respond)),
      Var(Name(request)), Var(Name(response)))))),

  Method(Type(Name(void)), Name(onServletError),
   Param(Type(Name(String)), Name(url)),
   Param(Type(Name(String)), Name(message)),
   Block(
    ExprStmt(Call(Var(Name(print)),
      Call(Attr(Call(Attr(Call(Attr(String("RPC Server failed to register "),
            Name(__add__)), Var(Name(url))), Name(__add__)),
         String(" due to: ")), Name(__add__)), Var(Name(message))))))))
)