File(
 Primitive(Annotation(Name(mapping), Native(NativeCase(java, Fixed('Object')),
    NativeCase(py, Fixed('object')), NativeCase(js, Fixed('Object')))),
  Name(Object),

  MethodMacro(Type(Name(bool)), Name(__eq__),
   Param(Type(Name(Object)), Name(other), $type=0.Object),
   Native(NativeCase(java,
     Fixed('('), Var(Name(self), $type=0.Object), Fixed(')==('),
     Var(Name(other), $type=0.Object), Fixed(') || (('), Var(Name(self),
     $type=0.Object), Fixed(') != null && ('), Var(Name(self), $type=0.Object),
     Fixed(').equals('), Var(Name(other), $type=0.Object), Fixed('))')),
    NativeCase(py, Fixed('('), Var(Name(self), $type=0.Object),
     Fixed(') == ('), Var(Name(other), $type=0.Object), Fixed(')')),
    NativeCase(js, Fixed('('), Var(Name(self), $type=0.Object),
     Fixed(') === ('), Var(Name(other), $type=0.Object), Fixed(')')))),

  MethodMacro(Type(Name(bool)), Name(__ne__),
   Param(Type(Name(Object)), Name(other), $type=0.Object),
   Native(NativeCase(java,
     Fixed('!(('), Var(Name(self), $type=0.Object), Fixed(')==('),
     Var(Name(other), $type=0.Object), Fixed(') || (('), Var(Name(self),
     $type=0.Object), Fixed(') != null && ('), Var(Name(self), $type=0.Object),
     Fixed(').equals('), Var(Name(other), $type=0.Object), Fixed(')))')),
    NativeCase(py, Fixed('('), Var(Name(self), $type=0.Object),
     Fixed(') != ('), Var(Name(other), $type=0.Object), Fixed(')')),
    NativeCase(js, Fixed('('), Var(Name(self), $type=0.Object),
     Fixed(') !== ('), Var(Name(other), $type=0.Object), Fixed(')')))),

  MethodMacro(Type(Name(Class)), Name(getClass), Call(Var(Name(Class),
    $type=0.Class), Native(NativeCase(java,
      Fixed('io.datawire.quark.runtime.Builtins._getClass('), Var(Name(self),
      $type=0.Object), Fixed(')')), NativeCase(py, Fixed('_getClass('),
      Var(Name(self), $type=0.Object), Fixed(')')), NativeCase(js,
      Fixed('_qrt._getClass('), Var(Name(self), $type=0.Object), Fixed(')'))),
   $type=0.Class)),

  MethodMacro(Type(Name(Object)), Name(getField),
   Param(Type(Name(String)), Name(name), $type=0.String),
   Native(NativeCase(java,
     Fixed('((io.datawire.quark.runtime.QObject) ('), Var(Name(self),
     $type=0.Object), Fixed('))._getField('), Var(Name(name), $type=0.String),
     Fixed(')')), NativeCase(py, Fixed('('), Var(Name(self), $type=0.Object),
     Fixed(')._getField('), Var(Name(name), $type=0.String), Fixed(')')),
    NativeCase(js, Fixed('('), Var(Name(self), $type=0.Object),
     Fixed(')._getField('), Var(Name(name), $type=0.String), Fixed(')')))),

  MethodMacro(Type(Name(void)), Name(setField),
   Param(Type(Name(String)), Name(name), $type=0.String),
   Param(Type(Name(Object)), Name(value), $type=0.Object),
   Native(NativeCase(java,
     Fixed('((io.datawire.quark.runtime.QObject) ('), Var(Name(self),
     $type=0.Object), Fixed('))._setField('), Var(Name(name), $type=0.String),
     Fixed(', '), Var(Name(value), $type=0.Object), Fixed(')')), NativeCase(py,
     Fixed('('), Var(Name(self), $type=0.Object), Fixed(')._setField(('),
     Var(Name(name), $type=0.String), Fixed('), ('), Var(Name(value),
     $type=0.Object), Fixed('))')), NativeCase(js, Fixed('('), Var(Name(self),
     $type=0.Object), Fixed(')._setField(('), Var(Name(name), $type=0.String),
     Fixed('), ('), Var(Name(value), $type=0.Object), Fixed('))'))))),

 Function(Type(Name(void)), Name(_class),
  Param(Type(Name(Class)), Name(cls), $type=0.Class)),

 Function(Type(Name(Object)), Name(_construct),
  Param(Type(Name(String)), Name(className), $type=0.String),
  Param(Type(Name(List), Type(Name(Object))), Name(args),
  $type=0.List<0.Object>)),

 Function(Type(Name(List), Type(Name(Field))), Name(_fields),
  Param(Type(Name(String)), Name(className), $type=0.String)),

 Function(Type(Name(Object)), Name(_invoke),
  Param(Type(Name(String)), Name(className), $type=0.String),
  Param(Type(Name(Object)), Name(object), $type=0.Object),
  Param(Type(Name(String)), Name(name), $type=0.String),
  Param(Type(Name(List), Type(Name(Object))), Name(args),
  $type=0.List<0.Object>)),

 Class(Name(Class),
  Field(Type(Name(String)), Name(id), $type=0.String),
  Field(Type(Name(String)), Name(name), $type=0.String),
  Field(Type(Name(List), Type(Name(Class))), Name(parameters),
  $type=0.List<0.Class>),

  Constructor(Name(Class),
   Param(Type(Name(String)), Name(id), $type=0.String),
   Block(
    Assign(Attr(Var(Name(self), $type=0.Class), Name(id), $type=0.String),
     Var(Name(id), $type=0.String)),
    ExprStmt(Call(Var(Name(_class), $type=0._class), Var(Name(self),
      $type=0.Class), $type=0.void)))),

  Method(Type(Name(String)), Name(getId), Block(
    Return(Var(Name(id), $type=0.String)))),

  Method(Type(Name(String)), Name(getName), Block(
    Return(Var(Name(name), $type=0.String)))),

  Method(Type(Name(List), Type(Name(Class))), Name(getParameters), Block(
    Return(Var(Name(parameters), $type=0.List<0.Class>)))),

  Method(Type(Name(Object)), Name(construct),
   Param(Type(Name(List), Type(Name(Object))), Name(args),
   $type=0.List<0.Object>),
   Block(
    Return(Call(Var(Name(_construct), $type=0._construct),
      Call(Var(Name(getId), $type=0.Class.getId), $type=0.String),
      Var(Name(args), $type=0.List<0.Object>), $type=0.Object)))),

  Method(Type(Name(List), Type(Name(Field))), Name(getFields), Block(
    Return(Call(Var(Name(_fields), $type=0._fields), Attr(Var(Name(self),
       $type=0.Class), Name(id), $type=0.String), $type=0.List<0.Field>)))),

  Method(Type(Name(Field)), Name(getField),
   Param(Type(Name(String)), Name(name), $type=0.String),
   Block(
    Local(
     Declaration(Type(Name(List), Type(Name(Field))), Name(fields),
      Call(Var(Name(getFields), $type=0.Class.getFields),
      $type=0.List<0.Field>), $type=0.List<0.Field>)),
    Local(
     Declaration(Type(Name(int)), Name(idx), Number(0, $type=0.int),
     $type=0.int)),
    While(Call(Attr(Var(Name(idx), $type=0.int), Name(__lt__),
      $type=0.numeric.__lt__), Call(Attr(Var(Name(fields),
        $type=0.List<0.Field>), Name(size), $type=0.List.size), $type=0.int),
     $type=0.bool), Block(
      If(Call(Attr(Attr(Call(Attr(Var(Name(fields), $type=0.List<0.Field>),
            Name(__get__), $type=0.List.__get__), Var(Name(idx), $type=0.int),
          $type=0.Field), Name(name), $type=0.String), Name(__eq__),
        $type=0.Object.__eq__), Var(Name(name), $type=0.String), $type=0.bool),
       Block(
        Return(Call(Attr(Var(Name(fields), $type=0.List<0.Field>),
           Name(__get__), $type=0.List.__get__), Var(Name(idx), $type=0.int),
         $type=0.Field)))),
      Assign(Var(Name(idx), $type=0.int), Call(Attr(Var(Name(idx),
         $type=0.int), Name(__add__), $type=0.numeric.__add__), Number(1,
        $type=0.int), $type=0.int)))),
    Return(Null(null, $type=0.Object)))),

  Method(Type(Name(Object)), Name(invoke),
   Param(Type(Name(Object)), Name(object), $type=0.Object),
   Param(Type(Name(String)), Name(method), $type=0.String),
   Param(Type(Name(List), Type(Name(Object))), Name(args),
   $type=0.List<0.Object>),
   Block(
    Return(Call(Var(Name(_invoke), $type=0._invoke), Attr(Var(Name(self),
       $type=0.Class), Name(id), $type=0.String), Var(Name(object),
      $type=0.Object), Var(Name(method), $type=0.String), Var(Name(args),
      $type=0.List<0.Object>), $type=0.Object)))),

  MethodMacro(Type(Name(JSONObject)), Name(toJSON),
   Call(Attr(Call(Type(Name(JSONObject)), $type=0.JSONObject), Name(setString),
    $type=0.JSONObject.setString), Attr(Var(Name(self), $type=0.Class),
     Name(id), $type=0.String), $type=0.JSONObject)),

  MethodMacro(Type(Name(JSONObject)), Name(__to_JSONObject),
   Call(Attr(Var(Name(self), $type=0.Class), Name(toJSON),
    $type=0.Class.toJSON), $type=0.JSONObject)),

  Method(Type(Name(String)), Name(_getClass), Block(
    Return(String("Class", $type=0.String)))),

  Method(Type(Name(Object)), Name(_getField),
   Param(Type(Name(String)), Name(name), $type=0.String),
   Block(
    If(Call(Attr(Var(Name(name), $type=0.String), Name(__eq__),
      $type=0.Object.__eq__), String("id", $type=0.String), $type=0.bool),
     Block(
      Return(Attr(Var(Name(self), $type=0.Class), Name(id), $type=0.String)))),
    If(Call(Attr(Var(Name(name), $type=0.String), Name(__eq__),
      $type=0.Object.__eq__), String("name", $type=0.String), $type=0.bool),
     Block(
      Return(Attr(Var(Name(self), $type=0.Class), Name(name),
       $type=0.String)))),
    If(Call(Attr(Var(Name(name), $type=0.String), Name(__eq__),
      $type=0.Object.__eq__), String("parameters", $type=0.String),
     $type=0.bool), Block(
      Return(Attr(Var(Name(self), $type=0.Class), Name(parameters),
       $type=0.List<0.Class>)))),
    Return(Null(null, $type=0.Object)))),

  Method(Type(Name(void)), Name(_setField),
   Param(Type(Name(String)), Name(name), $type=0.String),
   Param(Type(Name(Object)), Name(value), $type=0.Object),
   Block(
    If(Call(Attr(Var(Name(name), $type=0.String), Name(__eq__),
      $type=0.Object.__eq__), String("id", $type=0.String), $type=0.bool),
     Block(
      Assign(Attr(Var(Name(self), $type=0.Class), Name(id), $type=0.String),
       Cast(Var(Name(value), $type=0.Object), $type=0.String)))),
    If(Call(Attr(Var(Name(name), $type=0.String), Name(__eq__),
      $type=0.Object.__eq__), String("name", $type=0.String), $type=0.bool),
     Block(
      Assign(Attr(Var(Name(self), $type=0.Class), Name(name), $type=0.String),
       Cast(Var(Name(value), $type=0.Object), $type=0.String)))),
    If(Call(Attr(Var(Name(name), $type=0.String), Name(__eq__),
      $type=0.Object.__eq__), String("parameters", $type=0.String),
     $type=0.bool), Block(
      Assign(Attr(Var(Name(self), $type=0.Class), Name(parameters),
       $type=0.List<0.Class>), Cast(Var(Name(value), $type=0.Object),
       $type=0.List<0.Class>))))))),

 Class(Name(Field),
  Field(Type(Name(Class)), Name(type), $type=0.Class),
  Field(Type(Name(String)), Name(name), $type=0.String),

  Constructor(Name(Field),
   Param(Type(Name(Class)), Name(type), $type=0.Class),
   Param(Type(Name(String)), Name(name), $type=0.String),
   Block(
    Assign(Attr(Var(Name(self), $type=0.Field), Name(type), $type=0.Class),
     Var(Name(type), $type=0.Class)),
    Assign(Attr(Var(Name(self), $type=0.Field), Name(name), $type=0.String),
     Var(Name(name), $type=0.String)))),

  Method(Type(Name(String)), Name(_getClass), Block(
    Return(String("Field", $type=0.String)))),

  Method(Type(Name(Object)), Name(_getField),
   Param(Type(Name(String)), Name(name), $type=0.String),
   Block(
    If(Call(Attr(Var(Name(name), $type=0.String), Name(__eq__),
      $type=0.Object.__eq__), String("type", $type=0.String), $type=0.bool),
     Block(
      Return(Attr(Var(Name(self), $type=0.Field), Name(type),
       $type=0.Class)))),
    If(Call(Attr(Var(Name(name), $type=0.String), Name(__eq__),
      $type=0.Object.__eq__), String("name", $type=0.String), $type=0.bool),
     Block(
      Return(Attr(Var(Name(self), $type=0.Field), Name(name),
       $type=0.String)))),
    Return(Null(null, $type=0.Object)))),

  Method(Type(Name(void)), Name(_setField),
   Param(Type(Name(String)), Name(name), $type=0.String),
   Param(Type(Name(Object)), Name(value), $type=0.Object),
   Block(
    If(Call(Attr(Var(Name(name), $type=0.String), Name(__eq__),
      $type=0.Object.__eq__), String("type", $type=0.String), $type=0.bool),
     Block(
      Assign(Attr(Var(Name(self), $type=0.Field), Name(type), $type=0.Class),
       Cast(Var(Name(value), $type=0.Object), $type=0.Class)))),
    If(Call(Attr(Var(Name(name), $type=0.String), Name(__eq__),
      $type=0.Object.__eq__), String("name", $type=0.String), $type=0.bool),
     Block(
      Assign(Attr(Var(Name(self), $type=0.Field), Name(name), $type=0.String),
       Cast(Var(Name(value), $type=0.Object), $type=0.String))))))),

 Primitive(Annotation(Name(mapping), Native(NativeCase(java, Fixed('void')))),
  Name(void)),

 Primitive(Annotation(Name(mapping), Native(NativeCase(java, Fixed('Boolean')),
    NativeCase(py, Fixed('bool')), NativeCase(js, Fixed('Boolean')))),
  Name(bool),

  MethodMacro(Type(Name(bool)), Name(__not__), Native(NativeCase(java,
     Fixed('!('), Var(Name(self), $type=0.bool), Fixed(')')), NativeCase(py,
     Fixed('not ('), Var(Name(self), $type=0.bool), Fixed(')')), NativeCase(js,
     Fixed('!('), Var(Name(self), $type=0.bool), Fixed(')')))),

  MethodMacro(Type(Name(bool)), Name(__and__),
   Param(Type(Name(bool)), Name(other), $type=0.bool),
   Native(NativeCase(java,
     Fixed('('), Var(Name(self), $type=0.bool), Fixed(') && ('),
     Var(Name(other), $type=0.bool), Fixed(')')), NativeCase(py, Fixed('('),
     Var(Name(self), $type=0.bool), Fixed(') and ('), Var(Name(other),
     $type=0.bool), Fixed(')')), NativeCase(js, Fixed('('), Var(Name(self),
     $type=0.bool), Fixed(') && ('), Var(Name(other), $type=0.bool),
     Fixed(')')))),

  MethodMacro(Type(Name(bool)), Name(__or__),
   Param(Type(Name(bool)), Name(other), $type=0.bool),
   Native(NativeCase(java,
     Fixed('('), Var(Name(self), $type=0.bool), Fixed(') || ('),
     Var(Name(other), $type=0.bool), Fixed(')')), NativeCase(py, Fixed('('),
     Var(Name(self), $type=0.bool), Fixed(') or ('), Var(Name(other),
     $type=0.bool), Fixed(')')), NativeCase(js, Fixed('('), Var(Name(self),
     $type=0.bool), Fixed(') || ('), Var(Name(other), $type=0.bool),
     Fixed(')')))),

  MethodMacro(Type(Name(String)), Name(toString), Native(NativeCase(java,
     Fixed('('), Var(Name(self), $type=0.bool), Fixed(').toString()')),
    NativeCase(py, Fixed('str('), Var(Name(self), $type=0.bool),
     Fixed(').lower()')), NativeCase(js, Fixed('('), Var(Name(self),
     $type=0.bool), Fixed(').toString()')))),

  MethodMacro(Type(Name(JSONObject)), Name(toJSON),
   Call(Attr(Call(Type(Name(JSONObject)), $type=0.JSONObject), Name(setBool),
    $type=0.JSONObject.setBool), Var(Name(self), $type=0.bool),
   $type=0.JSONObject)),

  MethodMacro(Type(Name(JSONObject)), Name(__to_JSONObject),
   Call(Attr(Var(Name(self), $type=0.bool), Name(toJSON), $type=0.bool.toJSON),
   $type=0.JSONObject))),

 Primitive(Name(numeric), TypeParam(Name(T)),

  MethodMacro(Type(Name(T)), Name(__neg__), Native(NativeCase(Fixed('-('),
     Var(Name(self), $type=0.numeric<0.numeric.T>), Fixed(')')))),

  MethodMacro(Type(Name(T)), Name(__add__),
   Param(Type(Name(T)), Name(other), $type=0.numeric.T),
   Native(NativeCase(Fixed('('), Var(Name(self), $type=0.numeric<0.numeric.T>),
     Fixed(') + ('), Var(Name(other), $type=0.numeric.T), Fixed(')')))),

  MethodMacro(Type(Name(T)), Name(__sub__),
   Param(Type(Name(T)), Name(other), $type=0.numeric.T),
   Native(NativeCase(Fixed('('), Var(Name(self), $type=0.numeric<0.numeric.T>),
     Fixed(') - ('), Var(Name(other), $type=0.numeric.T), Fixed(')')))),

  MethodMacro(Type(Name(T)), Name(__mul__),
   Param(Type(Name(T)), Name(other), $type=0.numeric.T),
   Native(NativeCase(Fixed('('), Var(Name(self), $type=0.numeric<0.numeric.T>),
     Fixed(') * ('), Var(Name(other), $type=0.numeric.T), Fixed(')')))),

  MethodMacro(Type(Name(T)), Name(__div__),
   Param(Type(Name(T)), Name(other), $type=0.numeric.T),
   Native(NativeCase(Fixed('('), Var(Name(self), $type=0.numeric<0.numeric.T>),
     Fixed(') / ('), Var(Name(other), $type=0.numeric.T), Fixed(')')))),

  MethodMacro(Type(Name(bool)), Name(__lt__),
   Param(Type(Name(T)), Name(other), $type=0.numeric.T),
   Native(NativeCase(Fixed('('), Var(Name(self), $type=0.numeric<0.numeric.T>),
     Fixed(') < ('), Var(Name(other), $type=0.numeric.T), Fixed(')')))),

  MethodMacro(Type(Name(bool)), Name(__gt__),
   Param(Type(Name(T)), Name(other), $type=0.numeric.T),
   Native(NativeCase(Fixed('('), Var(Name(self), $type=0.numeric<0.numeric.T>),
     Fixed(') > ('), Var(Name(other), $type=0.numeric.T), Fixed(')'))))),

 Primitive(Name(integral), TypeParam(Name(T)), Type(Name(numeric),
   Type(Name(T))),

  MethodMacro(Type(Name(T)), Name(__div__),
   Param(Type(Name(T)), Name(other), $type=0.integral.T),
   Native(NativeCase(java,
     Fixed('~((~('), Var(Name(self), $type=0.integral<0.integral.T>),
     Fixed(')) / ('), Var(Name(other), $type=0.integral.T), Fixed('))')),
    NativeCase(py, Fixed('('), Var(Name(self), $type=0.integral<0.integral.T>),
     Fixed(') / ('), Var(Name(other), $type=0.integral.T), Fixed(')')),
    NativeCase(js, Fixed('Math.floor(('), Var(Name(self),
     $type=0.integral<0.integral.T>), Fixed(') / ('), Var(Name(other),
     $type=0.integral.T), Fixed('))')))),

  MethodMacro(Type(Name(T)), Name(__mod__),
   Param(Type(Name(T)), Name(other), $type=0.integral.T),
   Native(NativeCase(java,
     Fixed('Math.floorMod(('), Var(Name(self), $type=0.integral<0.integral.T>),
     Fixed('), ('), Var(Name(other), $type=0.integral.T), Fixed('))')),
    NativeCase(py, Fixed('('), Var(Name(self), $type=0.integral<0.integral.T>),
     Fixed(') % ('), Var(Name(other), $type=0.integral.T), Fixed(')')),
    NativeCase(js, Fixed('_qrt.modulo(('), Var(Name(self),
     $type=0.integral<0.integral.T>), Fixed('), ('), Var(Name(other),
     $type=0.integral.T), Fixed('))')))),

  MethodMacro(Type(Name(float)), Name(toFloat), Native(NativeCase(java,
     Fixed('Double.valueOf('), Var(Name(self), $type=0.integral<0.integral.T>),
     Fixed(')')), NativeCase(py, Fixed('float('), Var(Name(self),
     $type=0.integral<0.integral.T>), Fixed(')')), NativeCase(js, Fixed('('),
     Var(Name(self), $type=0.integral<0.integral.T>), Fixed(')')))),

  MethodMacro(Type(Name(JSONObject)), Name(toJSON),
   Call(Attr(Call(Type(Name(JSONObject)), $type=0.JSONObject), Name(setNumber),
    $type=0.JSONObject.setNumber), Var(Name(self),
    $type=0.integral<0.integral.T>), $type=0.JSONObject)),

  MethodMacro(Type(Name(JSONObject)), Name(__to_JSONObject),
   Call(Attr(Var(Name(self), $type=0.integral<0.integral.T>), Name(toJSON),
    $type=0.integral.toJSON), $type=0.JSONObject))),

 Primitive(Annotation(Name(mapping), Native(NativeCase(java, Fixed('Byte')),
    NativeCase(py, Fixed('int')), NativeCase(js, Fixed('Number')))),
  Name(byte), Type(Name(integral), Type(Name(byte))),

  MethodMacro(Type(Name(String)), Name(toString), Native(NativeCase(java,
     Fixed('Byte.toString('), Var(Name(self), $type=0.byte), Fixed(')')),
    NativeCase(py, Fixed('str('), Var(Name(self), $type=0.byte), Fixed(')')),
    NativeCase(js, Fixed('_qrt.toString('), Var(Name(self), $type=0.byte),
     Fixed(')'))))),

 Primitive(Annotation(Name(mapping), Native(NativeCase(java, Fixed('Short')),
    NativeCase(py, Fixed('int')), NativeCase(js, Fixed('Number')))),
  Name(short), Type(Name(integral), Type(Name(short))),

  MethodMacro(Type(Name(String)), Name(toString), Native(NativeCase(java,
     Fixed('Short.toString('), Var(Name(self), $type=0.short), Fixed(')')),
    NativeCase(py, Fixed('str('), Var(Name(self), $type=0.short), Fixed(')')),
    NativeCase(js, Fixed('_qrt.toString('), Var(Name(self), $type=0.short),
     Fixed(')'))))),

 Primitive(Annotation(Name(mapping), Native(NativeCase(java, Fixed('Integer')),
    NativeCase(py, Fixed('int')), NativeCase(js, Fixed('Number')))), Name(int),
  Type(Name(integral), Type(Name(int))),

  MethodMacro(Type(Name(String)), Name(toString), Native(NativeCase(java,
     Fixed('Integer.toString('), Var(Name(self), $type=0.int), Fixed(')')),
    NativeCase(py, Fixed('str('), Var(Name(self), $type=0.int), Fixed(')')),
    NativeCase(js, Fixed('_qrt.toString('), Var(Name(self), $type=0.int),
     Fixed(')')))),

  MethodMacro(Type(Name(byte)), Name(__to_byte), Var(Name(self), $type=0.int)),

  MethodMacro(Type(Name(short)), Name(__to_short), Var(Name(self),
   $type=0.int)),

  MethodMacro(Type(Name(long)), Name(__to_long), Var(Name(self),
   $type=0.int))),

 Primitive(Annotation(Name(mapping), Native(NativeCase(java, Fixed('Long')),
    NativeCase(py, Fixed('long')), NativeCase(js, Fixed('Number')))),
  Name(long), Type(Name(integral), Type(Name(long))),

  MethodMacro(Type(Name(String)), Name(toString), Native(NativeCase(java,
     Fixed('Long.toString('), Var(Name(self), $type=0.long), Fixed(')')),
    NativeCase(py, Fixed('str('), Var(Name(self), $type=0.long), Fixed(')')),
    NativeCase(js, Fixed('_qrt.toString('), Var(Name(self), $type=0.long),
     Fixed(')'))))),

 Primitive(Annotation(Name(mapping), Native(NativeCase(java, Fixed('Double')),
    NativeCase(py, Fixed('float')), NativeCase(js, Fixed('Number')))),
  Name(float), Type(Name(numeric), Type(Name(float))),

  MethodMacro(Type(Name(float)), Name(__div__),
   Param(Type(Name(float)), Name(other), $type=0.float),
   Native(NativeCase(java,
     Fixed('('), Var(Name(self), $type=0.float), Fixed(') / ('),
     Var(Name(other), $type=0.float), Fixed(')')), NativeCase(py,
     Fixed('float('), Var(Name(self), $type=0.float), Fixed(') / float('),
     Var(Name(other), $type=0.float), Fixed(')')), NativeCase(js, Fixed('('),
     Var(Name(self), $type=0.float), Fixed(') / ('), Var(Name(other),
     $type=0.float), Fixed(')')))),

  MethodMacro(Type(Name(long)), Name(round), Native(NativeCase(java,
     Fixed('Math.round('), Var(Name(self), $type=0.float), Fixed(')')),
    NativeCase(py, Fixed('long(round('), Var(Name(self), $type=0.float),
     Fixed('))')), NativeCase(javascript, Fixed('Math.round('), Var(Name(self),
     $type=0.float), Fixed(')')))),

  MethodMacro(Type(Name(String)), Name(toString), Native(NativeCase(java,
     Fixed('Double.toString('), Var(Name(self), $type=0.float), Fixed(')')),
    NativeCase(py, Fixed('repr('), Var(Name(self), $type=0.float), Fixed(')')),
    NativeCase(js, Fixed('_qrt.toString('), Var(Name(self), $type=0.float),
     Fixed(')')))),

  MethodMacro(Type(Name(JSONObject)), Name(toJSON),
   Call(Attr(Call(Type(Name(JSONObject)), $type=0.JSONObject), Name(setNumber),
    $type=0.JSONObject.setNumber), Var(Name(self), $type=0.float),
   $type=0.JSONObject)),

  MethodMacro(Type(Name(JSONObject)), Name(__to_JSONObject),
   Call(Attr(Var(Name(self), $type=0.float), Name(toJSON),
    $type=0.float.toJSON), $type=0.JSONObject))),

 Primitive(Annotation(Name(mapping), Native(NativeCase(java, Fixed('String')),
    NativeCase(py, Fixed('str')), NativeCase(js, Fixed('String')))),
  Name(String),

  MethodMacro(Type(Name(String)), Name(__add__),
   Param(Type(Name(String)), Name(other), $type=0.String),
   Native(NativeCase(Fixed('('), Var(Name(self), $type=0.String),
     Fixed(') + ('), Var(Name(other), $type=0.String), Fixed(')')))),

  MethodMacro(Type(Name(int)), Name(size), Native(NativeCase(java, Fixed('('),
     Var(Name(self), $type=0.String), Fixed(').length()')), NativeCase(py,
     Fixed('len('), Var(Name(self), $type=0.String), Fixed(')')),
    NativeCase(js, Fixed('('), Var(Name(self), $type=0.String),
     Fixed(').length')))),

  MethodMacro(Type(Name(bool)), Name(startsWith),
   Param(Type(Name(String)), Name(other), $type=0.String),
   Native(NativeCase(java,
     Fixed('Boolean.valueOf(('), Var(Name(self), $type=0.String),
     Fixed(').startsWith('), Var(Name(other), $type=0.String), Fixed('))')),
    NativeCase(py, Fixed('('), Var(Name(self), $type=0.String),
     Fixed(').startswith('), Var(Name(other), $type=0.String), Fixed(')')),
    NativeCase(js, Fixed('(('), Var(Name(self), $type=0.String),
     Fixed(').indexOf('), Var(Name(other), $type=0.String), Fixed(')===0)')))),

  MethodMacro(Type(Name(bool)), Name(endsWith),
   Param(Type(Name(String)), Name(other), $type=0.String),
   Native(NativeCase(java,
     Fixed('Boolean.valueOf(('), Var(Name(self), $type=0.String),
     Fixed(').endsWith('), Var(Name(other), $type=0.String), Fixed('))')),
    NativeCase(py, Fixed('('), Var(Name(self), $type=0.String),
     Fixed(').endswith('), Var(Name(other), $type=0.String), Fixed(')')),
    NativeCase(js, Fixed('(('), Var(Name(self), $type=0.String),
     Fixed(').indexOf(('), Var(Name(other), $type=0.String), Fixed('), ('),
     Var(Name(self), $type=0.String), Fixed(').length - ('), Var(Name(other),
     $type=0.String), Fixed(').length) !== -1)')))),

  MethodMacro(Type(Name(int)), Name(find),
   Param(Type(Name(String)), Name(other), $type=0.String),
   Native(NativeCase(java,
     Fixed('('), Var(Name(self), $type=0.String), Fixed(').indexOf('),
     Var(Name(other), $type=0.String), Fixed(')')), NativeCase(py, Fixed('('),
     Var(Name(self), $type=0.String), Fixed(').find('), Var(Name(other),
     $type=0.String), Fixed(')')), NativeCase(js, Fixed('('), Var(Name(self),
     $type=0.String), Fixed(').indexOf('), Var(Name(other), $type=0.String),
     Fixed(')')))),

  MethodMacro(Type(Name(String)), Name(substring),
   Param(Type(Name(int)), Name(start), $type=0.int),
   Param(Type(Name(int)), Name(end), $type=0.int),
   Native(NativeCase(java,
     Fixed('('), Var(Name(self), $type=0.String), Fixed(').substring(('),
     Var(Name(start), $type=0.int), Fixed('), ('), Var(Name(end), $type=0.int),
     Fixed('))')), NativeCase(py, Fixed('('), Var(Name(self), $type=0.String),
     Fixed(')[('), Var(Name(start), $type=0.int), Fixed('):('), Var(Name(end),
     $type=0.int), Fixed(')]')), NativeCase(js, Fixed('('), Var(Name(self),
     $type=0.String), Fixed(').substring(('), Var(Name(start), $type=0.int),
     Fixed('), ('), Var(Name(end), $type=0.int), Fixed('))')))),

  MethodMacro(Type(Name(String)), Name(replace),
   Param(Type(Name(String)), Name(from), $type=0.String),
   Param(Type(Name(String)), Name(to), $type=0.String),
   Native(NativeCase(java,
     Fixed('('), Var(Name(self), $type=0.String),
     Fixed(').replaceFirst(java.util.regex.Pattern.quote('), Var(Name(from),
     $type=0.String), Fixed('), ('), Var(Name(to), $type=0.String),
     Fixed('))')), NativeCase(py, Fixed('('), Var(Name(self), $type=0.String),
     Fixed(').replace(('), Var(Name(from), $type=0.String), Fixed('), ('),
     Var(Name(to), $type=0.String), Fixed('), 1)')), NativeCase(js, Fixed('('),
     Var(Name(self), $type=0.String), Fixed(').replace(('), Var(Name(from),
     $type=0.String), Fixed('), ('), Var(Name(to), $type=0.String),
     Fixed('))')))),

  MethodMacro(Type(Name(List), Type(Name(String))), Name(split),
   Param(Type(Name(String)), Name(sep), $type=0.String),
   Native(NativeCase(java,
     Fixed('new java.util.ArrayList<String>(java.util.Arrays.asList(('),
     Var(Name(self), $type=0.String),
     Fixed(').split(java.util.regex.Pattern.quote('), Var(Name(sep),
     $type=0.String), Fixed('), -1)))')), NativeCase(py, Fixed('('),
     Var(Name(self), $type=0.String), Fixed(').split('), Var(Name(sep),
     $type=0.String), Fixed(')')), NativeCase(js, Fixed('('), Var(Name(self),
     $type=0.String), Fixed(').split('), Var(Name(sep), $type=0.String),
     Fixed(')')))),

  MethodMacro(Type(Name(String)), Name(join),
   Param(Type(Name(List), Type(Name(String))), Name(parts),
   $type=0.List<0.String>),
   Native(NativeCase(java,
     Fixed('io.datawire.quark.runtime.Builtins.join(('), Var(Name(self),
     $type=0.String), Fixed('), ('), Var(Name(parts), $type=0.List<0.String>),
     Fixed('))')), NativeCase(py, Fixed('('), Var(Name(self), $type=0.String),
     Fixed(').join('), Var(Name(parts), $type=0.List<0.String>), Fixed(')')),
    NativeCase(js, Fixed('('), Var(Name(parts), $type=0.List<0.String>),
     Fixed(').join('), Var(Name(self), $type=0.String), Fixed(')')))),

  MethodMacro(Type(Name(JSONObject)), Name(toJSON),
   Call(Attr(Call(Type(Name(JSONObject)), $type=0.JSONObject), Name(setString),
    $type=0.JSONObject.setString), Var(Name(self), $type=0.String),
   $type=0.JSONObject)),

  MethodMacro(Type(Name(JSONObject)), Name(__to_JSONObject),
   Call(Attr(Var(Name(self), $type=0.String), Name(toJSON),
    $type=0.String.toJSON), $type=0.JSONObject)),

  MethodMacro(Type(Name(JSONObject)), Name(parseJSON), Native(NativeCase(java,
     Fixed('io.datawire.quark.runtime.JSONObject.parse('), Var(Name(self),
     $type=0.String), Fixed(')')), NativeCase(py, Fixed('_JSONObject.parse('),
     Var(Name(self), $type=0.String), Fixed(')')), NativeCase(js,
     Fixed('_qrt.json_from_string('), Var(Name(self), $type=0.String),
     Fixed(')'))))),

 Primitive(Annotation(Name(mapping), Native(NativeCase(java,
     Fixed('java.util.ArrayList')), NativeCase(py, Fixed('_List')),
    NativeCase(js, Fixed('Array')))), Name(List), TypeParam(Name(T)),

  MethodMacro(Type(Name(void)), Name(add),
   Param(Type(Name(T)), Name(element), $type=0.List.T),
   Native(NativeCase(java,
     Fixed('('), Var(Name(self), $type=0.List<0.List.T>), Fixed(').add('),
     Var(Name(element), $type=0.List.T), Fixed(')')), NativeCase(py,
     Fixed('('), Var(Name(self), $type=0.List<0.List.T>), Fixed(').append('),
     Var(Name(element), $type=0.List.T), Fixed(')')), NativeCase(js,
     Fixed('('), Var(Name(self), $type=0.List<0.List.T>), Fixed(').push('),
     Var(Name(element), $type=0.List.T), Fixed(')')))),

  MethodMacro(Type(Name(T)), Name(__get__),
   Param(Type(Name(int)), Name(index), $type=0.int),
   Native(NativeCase(java,
     Fixed('('), Var(Name(self), $type=0.List<0.List.T>), Fixed(').get('),
     Var(Name(index), $type=0.int), Fixed(')')), NativeCase(py, Fixed('('),
     Var(Name(self), $type=0.List<0.List.T>), Fixed(')['), Var(Name(index),
     $type=0.int), Fixed(']')), NativeCase(js, Fixed('('), Var(Name(self),
     $type=0.List<0.List.T>), Fixed(')['), Var(Name(index), $type=0.int),
     Fixed(']')))),

  MethodMacro(Type(Name(void)), Name(__set__),
   Param(Type(Name(int)), Name(index), $type=0.int),
   Param(Type(Name(T)), Name(value), $type=0.List.T),
   Native(NativeCase(java,
     Fixed('('), Var(Name(self), $type=0.List<0.List.T>), Fixed(').set(('),
     Var(Name(index), $type=0.int), Fixed('), ('), Var(Name(value),
     $type=0.List.T), Fixed('))')), NativeCase(py, Fixed('('), Var(Name(self),
     $type=0.List<0.List.T>), Fixed(')['), Var(Name(index), $type=0.int),
     Fixed('] = ('), Var(Name(value), $type=0.List.T), Fixed(')')),
    NativeCase(js, Fixed('('), Var(Name(self), $type=0.List<0.List.T>),
     Fixed(')['), Var(Name(index), $type=0.int), Fixed('] = ('),
     Var(Name(value), $type=0.List.T), Fixed(')')))),

  MethodMacro(Type(Name(int)), Name(size), Native(NativeCase(java, Fixed('('),
     Var(Name(self), $type=0.List<0.List.T>), Fixed(').size()')),
    NativeCase(py, Fixed('len('), Var(Name(self), $type=0.List<0.List.T>),
     Fixed(')')), NativeCase(js, Fixed('('), Var(Name(self),
     $type=0.List<0.List.T>), Fixed(').length'))))),

 Primitive(Annotation(Name(mapping), Native(NativeCase(java,
     Fixed('java.util.HashMap')), NativeCase(py, Fixed('_Map')), NativeCase(js,
     Fixed('Map')))), Name(Map), TypeParam(Name(K)), TypeParam(Name(V)),

  MethodMacro(Type(Name(void)), Name(__set__),
   Param(Type(Name(K)), Name(key), $type=0.Map.K),
   Param(Type(Name(V)), Name(value), $type=0.Map.V),
   Native(NativeCase(java,
     Fixed('('), Var(Name(self), $type=0.Map<0.Map.K,0.Map.V>),
     Fixed(').put(('), Var(Name(key), $type=0.Map.K), Fixed('), ('),
     Var(Name(value), $type=0.Map.V), Fixed('))')), NativeCase(py, Fixed('('),
     Var(Name(self), $type=0.Map<0.Map.K,0.Map.V>), Fixed(')['), Var(Name(key),
     $type=0.Map.K), Fixed('] = ('), Var(Name(value), $type=0.Map.V),
     Fixed(')')), NativeCase(js, Fixed('('), Var(Name(self),
     $type=0.Map<0.Map.K,0.Map.V>), Fixed(').set(('), Var(Name(key),
     $type=0.Map.K), Fixed('), ('), Var(Name(value), $type=0.Map.V),
     Fixed('))')))),

  MethodMacro(Type(Name(V)), Name(__get__),
   Param(Type(Name(K)), Name(key), $type=0.Map.K),
   Native(NativeCase(java,
     Fixed('('), Var(Name(self), $type=0.Map<0.Map.K,0.Map.V>),
     Fixed(').get('), Var(Name(key), $type=0.Map.K), Fixed(')')),
    NativeCase(py, Fixed('('), Var(Name(self), $type=0.Map<0.Map.K,0.Map.V>),
     Fixed(').get('), Var(Name(key), $type=0.Map.K), Fixed(')')),
    NativeCase(js, Fixed('_qrt.map_get(('), Var(Name(self),
     $type=0.Map<0.Map.K,0.Map.V>), Fixed('), ('), Var(Name(key),
     $type=0.Map.K), Fixed('))')))),

  MethodMacro(Type(Name(int)), Name(contains),
   Param(Type(Name(K)), Name(key), $type=0.Map.K),
   Native(NativeCase(java,
     Fixed('('), Var(Name(self), $type=0.Map<0.Map.K,0.Map.V>),
     Fixed(').containsKey('), Var(Name(key), $type=0.Map.K), Fixed(')')),
    NativeCase(py, Fixed('('), Var(Name(key), $type=0.Map.K), Fixed(') in ('),
     Var(Name(self), $type=0.Map<0.Map.K,0.Map.V>), Fixed(')')), NativeCase(js,
     Fixed('('), Var(Name(self), $type=0.Map<0.Map.K,0.Map.V>),
     Fixed(').has('), Var(Name(key), $type=0.Map.K), Fixed(')')))),

  MethodMacro(Type(Name(void)), Name(update),
   Param(Type(Name(Map), Type(Name(K)), Type(Name(V))), Name(other),
   $type=0.Map<0.Map.K,0.Map.V>),
   Native(NativeCase(java,
     Fixed('('), Var(Name(self), $type=0.Map<0.Map.K,0.Map.V>),
     Fixed(').putAll('), Var(Name(other), $type=0.Map<0.Map.K,0.Map.V>),
     Fixed(')')), NativeCase(py, Fixed('('), Var(Name(self),
     $type=0.Map<0.Map.K,0.Map.V>), Fixed(').update('), Var(Name(other),
     $type=0.Map<0.Map.K,0.Map.V>), Fixed(')')), NativeCase(js, Fixed('('),
     Var(Name(other), $type=0.Map<0.Map.K,0.Map.V>),
     Fixed(').forEach(function (v, k) '), Fixed('{'), Fixed(' ('),
     Var(Name(self), $type=0.Map<0.Map.K,0.Map.V>), Fixed(').set(k, v); '),
     Fixed('}'), Fixed(')')))),

  MethodMacro(Type(Name(String)), Name(urlencode), Native(NativeCase(java,
     Fixed('io.datawire.quark.runtime.Builtins.urlencode('), Var(Name(self),
     $type=0.Map<0.Map.K,0.Map.V>), Fixed(')')), NativeCase(py,
     Fixed('_urlencode('), Var(Name(self), $type=0.Map<0.Map.K,0.Map.V>),
     Fixed(')')), NativeCase(js, Fixed('_qrt.urlencode('), Var(Name(self),
     $type=0.Map<0.Map.K,0.Map.V>), Fixed(')'))))),

 Function(Type(Name(JSONObject)), Name(toJSON),
  Param(Type(Name(Object)), Name(obj), $type=0.Object),
  Block(
   Local(
    Declaration(Type(Name(JSONObject)), Name(result),
     Call(Type(Name(JSONObject)), $type=0.JSONObject), $type=0.JSONObject)),
   If(Call(Attr(Var(Name(obj), $type=0.Object), Name(__eq__),
     $type=0.Object.__eq__), Null(null, $type=0.Object), $type=0.bool), Block(
     ExprStmt(Call(Attr(Var(Name(result), $type=0.JSONObject), Name(setNull),
       $type=0.JSONObject.setNull), $type=0.JSONObject)),
     Return(Var(Name(result), $type=0.JSONObject)))),
   Local(
    Declaration(Type(Name(Class)), Name(cls), Call(Attr(Var(Name(obj),
       $type=0.Object), Name(getClass), $type=0.Object.getClass),
     $type=0.Class), $type=0.Class)),
   Local(
    Declaration(Type(Name(int)), Name(idx), Number(0, $type=0.int),
    $type=0.int)),
   If(Call(Attr(Attr(Var(Name(cls), $type=0.Class), Name(name),
      $type=0.String), Name(__eq__), $type=0.Object.__eq__), String("String",
     $type=0.String), $type=0.bool), Block(
     ExprStmt(Call(Attr(Var(Name(result), $type=0.JSONObject), Name(setString),
       $type=0.JSONObject.setString), Cast(Var(Name(obj), $type=0.Object),
       $type=0.String), $type=0.JSONObject)),
     Return(Var(Name(result), $type=0.JSONObject)))),
   If(Call(Attr(Call(Attr(Call(Attr(Call(Attr(Call(Attr(Attr(Var(Name(cls),
               $type=0.Class), Name(name), $type=0.String), Name(__eq__),
             $type=0.Object.__eq__), String("byte", $type=0.String),
            $type=0.bool), Name(__or__), $type=0.bool.__or__),
           Call(Attr(Attr(Var(Name(cls), $type=0.Class), Name(name),
             $type=0.String), Name(__eq__), $type=0.Object.__eq__),
            String("short", $type=0.String), $type=0.bool), $type=0.bool),
          Name(__or__), $type=0.bool.__or__), Call(Attr(Attr(Var(Name(cls),
            $type=0.Class), Name(name), $type=0.String), Name(__eq__),
          $type=0.Object.__eq__), String("int", $type=0.String), $type=0.bool),
        $type=0.bool), Name(__or__), $type=0.bool.__or__),
       Call(Attr(Attr(Var(Name(cls), $type=0.Class), Name(name),
         $type=0.String), Name(__eq__), $type=0.Object.__eq__), String("long",
        $type=0.String), $type=0.bool), $type=0.bool), Name(__or__),
     $type=0.bool.__or__), Call(Attr(Attr(Var(Name(cls), $type=0.Class),
        Name(name), $type=0.String), Name(__eq__), $type=0.Object.__eq__),
      String("float", $type=0.String), $type=0.bool), $type=0.bool), Block(
     ExprStmt(Call(Attr(Var(Name(result), $type=0.JSONObject), Name(setNumber),
       $type=0.JSONObject.setNumber), Var(Name(obj), $type=0.Object),
      $type=0.JSONObject)),
     Return(Var(Name(result), $type=0.JSONObject)))),
   If(Call(Attr(Attr(Var(Name(cls), $type=0.Class), Name(name),
      $type=0.String), Name(__eq__), $type=0.Object.__eq__), String("List",
     $type=0.String), $type=0.bool), Block(
     ExprStmt(Call(Attr(Var(Name(result), $type=0.JSONObject), Name(setList),
       $type=0.JSONObject.setList), $type=0.JSONObject)),
     Local(
      Declaration(Type(Name(List), Type(Name(Object))), Name(list),
       Cast(Var(Name(obj), $type=0.Object), $type=0.List<0.Object>),
      $type=0.List<0.Object>)),
     While(Call(Attr(Var(Name(idx), $type=0.int), Name(__lt__),
       $type=0.numeric.__lt__), Call(Attr(Var(Name(list),
         $type=0.List<0.Object>), Name(size), $type=0.List.size), $type=0.int),
      $type=0.bool), Block(
       ExprStmt(Call(Attr(Var(Name(result), $type=0.JSONObject),
          Name(setListItem), $type=0.JSONObject.setListItem), Var(Name(idx),
         $type=0.int), Call(Var(Name(toJSON), $type=0.toJSON),
          Call(Attr(Var(Name(list), $type=0.List<0.Object>), Name(__get__),
           $type=0.List.__get__), Var(Name(idx), $type=0.int), $type=0.Object),
         $type=0.JSONObject), $type=0.JSONObject)),
       Assign(Var(Name(idx), $type=0.int), Call(Attr(Var(Name(idx),
          $type=0.int), Name(__add__), $type=0.numeric.__add__), Number(1,
         $type=0.int), $type=0.int)))),
     Return(Var(Name(result), $type=0.JSONObject)))),
   If(Call(Attr(Attr(Var(Name(cls), $type=0.Class), Name(name),
      $type=0.String), Name(__eq__), $type=0.Object.__eq__), String("Map",
     $type=0.String), $type=0.bool), Block(
     ExprStmt(Call(Attr(Var(Name(result), $type=0.JSONObject), Name(setObject),
       $type=0.JSONObject.setObject), $type=0.JSONObject)),
     Local(
      Declaration(Type(Name(Map), Type(Name(String)), Type(Name(Object))),
       Name(map), Cast(Var(Name(obj), $type=0.Object),
       $type=0.Map<0.String,0.Object>), $type=0.Map<0.String,0.Object>)),
     Return(Var(Name(result), $type=0.JSONObject)))),
   ExprStmt(Call(Attr(Var(Name(result), $type=0.JSONObject), Name(__set__),
     $type=0.JSONObject.__set__), String("$class", $type=0.String),
     Var(Name(cls), $type=0.Class), $type=0.void)),
   Local(
    Declaration(Type(Name(List), Type(Name(Field))), Name(fields),
     Call(Attr(Var(Name(cls), $type=0.Class), Name(getFields),
      $type=0.Class.getFields), $type=0.List<0.Field>),
    $type=0.List<0.Field>)),
   While(Call(Attr(Var(Name(idx), $type=0.int), Name(__lt__),
     $type=0.numeric.__lt__), Call(Attr(Var(Name(fields),
       $type=0.List<0.Field>), Name(size), $type=0.List.size), $type=0.int),
    $type=0.bool), Block(
     ExprStmt(Call(Attr(Var(Name(result), $type=0.JSONObject), Name(__set__),
       $type=0.JSONObject.__set__), Attr(Call(Attr(Var(Name(fields),
          $type=0.List<0.Field>), Name(__get__), $type=0.List.__get__),
         Var(Name(idx), $type=0.int), $type=0.Field), Name(name),
       $type=0.String), Call(Var(Name(toJSON), $type=0.toJSON),
        Call(Attr(Var(Name(obj), $type=0.Object), Name(getField),
         $type=0.Object.getField), Attr(Call(Attr(Var(Name(fields),
            $type=0.List<0.Field>), Name(__get__), $type=0.List.__get__),
           Var(Name(idx), $type=0.int), $type=0.Field), Name(name),
         $type=0.String), $type=0.Object), $type=0.JSONObject), $type=0.void)),
     Assign(Var(Name(idx), $type=0.int), Call(Attr(Var(Name(idx), $type=0.int),
        Name(__add__), $type=0.numeric.__add__), Number(1, $type=0.int),
      $type=0.int)))),
   Return(Var(Name(result), $type=0.JSONObject)))),

 Function(Type(Name(Object)), Name(fromJSON),
  Param(Type(Name(Class)), Name(cls), $type=0.Class),
  Param(Type(Name(JSONObject)), Name(json), $type=0.JSONObject),
  Block(
   If(Call(Attr(Call(Attr(Var(Name(json), $type=0.JSONObject), Name(__eq__),
       $type=0.Object.__eq__), Null(null, $type=0.Object), $type=0.bool),
      Name(__or__), $type=0.bool.__or__), Call(Attr(Var(Name(json),
       $type=0.JSONObject), Name(isNull), $type=0.JSONObject.isNull),
     $type=0.bool), $type=0.bool), Block(
     Return(Null(null, $type=0.Object)))),
   Local(
    Declaration(Type(Name(int)), Name(idx), Number(0, $type=0.int),
    $type=0.int)),
   If(Call(Attr(Attr(Var(Name(cls), $type=0.Class), Name(name),
      $type=0.String), Name(__eq__), $type=0.Object.__eq__), String("List",
     $type=0.String), $type=0.bool), Block(
     Local(
      Declaration(Type(Name(List), Type(Name(Object))), Name(list),
       Cast(Call(Attr(Var(Name(cls), $type=0.Class), Name(construct),
         $type=0.Class.construct), List(, $type=0.List<0.Object>),
        $type=0.Object), $type=0.List<0.Object>), $type=0.List<0.Object>)),
     While(Call(Attr(Var(Name(idx), $type=0.int), Name(__lt__),
       $type=0.numeric.__lt__), Call(Attr(Var(Name(json), $type=0.JSONObject),
         Name(size), $type=0.JSONObject.size), $type=0.int), $type=0.bool),
      Block(
       ExprStmt(Call(Attr(Var(Name(list), $type=0.List<0.Object>), Name(add),
         $type=0.List.add), Call(Var(Name(fromJSON), $type=0.fromJSON),
          Call(Attr(Attr(Var(Name(cls), $type=0.Class), Name(parameters),
            $type=0.List<0.Class>), Name(__get__), $type=0.List.__get__),
           Number(0, $type=0.int), $type=0.Class), Call(Attr(Var(Name(json),
            $type=0.JSONObject), Name(getListItem),
           $type=0.JSONObject.getListItem), Var(Name(idx), $type=0.int),
          $type=0.JSONObject), $type=0.Object), $type=0.void)),
       Assign(Var(Name(idx), $type=0.int), Call(Attr(Var(Name(idx),
          $type=0.int), Name(__add__), $type=0.numeric.__add__), Number(1,
         $type=0.int), $type=0.int)))),
     Return(Var(Name(list), $type=0.List<0.Object>)))),
   Local(
    Declaration(Type(Name(List), Type(Name(Field))), Name(fields),
     Call(Attr(Var(Name(cls), $type=0.Class), Name(getFields),
      $type=0.Class.getFields), $type=0.List<0.Field>),
    $type=0.List<0.Field>)),
   Local(
    Declaration(Type(Name(Object)), Name(result), Call(Attr(Var(Name(cls),
       $type=0.Class), Name(construct), $type=0.Class.construct), List(,
      $type=0.List<0.Object>), $type=0.Object), $type=0.Object)),
   While(Call(Attr(Var(Name(idx), $type=0.int), Name(__lt__),
     $type=0.numeric.__lt__), Call(Attr(Var(Name(fields),
       $type=0.List<0.Field>), Name(size), $type=0.List.size), $type=0.int),
    $type=0.bool), Block(
     Local(
      Declaration(Type(Name(Field)), Name(f), Call(Attr(Var(Name(fields),
         $type=0.List<0.Field>), Name(__get__), $type=0.List.__get__),
        Var(Name(idx), $type=0.int), $type=0.Field), $type=0.Field)),
     Assign(Var(Name(idx), $type=0.int), Call(Attr(Var(Name(idx), $type=0.int),
        Name(__add__), $type=0.numeric.__add__), Number(1, $type=0.int),
      $type=0.int)),
     If(Call(Attr(Attr(Attr(Var(Name(f), $type=0.Field), Name(type),
         $type=0.Class), Name(name), $type=0.String), Name(__eq__),
       $type=0.Object.__eq__), String("String", $type=0.String), $type=0.bool),
      Block(
       Local(
        Declaration(Type(Name(String)), Name(s), Call(Attr(Var(Name(json),
           $type=0.JSONObject), Name(__get__), $type=0.JSONObject.__get__),
          Attr(Var(Name(f), $type=0.Field), Name(name), $type=0.String),
         $type=0.JSONObject), $type=0.String)),
       ExprStmt(Call(Attr(Var(Name(result), $type=0.Object), Name(setField),
         $type=0.Object.setField), Attr(Var(Name(f), $type=0.Field),
          Name(name), $type=0.String), Var(Name(s), $type=0.String),
        $type=0.void)),
       Continue())),
     If(Call(Attr(Attr(Attr(Var(Name(f), $type=0.Field), Name(type),
         $type=0.Class), Name(name), $type=0.String), Name(__eq__),
       $type=0.Object.__eq__), String("float", $type=0.String), $type=0.bool),
      Block(
       Local(
        Declaration(Type(Name(float)), Name(flt), Call(Attr(Var(Name(json),
           $type=0.JSONObject), Name(__get__), $type=0.JSONObject.__get__),
          Attr(Var(Name(f), $type=0.Field), Name(name), $type=0.String),
         $type=0.JSONObject), $type=0.float)),
       ExprStmt(Call(Attr(Var(Name(result), $type=0.Object), Name(setField),
         $type=0.Object.setField), Attr(Var(Name(f), $type=0.Field),
          Name(name), $type=0.String), Var(Name(flt), $type=0.float),
        $type=0.void)),
       Continue())),
     If(Call(Attr(Attr(Attr(Var(Name(f), $type=0.Field), Name(type),
         $type=0.Class), Name(name), $type=0.String), Name(__eq__),
       $type=0.Object.__eq__), String("int", $type=0.String), $type=0.bool),
      Block(
       If(Call(Attr(Call(Attr(Call(Attr(Var(Name(json), $type=0.JSONObject),
              Name(__get__), $type=0.JSONObject.__get__), Attr(Var(Name(f),
              $type=0.Field), Name(name), $type=0.String), $type=0.JSONObject),
            Name(isNull), $type=0.JSONObject.isNull), $type=0.bool),
          Name(__not__), $type=0.bool.__not__), $type=0.bool), Block(
         Local(
          Declaration(Type(Name(int)), Name(i), Call(Attr(Var(Name(json),
             $type=0.JSONObject), Name(__get__), $type=0.JSONObject.__get__),
            Attr(Var(Name(f), $type=0.Field), Name(name), $type=0.String),
           $type=0.JSONObject), $type=0.int)),
         ExprStmt(Call(Attr(Var(Name(result), $type=0.Object), Name(setField),
           $type=0.Object.setField), Attr(Var(Name(f), $type=0.Field),
            Name(name), $type=0.String), Var(Name(i), $type=0.int),
          $type=0.void)))),
       Continue())),
     If(Call(Attr(Attr(Attr(Var(Name(f), $type=0.Field), Name(type),
         $type=0.Class), Name(name), $type=0.String), Name(__eq__),
       $type=0.Object.__eq__), String("bool", $type=0.String), $type=0.bool),
      Block(
       If(Call(Attr(Call(Attr(Call(Attr(Var(Name(json), $type=0.JSONObject),
              Name(__get__), $type=0.JSONObject.__get__), Attr(Var(Name(f),
              $type=0.Field), Name(name), $type=0.String), $type=0.JSONObject),
            Name(isNull), $type=0.JSONObject.isNull), $type=0.bool),
          Name(__not__), $type=0.bool.__not__), $type=0.bool), Block(
         Local(
          Declaration(Type(Name(bool)), Name(b), Call(Attr(Var(Name(json),
             $type=0.JSONObject), Name(__get__), $type=0.JSONObject.__get__),
            Attr(Var(Name(f), $type=0.Field), Name(name), $type=0.String),
           $type=0.JSONObject), $type=0.bool)),
         ExprStmt(Call(Attr(Var(Name(result), $type=0.Object), Name(setField),
           $type=0.Object.setField), Attr(Var(Name(f), $type=0.Field),
            Name(name), $type=0.String), Var(Name(b), $type=0.bool),
          $type=0.void)))),
       Continue())),
     ExprStmt(Call(Attr(Var(Name(result), $type=0.Object), Name(setField),
       $type=0.Object.setField), Attr(Var(Name(f), $type=0.Field), Name(name),
       $type=0.String), Call(Var(Name(fromJSON), $type=0.fromJSON),
        Attr(Var(Name(f), $type=0.Field), Name(type), $type=0.Class),
        Call(Attr(Var(Name(json), $type=0.JSONObject), Name(__get__),
         $type=0.JSONObject.__get__), Attr(Var(Name(f), $type=0.Field),
          Name(name), $type=0.String), $type=0.JSONObject), $type=0.Object),
      $type=0.void)))),
   Return(Var(Name(result), $type=0.Object)))),

 Primitive(Annotation(Name(mapping), Native(NativeCase(java,
     Fixed('io.datawire.quark.runtime.JSONObject')), NativeCase(py,
     Fixed('_JSONObject')), NativeCase(js, Fixed('_qrt.JSONObject')))),
  Name(JSONObject),

  ConstructorMacro(Name(JSONObject), Native(NativeCase(java,
     Fixed('new io.datawire.quark.runtime.JSONObject()')), NativeCase(py,
     Fixed('_JSONObject()')), NativeCase(js, Fixed('new _qrt.JSONObject()')))),

  MethodMacro(Type(Name(String)), Name(__to_String), Call(Attr(Var(Name(self),
     $type=0.JSONObject), Name(getString), $type=0.JSONObject.getString),
   $type=0.String)),

  MethodMacro(Type(Name(float)), Name(__to_float), Call(Attr(Var(Name(self),
     $type=0.JSONObject), Name(getNumber), $type=0.JSONObject.getNumber),
   $type=0.float)),

  MethodMacro(Type(Name(int)), Name(__to_int), Native(NativeCase(java,
     Fixed('((int) Math.round(('), Var(Name(self), $type=0.JSONObject),
     Fixed(').getNumber()))')), NativeCase(py, Fixed('int(round(('),
     Var(Name(self), $type=0.JSONObject), Fixed(').getNumber()))')),
    NativeCase(js, Fixed('Math.round(('), Var(Name(self), $type=0.JSONObject),
     Fixed(').getNumber())')))),

  MethodMacro(Type(Name(long)), Name(__to_long),
   Call(Attr(Call(Attr(Var(Name(self), $type=0.JSONObject), Name(getNumber),
      $type=0.JSONObject.getNumber), $type=0.float), Name(round),
    $type=0.float.round), $type=0.long)),

  MethodMacro(Type(Name(bool)), Name(__to_bool), Call(Attr(Var(Name(self),
     $type=0.JSONObject), Name(getBool), $type=0.JSONObject.getBool),
   $type=0.bool)),

  Method(Type(Name(String)), Name(getType)),

  Method(Type(Name(JSONObject)), Name(getObjectItem),
   Param(Type(Name(String)), Name(key), $type=0.String)),

  MethodMacro(Type(Name(JSONObject)), Name(__get__),
   Param(Type(Name(String)), Name(key), $type=0.String),
   Native(NativeCase(Fixed('('), Var(Name(self), $type=0.JSONObject),
     Fixed(').getObjectItem('), Var(Name(key), $type=0.String), Fixed(')')))),

  Method(Type(Name(JSONObject)), Name(getListItem),
   Param(Type(Name(int)), Name(index), $type=0.int)),

  Method(Type(Name(int)), Name(size)),

  Method(Type(Name(String)), Name(getString)),

  Method(Type(Name(bool)), Name(isString)),

  Method(Type(Name(float)), Name(getNumber)),

  Method(Type(Name(bool)), Name(isNumber)),

  Method(Type(Name(bool)), Name(getBool)),

  Method(Type(Name(bool)), Name(isNull)),

  Method(Type(Name(bool)), Name(isDefined)),

  Method(Type(Name(bool)), Name(isUndefined)),

  Method(Type(Name(JSONObject)), Name(undefined)),

  Method(Type(Name(String)), Name(toString)),

  Method(Type(Name(JSONObject)), Name(setString),
   Param(Type(Name(String)), Name(value), $type=0.String)),

  Method(Type(Name(JSONObject)), Name(setNumber),
   Param(Type(Name(Object)), Name(value), $type=0.Object)),

  Method(Type(Name(JSONObject)), Name(setBool),
   Param(Type(Name(bool)), Name(value), $type=0.bool)),

  Method(Type(Name(JSONObject)), Name(setNull)),

  Method(Type(Name(JSONObject)), Name(setObject)),

  Method(Type(Name(JSONObject)), Name(setList)),

  Method(Type(Name(JSONObject)), Name(setObjectItem),
   Param(Type(Name(String)), Name(key), $type=0.String),
   Param(Type(Name(JSONObject)), Name(value), $type=0.JSONObject)),

  Method(Type(Name(JSONObject)), Name(setListItem),
   Param(Type(Name(int)), Name(index), $type=0.int),
   Param(Type(Name(JSONObject)), Name(value), $type=0.JSONObject)),

  MethodMacro(Type(Name(void)), Name(__set__),
   Param(Type(Name(String)), Name(key), $type=0.String),
   Param(Type(Name(JSONObject)), Name(value), $type=0.JSONObject),
   Native(NativeCase(Fixed('('), Var(Name(self), $type=0.JSONObject),
     Fixed(').setObjectItem(('), Var(Name(key), $type=0.String), Fixed('), ('),
     Var(Name(value), $type=0.JSONObject), Fixed('))'))))),

 Macro(Type(Name(void)), Name(print),
  Param(Type(Name(Object)), Name(msg), $type=0.Object),
  Native(NativeCase(java,
    Fixed('System.out.println('), Var(Name(msg), $type=0.Object), Fixed(')')),
   NativeCase(py, Fixed('_println('), Var(Name(msg), $type=0.Object),
    Fixed(')')), NativeCase(js, Fixed('_qrt.print('), Var(Name(msg),
    $type=0.Object), Fixed(')')))),

 Macro(Type(Name(long)), Name(now), Native(NativeCase(java,
    Fixed('System.currentTimeMillis()')), NativeCase(py,
    Fixed('long(time.time()*1000)')), NativeCase(js, Fixed('Date.now()')))),

 Macro(Type(Name(void)), Name(sleep),
  Param(Type(Name(float)), Name(seconds), $type=0.float),
  Native(NativeCase(java,
    Fixed('io.datawire.quark.runtime.Builtins.sleep('), Var(Name(seconds),
    $type=0.float), Fixed(')')), NativeCase(py, Fixed('time.sleep('),
    Var(Name(seconds), $type=0.float), Fixed(')')), NativeCase(js,
    Fixed('_qrt.sleep('), Var(Name(seconds), $type=0.float), Fixed(')')))),

 Macro(Type(Name(String)), Name(url_get),
  Param(Type(Name(String)), Name(url), $type=0.String),
  Native(NativeCase(java,
    Fixed('io.datawire.quark.runtime.Builtins.url_get('), Var(Name(url),
    $type=0.String), Fixed(')')), NativeCase(py, Fixed('_url_get('),
    Var(Name(url), $type=0.String), Fixed(')')), NativeCase(js,
    Fixed('_qrt.url_get('), Var(Name(url), $type=0.String), Fixed(')')))),

 Macro(Type(Name(int)), Name(parseInt),
  Param(Type(Name(String)), Name(st), $type=0.String),
  Native(NativeCase(java,
    Fixed('Integer.parseInt('), Var(Name(st), $type=0.String), Fixed(')')),
   NativeCase(py, Fixed('int('), Var(Name(st), $type=0.String), Fixed(')')),
   NativeCase(js, Fixed('parseInt('), Var(Name(st), $type=0.String),
    Fixed(')')))),

 Macro(Type(Name(Codec)), Name(defaultCodec), Native(NativeCase(java,
    Fixed('io.datawire.quark.runtime.Builtins.defaultCodec()')), NativeCase(py,
    Fixed('_default_codec()')), NativeCase(js, Fixed('_qrt.defaultCodec()')))),

 Primitive(Annotation(Name(mapping), Native(NativeCase(java,
     Fixed('io.datawire.quark.runtime.WSHandler')))), Name(WSHandler),

  Method(Type(Name(void)), Name(onWSInit),
   Param(Type(Name(WebSocket)), Name(socket), $type=0.WebSocket),
   Block()),

  Method(Type(Name(void)), Name(onWSConnected),
   Param(Type(Name(WebSocket)), Name(socket), $type=0.WebSocket),
   Block()),

  Method(Type(Name(void)), Name(onWSMessage),
   Param(Type(Name(WebSocket)), Name(socket), $type=0.WebSocket),
   Param(Type(Name(String)), Name(message), $type=0.String),
   Block()),

  Method(Type(Name(void)), Name(onWSBinary),
   Param(Type(Name(WebSocket)), Name(socket), $type=0.WebSocket),
   Param(Type(Name(Buffer)), Name(message), $type=0.Buffer),
   Block()),

  Method(Type(Name(void)), Name(onWSClosed),
   Param(Type(Name(WebSocket)), Name(socket), $type=0.WebSocket),
   Block()),

  Method(Type(Name(void)), Name(onWSError),
   Param(Type(Name(WebSocket)), Name(socket), $type=0.WebSocket),
   Block()),

  Method(Type(Name(void)), Name(onWSFinal),
   Param(Type(Name(WebSocket)), Name(socket), $type=0.WebSocket),
   Block())),

 Primitive(Annotation(Name(mapping), Native(NativeCase(java,
     Fixed('io.datawire.quark.runtime.WebSocket')))), Name(WebSocket),

  Method(Type(Name(bool)), Name(send),
   Param(Type(Name(String)), Name(message), $type=0.String)),

  Method(Type(Name(bool)), Name(sendBinary),
   Param(Type(Name(Buffer)), Name(bytes), $type=0.Buffer)),

  Method(Type(Name(bool)), Name(close))),

 Primitive(Annotation(Name(mapping), Native(NativeCase(java,
     Fixed('io.datawire.quark.runtime.HTTPHandler')))), Name(HTTPHandler),

  Method(Type(Name(void)), Name(onHTTPInit),
   Param(Type(Name(HTTPRequest)), Name(request), $type=0.HTTPRequest),
   Block()),

  Method(Type(Name(void)), Name(onHTTPResponse),
   Param(Type(Name(HTTPRequest)), Name(request), $type=0.HTTPRequest),
   Param(Type(Name(HTTPResponse)), Name(response), $type=0.HTTPResponse),
   Block()),

  Method(Type(Name(void)), Name(onHTTPError),
   Param(Type(Name(HTTPRequest)), Name(request), $type=0.HTTPRequest),
   Block()),

  Method(Type(Name(void)), Name(onHTTPFinal),
   Param(Type(Name(HTTPRequest)), Name(request), $type=0.HTTPRequest),
   Block())),

 Primitive(Annotation(Name(mapping), Native(NativeCase(java,
     Fixed('io.datawire.quark.runtime.HTTPRequest')))), Name(HTTPRequest),

  ConstructorMacro(Name(HTTPRequest),
   Param(Type(Name(String)), Name(url), $type=0.String),
   Native(NativeCase(java,
     Fixed('new io.datawire.quark.runtime.ClientHTTPRequest('), Var(Name(url),
     $type=0.String), Fixed(')')), NativeCase(py, Fixed('_HTTPRequest('),
     Var(Name(url), $type=0.String), Fixed(')')), NativeCase(js,
     Fixed('new _qrt.HTTPRequest('), Var(Name(url), $type=0.String),
     Fixed(')')))),

  Method(Type(Name(String)), Name(getUrl)),

  Method(Type(Name(void)), Name(setMethod),
   Param(Type(Name(String)), Name(method), $type=0.String)),

  Method(Type(Name(String)), Name(getMethod)),

  Method(Type(Name(void)), Name(setBody),
   Param(Type(Name(String)), Name(data), $type=0.String)),

  Method(Type(Name(String)), Name(getBody)),

  Method(Type(Name(void)), Name(setHeader),
   Param(Type(Name(String)), Name(key), $type=0.String),
   Param(Type(Name(String)), Name(value), $type=0.String)),

  Method(Type(Name(String)), Name(getHeader),
   Param(Type(Name(String)), Name(key), $type=0.String)),

  Method(Type(Name(List), Type(Name(String))), Name(getHeaders))),

 Primitive(Annotation(Name(mapping), Native(NativeCase(java,
     Fixed('io.datawire.quark.runtime.HTTPResponse')))), Name(HTTPResponse),

  Method(Type(Name(int)), Name(getCode)),

  Method(Type(Name(void)), Name(setCode),
   Param(Type(Name(int)), Name(code), $type=0.int)),

  Method(Type(Name(String)), Name(getBody)),

  Method(Type(Name(void)), Name(setBody),
   Param(Type(Name(String)), Name(body), $type=0.String)),

  Method(Type(Name(void)), Name(setHeader),
   Param(Type(Name(String)), Name(key), $type=0.String),
   Param(Type(Name(String)), Name(value), $type=0.String)),

  Method(Type(Name(String)), Name(getHeader),
   Param(Type(Name(String)), Name(key), $type=0.String)),

  Method(Type(Name(List), Type(Name(String))), Name(getHeaders))),

 Primitive(Annotation(Name(mapping), Native(NativeCase(java,
     Fixed('io.datawire.quark.runtime.Task')))), Name(Task),

  Method(Type(Name(void)), Name(onExecute),
   Param(Type(Name(Runtime)), Name(runtime), $type=0.Runtime))),

 Primitive(Annotation(Name(mapping), Native(NativeCase(java,
     Fixed('io.datawire.quark.runtime.Runtime')))), Name(Runtime),

  Method(Type(Name(void)), Name(acquire)),

  Method(Type(Name(void)), Name(release)),

  Method(Type(Name(void)), Name(wait),
   Param(Type(Name(float)), Name(timeoutInSeconds), $type=0.float)),

  Method(Type(Name(void)), Name(open),
   Param(Type(Name(String)), Name(url), $type=0.String),
   Param(Type(Name(WSHandler)), Name(handler), $type=0.WSHandler)),

  Method(Type(Name(void)), Name(request),
   Param(Type(Name(HTTPRequest)), Name(request), $type=0.HTTPRequest),
   Param(Type(Name(HTTPHandler)), Name(handler), $type=0.HTTPHandler)),

  Method(Type(Name(void)), Name(schedule),
   Param(Type(Name(Task)), Name(handler), $type=0.Task),
   Param(Type(Name(float)), Name(delayInSeconds), $type=0.float)),

  Method(Type(Name(Codec)), Name(codec)),

  Method(Type(Name(void)), Name(serveHTTP),
   Param(Type(Name(String)), Name(url), $type=0.String),
   Param(Type(Name(HTTPServlet)), Name(servlet), $type=0.HTTPServlet)),

  Method(Type(Name(void)), Name(serveWS),
   Param(Type(Name(String)), Name(url), $type=0.String),
   Param(Type(Name(WSServlet)), Name(servlet), $type=0.WSServlet)),

  Method(Type(Name(void)), Name(respond),
   Param(Type(Name(HTTPRequest)), Name(request), $type=0.HTTPRequest),
   Param(Type(Name(HTTPResponse)), Name(response), $type=0.HTTPResponse))),

 Primitive(Annotation(Name(doc),
   String("A stateless buffer of bytes. Default byte order is network byte order.",
   $type=0.String)), Annotation(Name(mapping), Native(NativeCase(java,
     Fixed('io.datawire.quark.runtime.Buffer')))), Name(Buffer),

  Method(Annotation(Name(doc), String("capacity of the buffer",
    $type=0.String)), Type(Name(int)), Name(capacity)),

  Method(Annotation(Name(doc), String("read a byte at the specified index",
    $type=0.String)), Type(Name(byte)), Name(getByte),
   Param(Type(Name(int)), Name(index), $type=0.int)),

  Method(Annotation(Name(doc), String("write a byte at the specified index",
    $type=0.String)), Type(Name(void)), Name(putByte),
   Param(Type(Name(int)), Name(index), $type=0.int),
   Param(Type(Name(byte)), Name(value), $type=0.byte)),

  Method(Annotation(Name(doc), String("read a short at the specified index",
    $type=0.String)), Type(Name(short)), Name(getShort),
   Param(Type(Name(int)), Name(index), $type=0.int)),

  Method(Annotation(Name(doc), String("write a short at the specified index",
    $type=0.String)), Type(Name(void)), Name(putShort),
   Param(Type(Name(int)), Name(index), $type=0.int),
   Param(Type(Name(short)), Name(value), $type=0.short)),

  Method(Annotation(Name(doc), String("read an int at the specified index",
    $type=0.String)), Type(Name(int)), Name(getInt),
   Param(Type(Name(int)), Name(index), $type=0.int)),

  Method(Annotation(Name(doc), String("write an int at the specified index",
    $type=0.String)), Type(Name(void)), Name(putInt),
   Param(Type(Name(int)), Name(index), $type=0.int),
   Param(Type(Name(int)), Name(value), $type=0.int)),

  Method(Annotation(Name(doc), String("read a long at the specified index",
    $type=0.String)), Type(Name(long)), Name(getLong),
   Param(Type(Name(int)), Name(index), $type=0.int)),

  Method(Annotation(Name(doc), String("write a long at the specified index",
    $type=0.String)), Type(Name(void)), Name(putLong),
   Param(Type(Name(int)), Name(index), $type=0.int),
   Param(Type(Name(long)), Name(value), $type=0.long)),

  Method(Annotation(Name(doc), String("read a float at the specified index",
    $type=0.String)), Type(Name(float)), Name(getFloat),
   Param(Type(Name(int)), Name(index), $type=0.int)),

  Method(Annotation(Name(doc), String("write a float at the specified index",
    $type=0.String)), Type(Name(void)), Name(putFloat),
   Param(Type(Name(int)), Name(index), $type=0.int),
   Param(Type(Name(float)), Name(value), $type=0.float)),

  Method(Annotation(Name(doc),
    String("decode length bytes as a UTF8 string at the specified index",
    $type=0.String)), Type(Name(String)), Name(getStringUTF8),
   Param(Type(Name(int)), Name(index), $type=0.int),
   Param(Type(Name(int)), Name(length), $type=0.int)),

  Method(Annotation(Name(doc),
    String("write a string encoded in UTF8 at the specified index and return encoded length",
    $type=0.String)), Type(Name(int)), Name(putStringUTF8),
   Param(Type(Name(int)), Name(index), $type=0.int),
   Param(Type(Name(String)), Name(value), $type=0.String)),

  Method(Annotation(Name(doc), String("get a view of the range",
    $type=0.String)), Type(Name(Buffer)), Name(getSlice),
   Param(Type(Name(int)), Name(index), $type=0.int),
   Param(Type(Name(int)), Name(length), $type=0.int)),

  Method(Annotation(Name(doc),
    String("copy length bytes from the source buffer starting at offset to the specified index",
    $type=0.String)), Type(Name(void)), Name(putSlice),
   Param(Type(Name(int)), Name(index), $type=0.int),
   Param(Type(Name(Buffer)), Name(source), $type=0.Buffer),
   Param(Type(Name(int)), Name(offset), $type=0.int),
   Param(Type(Name(int)), Name(length), $type=0.int)),

  Method(Annotation(Name(doc),
    String("get a littleEndian view of the same buffer", $type=0.String)),
   Type(Name(Buffer)), Name(littleEndian)),

  Method(Annotation(Name(doc),
    String("true if the buffer decodes in network byte order",
    $type=0.String)), Type(Name(bool)), Name(isNetworkByteOrder))),

 Primitive(Annotation(Name(doc),
   String("Various String and Buffer conversion routines", $type=0.String)),
  Annotation(Name(mapping), Native(NativeCase(java,
     Fixed('io.datawire.quark.runtime.Codec')))), Name(Codec),

  Method(Annotation(Name(doc),
    String("Create an empty buffer with the specified capacity",
    $type=0.String)), Type(Name(Buffer)), Name(buffer),
   Param(Type(Name(int)), Name(capacity), $type=0.int)),

  Method(Annotation(Name(doc),
    String("Encode the specified slice of the buffer and insert a space every 2^spaceScale bytes",
    $type=0.String)), Type(Name(String)), Name(toHexdump),
   Param(Type(Name(Buffer)), Name(buffer), $type=0.Buffer),
   Param(Type(Name(int)), Name(offeset), $type=0.int),
   Param(Type(Name(int)), Name(length), $type=0.int),
   Param(Type(Name(int)), Name(spaceScale), $type=0.int)),

  Method(Annotation(Name(doc),
    String("decode the hexdump ignoring leading 0x and any intervening spaces",
    $type=0.String)), Type(Name(Buffer)), Name(fromHexdump),
   Param(Type(Name(String)), Name(hex), $type=0.String)),

  Method(Annotation(Name(doc),
    String("Encode the specified slice of the buffer as Base64",
    $type=0.String)), Type(Name(String)), Name(toBase64),
   Param(Type(Name(Buffer)), Name(buffer), $type=0.Buffer),
   Param(Type(Name(int)), Name(offset), $type=0.int),
   Param(Type(Name(int)), Name(length), $type=0.int)),

  Method(Annotation(Name(doc), String("decode the Base64 enccoded string",
    $type=0.String)), Type(Name(Buffer)), Name(fromBase64),
   Param(Type(Name(String)), Name(base64), $type=0.String))),

 Primitive(Annotation(Name(doc), String("A service addresable with an url",
   $type=0.String)), Annotation(Name(mapping), Native(NativeCase(java,
     Fixed('io.datawire.quark.runtime.Servlet')))), Name(Servlet),

  Method(Annotation(Name(doc),
    String("called after the servlet is successfully installed. The url will be the actual url used, important especially if ephemeral port was requested",
    $type=0.String)), Type(Name(void)), Name(onServletInit),
   Param(Type(Name(String)), Name(url), $type=0.String),
   Param(Type(Name(Runtime)), Name(runtime), $type=0.Runtime),
   Block()),

  Method(Annotation(Name(doc),
    String("called if the servlet could not be installed", $type=0.String)),
   Type(Name(void)), Name(onServletError),
   Param(Type(Name(String)), Name(url), $type=0.String),
   Param(Type(Name(String)), Name(error), $type=0.String),
   Block()),

  Method(Annotation(Name(doc), String("called when the servlet is removed",
    $type=0.String)), Type(Name(void)), Name(onServletEnd),
   Param(Type(Name(String)), Name(url), $type=0.String),
   Block())),

 Primitive(Annotation(Name(doc), String("Http servlet", $type=0.String)),
  Annotation(Name(mapping), Native(NativeCase(java,
     Fixed('io.datawire.quark.runtime.HTTPServlet')))), Name(HTTPServlet),
  Type(Name(Servlet)),

  Method(Annotation(Name(doc),
    String("incoming request. respond with Runtime.respond(). After responding the objects may get recycled by the runtime",
    $type=0.String)), Type(Name(void)), Name(onHTTPRequest),
   Param(Type(Name(HTTPRequest)), Name(request), $type=0.HTTPRequest),
   Param(Type(Name(HTTPResponse)), Name(response), $type=0.HTTPResponse),
   Block())),

 Primitive(Annotation(Name(doc), String("Websocket servlet", $type=0.String)),
  Annotation(Name(mapping), Native(NativeCase(java,
     Fixed('io.datawire.quark.runtime.WSServlet')))), Name(WSServlet),
  Type(Name(Servlet)),

  Method(Annotation(Name(doc),
    String("called for each new incoming WebSocket connection",
    $type=0.String)), Type(Name(WSHandler)), Name(onWSConnect),
   Param(Type(Name(HTTPRequest)), Name(upgrade_request), $type=0.HTTPRequest),
   Block(
    Return(Null(null, $type=0.Object))))),

 Class(Name(ResponseHolder), Type(Name(HTTPHandler)),
  Field(Type(Name(HTTPResponse)), Name(response), $type=0.HTTPResponse),

  Method(Type(Name(void)), Name(onHTTPResponse),
   Param(Type(Name(HTTPRequest)), Name(request), $type=0.HTTPRequest),
   Param(Type(Name(HTTPResponse)), Name(response), $type=0.HTTPResponse),
   Block(
    Assign(Attr(Var(Name(self), $type=0.ResponseHolder), Name(response),
     $type=0.HTTPResponse), Var(Name(response), $type=0.HTTPResponse)))),

  Method(Type(Name(String)), Name(_getClass), Block(
    Return(String("ResponseHolder", $type=0.String)))),

  Method(Type(Name(Object)), Name(_getField),
   Param(Type(Name(String)), Name(name), $type=0.String),
   Block(
    If(Call(Attr(Var(Name(name), $type=0.String), Name(__eq__),
      $type=0.Object.__eq__), String("response", $type=0.String),
     $type=0.bool), Block(
      Return(Attr(Var(Name(self), $type=0.ResponseHolder), Name(response),
       $type=0.HTTPResponse)))),
    Return(Null(null, $type=0.Object)))),

  Method(Type(Name(void)), Name(_setField),
   Param(Type(Name(String)), Name(name), $type=0.String),
   Param(Type(Name(Object)), Name(value), $type=0.Object),
   Block(
    If(Call(Attr(Var(Name(name), $type=0.String), Name(__eq__),
      $type=0.Object.__eq__), String("response", $type=0.String),
     $type=0.bool), Block(
      Assign(Attr(Var(Name(self), $type=0.ResponseHolder), Name(response),
       $type=0.HTTPResponse), Cast(Var(Name(value), $type=0.Object),
       $type=0.HTTPResponse))))))),

 Interface(Name(Service),

  Method(Type(Name(String)), Name(getURL)),

  Method(Type(Name(Runtime)), Name(getRuntime)),

  Method(Type(Name(Object)), Name(rpc),
   Param(Type(Name(String)), Name(name), $type=0.String),
   Param(Type(Name(Object)), Name(message), $type=0.Object),
   Block(
    Local(
     Declaration(Type(Name(HTTPRequest)), Name(request),
      Call(Type(Name(HTTPRequest)), Call(Var(Name(getURL),
        $type=0.Service.getURL), $type=0.String), $type=0.HTTPRequest),
     $type=0.HTTPRequest)),
    Local(
     Declaration(Type(Name(JSONObject)), Name(json), Call(Var(Name(toJSON),
       $type=0.toJSON), Var(Name(message), $type=0.Object),
      $type=0.JSONObject), $type=0.JSONObject)),
    Local(
     Declaration(Type(Name(JSONObject)), Name(envelope),
      Call(Type(Name(JSONObject)), $type=0.JSONObject), $type=0.JSONObject)),
    ExprStmt(Call(Attr(Var(Name(envelope), $type=0.JSONObject), Name(__set__),
      $type=0.JSONObject.__set__), String("$method", $type=0.String),
      Var(Name(name), $type=0.String), $type=0.void)),
    ExprStmt(Call(Attr(Var(Name(envelope), $type=0.JSONObject), Name(__set__),
      $type=0.JSONObject.__set__), String("rpc", $type=0.String),
      Var(Name(json), $type=0.JSONObject), $type=0.void)),
    ExprStmt(Call(Attr(Var(Name(request), $type=0.HTTPRequest), Name(setBody),
      $type=0.HTTPRequest.setBody), Var(Name(envelope), $type=0.JSONObject),
     $type=0.void)),
    Local(
     Declaration(Type(Name(Runtime)), Name(rt), Call(Attr(Var(Name(self),
        $type=0.Service), Name(getRuntime), $type=0.Service.getRuntime),
      $type=0.Runtime), $type=0.Runtime)),
    Local(
     Declaration(Type(Name(ResponseHolder)), Name(rh),
      Call(Type(Name(ResponseHolder)), $type=0.ResponseHolder),
     $type=0.ResponseHolder)),
    ExprStmt(Call(Attr(Var(Name(rt), $type=0.Runtime), Name(acquire),
      $type=0.Runtime.acquire), $type=0.void)),
    ExprStmt(Call(Attr(Var(Name(rt), $type=0.Runtime), Name(request),
      $type=0.Runtime.request), Var(Name(request), $type=0.HTTPRequest),
      Var(Name(rh), $type=0.ResponseHolder), $type=0.void)),
    While(Call(Attr(Attr(Var(Name(rh), $type=0.ResponseHolder), Name(response),
       $type=0.HTTPResponse), Name(__eq__), $type=0.Object.__eq__), Null(null,
      $type=0.Object), $type=0.bool), Block(
      ExprStmt(Call(Attr(Var(Name(rt), $type=0.Runtime), Name(wait),
        $type=0.Runtime.wait), Number(3.14, $type=0.float), $type=0.void)))),
    Local(
     Declaration(Type(Name(HTTPResponse)), Name(response), Attr(Var(Name(rh),
       $type=0.ResponseHolder), Name(response), $type=0.HTTPResponse),
     $type=0.HTTPResponse)),
    ExprStmt(Call(Attr(Var(Name(rt), $type=0.Runtime), Name(release),
      $type=0.Runtime.release), $type=0.void)),
    Local(
     Declaration(Type(Name(String)), Name(body), Call(Attr(Var(Name(response),
        $type=0.HTTPResponse), Name(getBody), $type=0.HTTPResponse.getBody),
      $type=0.String), $type=0.String)),
    Local(
     Declaration(Type(Name(JSONObject)), Name(obj), Call(Attr(Var(Name(body),
        $type=0.String), Name(parseJSON), $type=0.String.parseJSON),
      $type=0.JSONObject), $type=0.JSONObject)),
    Return(Call(Var(Name(fromJSON), $type=0.fromJSON), Call(Var(Name(Class),
       $type=0.Class), Call(Attr(Var(Name(obj), $type=0.JSONObject),
         Name(__get__), $type=0.JSONObject.__get__), String("$class",
        $type=0.String), $type=0.JSONObject), $type=0.Class), Var(Name(obj),
      $type=0.JSONObject), $type=0.Object))))),

 Class(Name(Client),
  Field(Type(Name(Runtime)), Name(runtime), $type=0.Runtime),
  Field(Type(Name(String)), Name(url), $type=0.String),

  Constructor(Name(Client),
   Param(Type(Name(Runtime)), Name(runtime), $type=0.Runtime),
   Param(Type(Name(String)), Name(url), $type=0.String),
   Block(
    Assign(Attr(Var(Name(self), $type=0.Client), Name(runtime),
     $type=0.Runtime), Var(Name(runtime), $type=0.Runtime)),
    Assign(Attr(Var(Name(self), $type=0.Client), Name(url), $type=0.String),
     Var(Name(url), $type=0.String)))),

  Method(Type(Name(Runtime)), Name(getRuntime), Block(
    Return(Attr(Var(Name(self), $type=0.Client), Name(runtime),
     $type=0.Runtime)))),

  Method(Type(Name(String)), Name(getURL), Block(
    Return(Attr(Var(Name(self), $type=0.Client), Name(url), $type=0.String)))),

  Method(Type(Name(String)), Name(_getClass), Block(
    Return(String("Client", $type=0.String)))),

  Method(Type(Name(Object)), Name(_getField),
   Param(Type(Name(String)), Name(name), $type=0.String),
   Block(
    If(Call(Attr(Var(Name(name), $type=0.String), Name(__eq__),
      $type=0.Object.__eq__), String("runtime", $type=0.String), $type=0.bool),
     Block(
      Return(Attr(Var(Name(self), $type=0.Client), Name(runtime),
       $type=0.Runtime)))),
    If(Call(Attr(Var(Name(name), $type=0.String), Name(__eq__),
      $type=0.Object.__eq__), String("url", $type=0.String), $type=0.bool),
     Block(
      Return(Attr(Var(Name(self), $type=0.Client), Name(url),
       $type=0.String)))),
    Return(Null(null, $type=0.Object)))),

  Method(Type(Name(void)), Name(_setField),
   Param(Type(Name(String)), Name(name), $type=0.String),
   Param(Type(Name(Object)), Name(value), $type=0.Object),
   Block(
    If(Call(Attr(Var(Name(name), $type=0.String), Name(__eq__),
      $type=0.Object.__eq__), String("runtime", $type=0.String), $type=0.bool),
     Block(
      Assign(Attr(Var(Name(self), $type=0.Client), Name(runtime),
       $type=0.Runtime), Cast(Var(Name(value), $type=0.Object),
       $type=0.Runtime)))),
    If(Call(Attr(Var(Name(name), $type=0.String), Name(__eq__),
      $type=0.Object.__eq__), String("url", $type=0.String), $type=0.bool),
     Block(
      Assign(Attr(Var(Name(self), $type=0.Client), Name(url), $type=0.String),
       Cast(Var(Name(value), $type=0.Object), $type=0.String))))))),

 Class(Name(Server), TypeParam(Name(T)), Type(Name(HTTPServlet)),
  Field(Type(Name(Runtime)), Name(runtime), $type=0.Runtime),
  Field(Type(Name(T)), Name(impl), $type=0.Server.T),

  Constructor(Name(Server),
   Param(Type(Name(Runtime)), Name(runtime), $type=0.Runtime),
   Param(Type(Name(T)), Name(impl), $type=0.Server.T),
   Block(
    Assign(Attr(Var(Name(self), $type=0.Server<0.Server.T>), Name(runtime),
     $type=0.Runtime), Var(Name(runtime), $type=0.Runtime)),
    Assign(Attr(Var(Name(self), $type=0.Server<0.Server.T>), Name(impl),
     $type=0.Server.T), Var(Name(impl), $type=0.Server.T)))),

  Method(Type(Name(Runtime)), Name(getRuntime), Block(
    Return(Attr(Var(Name(self), $type=0.Server<0.Server.T>), Name(runtime),
     $type=0.Runtime)))),

  Method(Type(Name(void)), Name(onHTTPRequest),
   Param(Type(Name(HTTPRequest)), Name(request), $type=0.HTTPRequest),
   Param(Type(Name(HTTPResponse)), Name(response), $type=0.HTTPResponse),
   Block(
    Local(
     Declaration(Type(Name(JSONObject)), Name(envelope),
      Call(Attr(Call(Attr(Var(Name(request), $type=0.HTTPRequest),
          Name(getBody), $type=0.HTTPRequest.getBody), $type=0.String),
        Name(parseJSON), $type=0.String.parseJSON), $type=0.JSONObject),
     $type=0.JSONObject)),
    Local(
     Declaration(Type(Name(String)), Name(method),
      Call(Attr(Var(Name(envelope), $type=0.JSONObject), Name(__get__),
       $type=0.JSONObject.__get__), String("$method", $type=0.String),
      $type=0.JSONObject), $type=0.String)),
    Local(
     Declaration(Type(Name(JSONObject)), Name(json),
      Call(Attr(Var(Name(envelope), $type=0.JSONObject), Name(__get__),
       $type=0.JSONObject.__get__), String("rpc", $type=0.String),
      $type=0.JSONObject), $type=0.JSONObject)),
    Local(
     Declaration(Type(Name(Object)), Name(argument), Call(Var(Name(fromJSON),
       $type=0.fromJSON), Call(Var(Name(Class), $type=0.Class),
        Call(Attr(Var(Name(json), $type=0.JSONObject), Name(__get__),
         $type=0.JSONObject.__get__), String("$class", $type=0.String),
        $type=0.JSONObject), $type=0.Class), Var(Name(json),
       $type=0.JSONObject), $type=0.Object), $type=0.Object)),
    Local(
     Declaration(Type(Name(Object)), Name(result),
      Call(Attr(Attr(Call(Attr(Call(Attr(Var(Name(self),
             $type=0.Server<0.Server.T>), Name(getClass),
            $type=0.Object.getClass), $type=0.Class), Name(getField),
          $type=0.Class.getField), String("impl", $type=0.String),
         $type=0.Field), Name(type), $type=0.Class), Name(invoke),
       $type=0.Class.invoke), Var(Name(impl), $type=0.Server.T),
       Var(Name(method), $type=0.String), List(Var(Name(argument),
        $type=0.Object), $type=0.List<0.Object>), $type=0.Object),
     $type=0.Object)),
    ExprStmt(Call(Attr(Var(Name(response), $type=0.HTTPResponse),
       Name(setBody), $type=0.HTTPResponse.setBody), Call(Var(Name(toJSON),
       $type=0.toJSON), Var(Name(result), $type=0.Object), $type=0.JSONObject),
     $type=0.void)),
    ExprStmt(Call(Attr(Call(Var(Name(getRuntime), $type=0.Server.getRuntime),
       $type=0.Runtime), Name(respond), $type=0.Runtime.respond),
      Var(Name(request), $type=0.HTTPRequest), Var(Name(response),
      $type=0.HTTPResponse), $type=0.void)))),

  Method(Type(Name(String)), Name(_getClass), Block(
    Return(String("Server<Object>", $type=0.String)))),

  Method(Type(Name(Object)), Name(_getField),
   Param(Type(Name(String)), Name(name), $type=0.String),
   Block(
    If(Call(Attr(Var(Name(name), $type=0.String), Name(__eq__),
      $type=0.Object.__eq__), String("runtime", $type=0.String), $type=0.bool),
     Block(
      Return(Attr(Var(Name(self), $type=0.Server<0.Server.T>), Name(runtime),
       $type=0.Runtime)))),
    If(Call(Attr(Var(Name(name), $type=0.String), Name(__eq__),
      $type=0.Object.__eq__), String("impl", $type=0.String), $type=0.bool),
     Block(
      Return(Attr(Var(Name(self), $type=0.Server<0.Server.T>), Name(impl),
       $type=0.Server.T)))),
    Return(Null(null, $type=0.Object)))),

  Method(Type(Name(void)), Name(_setField),
   Param(Type(Name(String)), Name(name), $type=0.String),
   Param(Type(Name(Object)), Name(value), $type=0.Object),
   Block(
    If(Call(Attr(Var(Name(name), $type=0.String), Name(__eq__),
      $type=0.Object.__eq__), String("runtime", $type=0.String), $type=0.bool),
     Block(
      Assign(Attr(Var(Name(self), $type=0.Server<0.Server.T>), Name(runtime),
       $type=0.Runtime), Cast(Var(Name(value), $type=0.Object),
       $type=0.Runtime)))),
    If(Call(Attr(Var(Name(name), $type=0.String), Name(__eq__),
      $type=0.Object.__eq__), String("impl", $type=0.String), $type=0.bool),
     Block(
      Assign(Attr(Var(Name(self), $type=0.Server<0.Server.T>), Name(impl),
       $type=0.Server.T), Cast(Var(Name(value), $type=0.Object),
       $type=0.Server.T)))))))
)