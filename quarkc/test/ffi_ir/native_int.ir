    Package(
        Check(
            Name("native_int:native_int.eq_null_0"),
            Block(
                Local("nuffin", Int(), Null(Int())),
                AssertEqual(BoolLit(True), Invoke(Ref("pkg:pkg.quark.int___eq__"), Var("nuffin"), IntLit(0)))
            )
        ),
        Check(
            Name("native_int:native_int.eq_0_0_T"),
            Block(
                AssertEqual(BoolLit(True), Invoke(Ref("pkg:pkg.quark.int___eq__"), IntLit(0), IntLit(0)))
            )
        ),
        Check(
            Name("native_int:native_int.eq_0_1_F"),
            Block(
                AssertEqual(BoolLit(False), Invoke(Ref("pkg:pkg.quark.int___eq__"), IntLit(0), IntLit(1)))
            )
        ),
        Check(
            Name("native_int:native_int.eq_1_0_F"),
            Block(
                AssertEqual(BoolLit(False), Invoke(Ref("pkg:pkg.quark.int___eq__"), IntLit(1), IntLit(0)))
            )
        ),
        Check(
            Name("native_int:native_int.eq_1_1_T"),
            Block(
                AssertEqual(BoolLit(True), Invoke(Ref("pkg:pkg.quark.int___eq__"), IntLit(1), IntLit(1)))
            )
        ),
        Check(
            Name("native_int:native_int.ne_0_0_F"),
            Block(
                AssertEqual(BoolLit(False), Invoke(Ref("pkg:pkg.quark.int___ne__"), IntLit(0), IntLit(0)))
            )
        ),
        Check(
            Name("native_int:native_int.ne_0_1_T"),
            Block(
                AssertEqual(BoolLit(True), Invoke(Ref("pkg:pkg.quark.int___ne__"), IntLit(0), IntLit(1)))
            )
        ),
        Check(
            Name("native_int:native_int.ne_1_0_T"),
            Block(
                AssertEqual(BoolLit(True), Invoke(Ref("pkg:pkg.quark.int___ne__"), IntLit(1), IntLit(0)))
            )
        ),
        Check(
            Name("native_int:native_int.ne_1_1_F"),
            Block(
                AssertEqual(BoolLit(False), Invoke(Ref("pkg:pkg.quark.int___ne__"), IntLit(1), IntLit(1)))
            )
        ),
        Check(
            Name("native_int:native_int.add_0_0_0"),
            Block(
                AssertEqual(IntLit(0), Invoke(Ref("pkg:pkg.quark.int___add__"), IntLit(0), IntLit(0)))
            )
        ),
        Check(
            Name("native_int:native_int.add_0_1_1"),
            Block(
                AssertEqual(IntLit(1), Invoke(Ref("pkg:pkg.quark.int___add__"), IntLit(0), IntLit(1)))
            )
        ),
        Check(
            Name("native_int:native_int.add_1_0_1"),
            Block(
                AssertEqual(IntLit(1), Invoke(Ref("pkg:pkg.quark.int___add__"), IntLit(1), IntLit(0)))
            )
        ),
        Check(
            Name("native_int:native_int.add_1_1_2"),
            Block(
                AssertEqual(IntLit(2), Invoke(Ref("pkg:pkg.quark.int___add__"), IntLit(1), IntLit(1)))
            )
        ),
        Check(
            Name("native_int:native_int.add_20_22_42"),
            Block(
                AssertEqual(IntLit(42), Invoke(Ref("pkg:pkg.quark.int___add__"), IntLit(20), IntLit(22)))
            )
        ),
        Check(
            Name("native_int:native_int.sub_0_0_0"),
            Block(
                AssertEqual(IntLit(0), Invoke(Ref("pkg:pkg.quark.int___sub__"), IntLit(0), IntLit(0)))
            )
        ),
        Check(
            Name("native_int:native_int.sub_0_1__1"),
            Block(
                AssertEqual(IntLit(-1), Invoke(Ref("pkg:pkg.quark.int___sub__"), IntLit(0), IntLit(1)))
            )
        ),
        Check(
            Name("native_int:native_int.sub_1_0_1"),
            Block(
                AssertEqual(IntLit(1), Invoke(Ref("pkg:pkg.quark.int___sub__"), IntLit(1), IntLit(0)))
            )
        ),
        Check(
            Name("native_int:native_int.sub_1_1_0"),
            Block(
                AssertEqual(IntLit(0), Invoke(Ref("pkg:pkg.quark.int___sub__"), IntLit(1), IntLit(1)))
            )
        ),
        Check(
            Name("native_int:native_int.sub_64_22_42"),
            Block(
                AssertEqual(IntLit(42), Invoke(Ref("pkg:pkg.quark.int___sub__"), IntLit(64), IntLit(22)))
            )
        ),
        Check(
            Name("native_int:native_int.neg_0_0"),
            Block(
                AssertEqual(IntLit(0), Invoke(Ref("pkg:pkg.quark.int___neg__"), IntLit(0)))
            )
        ),
        Check(
            Name("native_int:native_int.neg_1__1"),
            Block(
                AssertEqual(IntLit(-1), Invoke(Ref("pkg:pkg.quark.int___neg__"), IntLit(1)))
            )
        ),
        Check(
            Name("native_int:native_int.neg__1_1"),
            Block(
                AssertEqual(IntLit(1), Invoke(Ref("pkg:pkg.quark.int___neg__"), IntLit(-1)))
            )
        ),
        Check(
            Name("native_int:native_int.ge_0_0_T"),
            Block(
                AssertEqual(BoolLit(True), Invoke(Ref("pkg:pkg.quark.int___ge__"), IntLit(0), IntLit(0)))
            )
        ),
        Check(
            Name("native_int:native_int.ge_0_1_F"),
            Block(
                AssertEqual(BoolLit(False), Invoke(Ref("pkg:pkg.quark.int___ge__"), IntLit(0), IntLit(1)))
            )
        ),
        Check(
            Name("native_int:native_int.ge_1_0_T"),
            Block(
                AssertEqual(BoolLit(True), Invoke(Ref("pkg:pkg.quark.int___ge__"), IntLit(1), IntLit(0)))
            )
        ),
        Check(
            Name("native_int:native_int.le_0_0_T"),
            Block(
                AssertEqual(BoolLit(True), Invoke(Ref("pkg:pkg.quark.int___le__"), IntLit(0), IntLit(0)))
            )
        ),
        Check(
            Name("native_int:native_int.le_0_1_T"),
            Block(
                AssertEqual(BoolLit(True), Invoke(Ref("pkg:pkg.quark.int___le__"), IntLit(0), IntLit(1)))
            )
        ),
        Check(
            Name("native_int:native_int.le_1_0_F"),
            Block(
                AssertEqual(BoolLit(False), Invoke(Ref("pkg:pkg.quark.int___le__"), IntLit(1), IntLit(0)))
            )
        ),
        Check(
            Name("native_int:native_int.gt_0_0_F"),
            Block(
                AssertEqual(BoolLit(False), Invoke(Ref("pkg:pkg.quark.int___gt__"), IntLit(0), IntLit(0)))
            )
        ),
        Check(
            Name("native_int:native_int.gt_0_1_F"),
            Block(
                AssertEqual(BoolLit(False), Invoke(Ref("pkg:pkg.quark.int___gt__"), IntLit(0), IntLit(1)))
            )
        ),
        Check(
            Name("native_int:native_int.gt_1_0_T"),
            Block(
                AssertEqual(BoolLit(True), Invoke(Ref("pkg:pkg.quark.int___gt__"), IntLit(1), IntLit(0)))
            )
        ),
        Check(
            Name("native_int:native_int.lt_0_0_F"),
            Block(
                AssertEqual(BoolLit(False), Invoke(Ref("pkg:pkg.quark.int___lt__"), IntLit(0), IntLit(0)))
            )
        ),
        Check(
            Name("native_int:native_int.lt_0_1_T"),
            Block(
                AssertEqual(BoolLit(True), Invoke(Ref("pkg:pkg.quark.int___lt__"), IntLit(0), IntLit(1)))
            )
        ),
        Check(
            Name("native_int:native_int.lt_1_0_F"),
            Block(
                AssertEqual(BoolLit(False), Invoke(Ref("pkg:pkg.quark.int___lt__"), IntLit(1), IntLit(0)))
            )
        ),
)
