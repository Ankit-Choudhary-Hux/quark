    Package(
        NativeFunction(Name("pf:pf.quark.int___eq__"),
                       Bool(), Param("a", Int()), Param("b", Int()),
                       TemplateContext(("a", Var("a")),
                                     ("b", Var("b"))),
                       TemplateText("java",       (), "return {a} == {b};"),
                       TemplateText("python",     (),
                                    """
                                    if {a} == {b}:
                                        return True
                                    return False
                                    """),
                       TemplateText("go",         (), "return {a} == {b}"),
                       TemplateText("ruby",       (), "return {a} == {b}"),
                       TemplateText("javascript", (), "return {a} == {b}")),
        NativeFunction(Name("pf:pf.quark.int___add__"),
                       Int(), Param("a", Int()), Param("b", Int()),
                       TemplateContext(("a", Var("a")),
                                     ("b", Var("b"))),
                       TemplateText("java",       (), "return {a} + {b};"),
                       TemplateText("python",     (), "return {a} + {b}"),
                       TemplateText("go",         (), "return {a} + {b}"),
                       TemplateText("ruby",       (), "return {a} + {b}"),
                       TemplateText("javascript", (), "return {a} + {b}")),
        NativeFunction(Name("pf:pf.quark.int___sub__"),
                       Int(), Param("a", Int()), Param("b", Int()),
                       TemplateContext(("a", Var("a")),
                                     ("b", Var("b"))),
                       TemplateText("java",       (), "return {a} - {b};"),
                       TemplateText("python",     (), "return {a} - {b}"),
                       TemplateText("go",         (), "return {a} - {b}"),
                       TemplateText("ruby",       (), "return {a} - {b}"),
                       TemplateText("javascript", (), "return {a} - {b}")),
        Function(
            Name("pf:pf.fib"), Int(),
            Param("i", Int()),
            Block(
                If(Invoke(Ref("pf:pf.quark.int___eq__"), Var("i"), IntLit(0)),
                   Block(
                       Return(IntLit(0))),
                   Block(
                       If(Invoke(Ref("pf:pf.quark.int___eq__"), Var("i"), IntLit(1)),
                          Block(
                              Return(IntLit(1))),
                          Block(
                              Return(Invoke(
                                  Ref("pf:pf.quark.int___add__"),
                                  Invoke(Ref("pf:pf.fib"),
                                         Invoke(Ref("pf:pf.quark.int___sub__"), Var("i"), IntLit(1))),
                                  Invoke(Ref("pf:pf.fib"),
                                         Invoke(Ref("pf:pf.quark.int___sub__"), Var("i"), IntLit(2)))
                              ))
                          )
                       )
                   )
                )
            )
        ),
        Function(
            Name("pf:pf.fib2"), Int(),
            Param("i", Int()),
            Block(
                Return(Invoke(Ref("pf:pf.fib"), Var("i")))
            )
        ),
        Check(
            Name("pf:pf.zero"),
            Block(
                AssertEqual(IntLit(0), Invoke(Ref("pf:pf.fib"), IntLit(0)))
            )
        ),
        Check(
            Name("pf:pf.one"),
            Block(
                AssertEqual(IntLit(1), Invoke(Ref("pf:pf.fib"), IntLit(1)))
            )
        ),
        Check(
            Name("pf:pf.two"),
            Block(
                AssertEqual(IntLit(1), Invoke(Ref("pf:pf.fib"), IntLit(2)))
            )
        ),
        Check(
            Name("pf:pf.three"),
            Block(
                AssertEqual(IntLit(2), Invoke(Ref("pf:pf.fib"), IntLit(3)))
            )
        ),
        Check(
            Name("pf:pf.four"),
            Block(
                AssertEqual(IntLit(3), Invoke(Ref("pf:pf.fib"), IntLit(4)))
            )
        ),
        Check(
            Name("pf:pf.five"),
            Block(
                AssertEqual(IntLit(5), Invoke(Ref("pf:pf.fib"), IntLit(5)))
            )
        )
    )
