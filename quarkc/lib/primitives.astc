File(Import(Name(quark)), Include(url=io/datawire/quark/runtime/QObject.java),
 Include(url=io/datawire/quark/runtime/Buffer.java),
 Include(url=io/datawire/quark/runtime/BufferImpl.java),
 Include(url=io/datawire/quark/runtime/Codec.java),

 Package(Name(quark),

  Primitive(Annotation(Name(mapping), Native(NativeCase(java, Fixed('Object')),
     NativeCase(py, Fixed('object')), NativeCase(js, Fixed('Object')),
     NativeCase(rb, Fixed('::DatawireQuarkCore::QuarkObject')))), Name(Object),

   MethodMacro(Type(Name(bool)), Name(__eq__),
    Param(Type(Name(Object)), Name(other), $type=1.quark.Object),
    Native(NativeCase(java,
      Fixed('('), Var(Name(self), $type=1.quark.Object), Fixed(')==('),
      Var(Name(other), $type=1.quark.Object), Fixed(') || ((Object)('),
      Var(Name(self), $type=1.quark.Object), Fixed(') != null && ((Object) ('),
      Var(Name(self), $type=1.quark.Object), Fixed(')).equals('),
      Var(Name(other), $type=1.quark.Object), Fixed('))')), NativeCase(py,
      Fixed('('), Var(Name(self), $type=1.quark.Object), Fixed(') == ('),
      Var(Name(other), $type=1.quark.Object), Fixed(')')), NativeCase(rb,
      Fixed('('), Var(Name(self), $type=1.quark.Object), Fixed(') == ('),
      Var(Name(other), $type=1.quark.Object), Fixed(')')), NativeCase(js,
      Fixed('_qrt.equals(('), Var(Name(self), $type=1.quark.Object),
      Fixed('), ('), Var(Name(other), $type=1.quark.Object), Fixed('))')))),

   MethodMacro(Type(Name(bool)), Name(__ne__),
    Param(Type(Name(Object)), Name(other), $type=1.quark.Object),
    Native(NativeCase(java,
      Fixed('!(('), Var(Name(self), $type=1.quark.Object), Fixed(')==('),
      Var(Name(other), $type=1.quark.Object), Fixed(') || ((Object)('),
      Var(Name(self), $type=1.quark.Object), Fixed(') != null && ((Object) ('),
      Var(Name(self), $type=1.quark.Object), Fixed(')).equals('),
      Var(Name(other), $type=1.quark.Object), Fixed(')))')), NativeCase(py,
      Fixed('('), Var(Name(self), $type=1.quark.Object), Fixed(') != ('),
      Var(Name(other), $type=1.quark.Object), Fixed(')')), NativeCase(rb,
      Fixed('('), Var(Name(self), $type=1.quark.Object), Fixed(') != ('),
      Var(Name(other), $type=1.quark.Object), Fixed(')')), NativeCase(js,
      Fixed('('), Var(Name(self), $type=1.quark.Object), Fixed(') !== ('),
      Var(Name(other), $type=1.quark.Object), Fixed(')')))),

   MethodMacro(Type(Name(reflect), Name(Class)), Name(getClass),
    Call(Attr(Attr(Var(Name(reflect), $type=3.quark.reflect), Name(Class),
      $type=3.quark.reflect.Class), Name(get),
     $type=3.quark.reflect.Class.get), Native(NativeCase(java,
       Fixed('io.datawire.quark.runtime.Builtins._getClass('), Var(Name(self),
       $type=1.quark.Object), Fixed(')')), NativeCase(py, Fixed('_getClass('),
       Var(Name(self), $type=1.quark.Object), Fixed(')')), NativeCase(rb,
       Fixed('::DatawireQuarkCore._getClass('), Var(Name(self),
       $type=1.quark.Object), Fixed(')')), NativeCase(js,
       Fixed('_qrt._getClass('), Var(Name(self), $type=1.quark.Object),
       Fixed(')'))), $type=3.quark.reflect.Class)),

   MethodMacro(Type(Name(Object)), Name(getField),
    Param(Type(Name(String)), Name(name), $type=1.quark.String),
    Native(NativeCase(java,
      Fixed('((io.datawire.quark.runtime.QObject) ('), Var(Name(self),
      $type=1.quark.Object), Fixed('))._getField('), Var(Name(name),
      $type=1.quark.String), Fixed(')')), NativeCase(py, Fixed('('),
      Var(Name(self), $type=1.quark.Object), Fixed(')._getField('),
      Var(Name(name), $type=1.quark.String), Fixed(')')), NativeCase(rb,
      Fixed('('), Var(Name(self), $type=1.quark.Object), Fixed(')._getField('),
      Var(Name(name), $type=1.quark.String), Fixed(')')), NativeCase(js,
      Fixed('('), Var(Name(self), $type=1.quark.Object), Fixed(')._getField('),
      Var(Name(name), $type=1.quark.String), Fixed(')')))),

   MethodMacro(Type(Name(void)), Name(setField),
    Param(Type(Name(String)), Name(name), $type=1.quark.String),
    Param(Type(Name(Object)), Name(value), $type=1.quark.Object),
    Native(NativeCase(java,
      Fixed('((io.datawire.quark.runtime.QObject) ('), Var(Name(self),
      $type=1.quark.Object), Fixed('))._setField('), Var(Name(name),
      $type=1.quark.String), Fixed(', '), Var(Name(value),
      $type=1.quark.Object), Fixed(')')), NativeCase(py, Fixed('('),
      Var(Name(self), $type=1.quark.Object), Fixed(')._setField(('),
      Var(Name(name), $type=1.quark.String), Fixed('), ('), Var(Name(value),
      $type=1.quark.Object), Fixed('))')), NativeCase(rb, Fixed('('),
      Var(Name(self), $type=1.quark.Object), Fixed(')._setField(('),
      Var(Name(name), $type=1.quark.String), Fixed('), ('), Var(Name(value),
      $type=1.quark.Object), Fixed('))')), NativeCase(js, Fixed('('),
      Var(Name(self), $type=1.quark.Object), Fixed(')._setField(('),
      Var(Name(name), $type=1.quark.String), Fixed('), ('), Var(Name(value),
      $type=1.quark.Object), Fixed('))')))),

   MethodMacro(Type(Name(String)), Name(toString), Native(NativeCase(java,
      Fixed('("" + ('), Var(Name(self), $type=1.quark.Object), Fixed('))')),
     NativeCase(py, Fixed('_toString('), Var(Name(self), $type=1.quark.Object),
      Fixed(')')), NativeCase(rb, Fixed('('), Var(Name(self),
      $type=1.quark.Object), Fixed(').to_s')), NativeCase(js,
      Fixed('_qrt.toString('), Var(Name(self), $type=1.quark.Object),
      Fixed(')'))))),

  Primitive(Annotation(Name(mapping), Native(NativeCase(java, Fixed('void')))),
   Name(void)),

  Primitive(Annotation(Name(mapping), Native(NativeCase(java,
      Fixed('Boolean')), NativeCase(py, Fixed('bool')), NativeCase(js,
      Fixed('Boolean')), NativeCase(rb, Fixed('::Object')))), Name(bool),

   MethodMacro(Type(Name(bool)), Name(__not__), Native(NativeCase(java,
      Fixed('!('), Var(Name(self), $type=1.quark.bool), Fixed(')')),
     NativeCase(py, Fixed('not ('), Var(Name(self), $type=1.quark.bool),
      Fixed(')')), NativeCase(rb, Fixed('!('), Var(Name(self),
      $type=1.quark.bool), Fixed(')')), NativeCase(js, Fixed('!('),
      Var(Name(self), $type=1.quark.bool), Fixed(')')))),

   MethodMacro(Type(Name(bool)), Name(__and__),
    Param(Type(Name(bool)), Name(other), $type=1.quark.bool),
    Native(NativeCase(java,
      Fixed('('), Var(Name(self), $type=1.quark.bool), Fixed(') && ('),
      Var(Name(other), $type=1.quark.bool), Fixed(')')), NativeCase(py,
      Fixed('('), Var(Name(self), $type=1.quark.bool), Fixed(') and ('),
      Var(Name(other), $type=1.quark.bool), Fixed(')')), NativeCase(rb,
      Fixed('('), Var(Name(self), $type=1.quark.bool), Fixed(') && ('),
      Var(Name(other), $type=1.quark.bool), Fixed(')')), NativeCase(js,
      Fixed('('), Var(Name(self), $type=1.quark.bool), Fixed(') && ('),
      Var(Name(other), $type=1.quark.bool), Fixed(')')))),

   MethodMacro(Type(Name(bool)), Name(__or__),
    Param(Type(Name(bool)), Name(other), $type=1.quark.bool),
    Native(NativeCase(java,
      Fixed('('), Var(Name(self), $type=1.quark.bool), Fixed(') || ('),
      Var(Name(other), $type=1.quark.bool), Fixed(')')), NativeCase(py,
      Fixed('('), Var(Name(self), $type=1.quark.bool), Fixed(') or ('),
      Var(Name(other), $type=1.quark.bool), Fixed(')')), NativeCase(rb,
      Fixed('('), Var(Name(self), $type=1.quark.bool), Fixed(') || ('),
      Var(Name(other), $type=1.quark.bool), Fixed(')')), NativeCase(js,
      Fixed('('), Var(Name(self), $type=1.quark.bool), Fixed(') || ('),
      Var(Name(other), $type=1.quark.bool), Fixed(')')))),

   MethodMacro(Type(Name(String)), Name(toString), Native(NativeCase(java,
      Fixed('('), Var(Name(self), $type=1.quark.bool), Fixed(').toString()')),
     NativeCase(py, Fixed('_toString('), Var(Name(self), $type=1.quark.bool),
      Fixed(').lower()')), NativeCase(rb, Fixed('('), Var(Name(self),
      $type=1.quark.bool), Fixed(').to_s')), NativeCase(js, Fixed('('),
      Var(Name(self), $type=1.quark.bool), Fixed(').toString()')))),

   MethodMacro(Type(Name(JSONObject)), Name(toJSON),
    Call(Attr(Call(Type(Name(JSONObject)), $type=4.quark.JSONObject),
      Name(setBool), $type=4.quark.JSONObject.setBool), Var(Name(self),
     $type=1.quark.bool), $type=4.quark.JSONObject)),

   MethodMacro(Type(Name(JSONObject)), Name(__to_JSONObject),
    Call(Attr(Var(Name(self), $type=1.quark.bool), Name(toJSON),
     $type=1.quark.bool.toJSON), $type=4.quark.JSONObject))),

  Primitive(Name(numeric), TypeParam(Name(T)),

   MethodMacro(Type(Name(T)), Name(__neg__), Native(NativeCase(Fixed('-('),
      Var(Name(self), $type=1.quark.numeric<1.quark.numeric.T>), Fixed(')')))),

   MethodMacro(Type(Name(T)), Name(__add__),
    Param(Type(Name(T)), Name(other), $type=1.quark.numeric.T),
    Native(NativeCase(Fixed('('), Var(Name(self),
      $type=1.quark.numeric<1.quark.numeric.T>), Fixed(') + ('),
      Var(Name(other), $type=1.quark.numeric.T), Fixed(')')))),

   MethodMacro(Type(Name(T)), Name(__sub__),
    Param(Type(Name(T)), Name(other), $type=1.quark.numeric.T),
    Native(NativeCase(Fixed('('), Var(Name(self),
      $type=1.quark.numeric<1.quark.numeric.T>), Fixed(') - ('),
      Var(Name(other), $type=1.quark.numeric.T), Fixed(')')))),

   MethodMacro(Type(Name(T)), Name(__mul__),
    Param(Type(Name(T)), Name(other), $type=1.quark.numeric.T),
    Native(NativeCase(Fixed('('), Var(Name(self),
      $type=1.quark.numeric<1.quark.numeric.T>), Fixed(') * ('),
      Var(Name(other), $type=1.quark.numeric.T), Fixed(')')))),

   MethodMacro(Type(Name(T)), Name(__div__),
    Param(Type(Name(T)), Name(other), $type=1.quark.numeric.T),
    Native(NativeCase(Fixed('('), Var(Name(self),
      $type=1.quark.numeric<1.quark.numeric.T>), Fixed(') / ('),
      Var(Name(other), $type=1.quark.numeric.T), Fixed(')')))),

   MethodMacro(Type(Name(bool)), Name(__lt__),
    Param(Type(Name(T)), Name(other), $type=1.quark.numeric.T),
    Native(NativeCase(Fixed('('), Var(Name(self),
      $type=1.quark.numeric<1.quark.numeric.T>), Fixed(') < ('),
      Var(Name(other), $type=1.quark.numeric.T), Fixed(')')))),

   MethodMacro(Type(Name(bool)), Name(__le__),
    Param(Type(Name(T)), Name(other), $type=1.quark.numeric.T),
    Native(NativeCase(Fixed('('), Var(Name(self),
      $type=1.quark.numeric<1.quark.numeric.T>), Fixed(') <= ('),
      Var(Name(other), $type=1.quark.numeric.T), Fixed(')')))),

   MethodMacro(Type(Name(bool)), Name(__gt__),
    Param(Type(Name(T)), Name(other), $type=1.quark.numeric.T),
    Native(NativeCase(Fixed('('), Var(Name(self),
      $type=1.quark.numeric<1.quark.numeric.T>), Fixed(') > ('),
      Var(Name(other), $type=1.quark.numeric.T), Fixed(')')))),

   MethodMacro(Type(Name(bool)), Name(__ge__),
    Param(Type(Name(T)), Name(other), $type=1.quark.numeric.T),
    Native(NativeCase(Fixed('('), Var(Name(self),
      $type=1.quark.numeric<1.quark.numeric.T>), Fixed(') >= ('),
      Var(Name(other), $type=1.quark.numeric.T), Fixed(')'))))),

  Primitive(Name(integral), TypeParam(Name(T)), Type(Name(numeric),
    Type(Name(T))),

   MethodMacro(Type(Name(T)), Name(__div__),
    Param(Type(Name(T)), Name(other), $type=1.quark.integral.T),
    Native(NativeCase(java,
      Fixed('~((~('), Var(Name(self),
      $type=1.quark.integral<1.quark.integral.T>), Fixed(')) / ('),
      Var(Name(other), $type=1.quark.integral.T), Fixed('))')), NativeCase(py,
      Fixed('('), Var(Name(self), $type=1.quark.integral<1.quark.integral.T>),
      Fixed(') / ('), Var(Name(other), $type=1.quark.integral.T), Fixed(')')),
     NativeCase(rb, Fixed('('), Var(Name(self),
      $type=1.quark.integral<1.quark.integral.T>), Fixed(') / ('),
      Var(Name(other), $type=1.quark.integral.T), Fixed(')')), NativeCase(js,
      Fixed('Math.floor(('), Var(Name(self),
      $type=1.quark.integral<1.quark.integral.T>), Fixed(') / ('),
      Var(Name(other), $type=1.quark.integral.T), Fixed('))')))),

   MethodMacro(Type(Name(T)), Name(__mod__),
    Param(Type(Name(T)), Name(other), $type=1.quark.integral.T),
    Native(NativeCase(java,
      Fixed('io.datawire.quark.runtime.Builtins.modulo(('), Var(Name(self),
      $type=1.quark.integral<1.quark.integral.T>), Fixed('), ('),
      Var(Name(other), $type=1.quark.integral.T), Fixed('))')), NativeCase(py,
      Fixed('('), Var(Name(self), $type=1.quark.integral<1.quark.integral.T>),
      Fixed(') % ('), Var(Name(other), $type=1.quark.integral.T), Fixed(')')),
     NativeCase(rb, Fixed('('), Var(Name(self),
      $type=1.quark.integral<1.quark.integral.T>), Fixed(') % ('),
      Var(Name(other), $type=1.quark.integral.T), Fixed(')')), NativeCase(js,
      Fixed('_qrt.modulo(('), Var(Name(self),
      $type=1.quark.integral<1.quark.integral.T>), Fixed('), ('),
      Var(Name(other), $type=1.quark.integral.T), Fixed('))')))),

   MethodMacro(Type(Name(float)), Name(toFloat), Native(NativeCase(java,
      Fixed('Double.valueOf('), Var(Name(self),
      $type=1.quark.integral<1.quark.integral.T>), Fixed(')')), NativeCase(py,
      Fixed('float('), Var(Name(self),
      $type=1.quark.integral<1.quark.integral.T>), Fixed(')')), NativeCase(rb,
      Fixed('('), Var(Name(self), $type=1.quark.integral<1.quark.integral.T>),
      Fixed(').to_f')), NativeCase(js, Fixed('('), Var(Name(self),
      $type=1.quark.integral<1.quark.integral.T>), Fixed(')')))),

   MethodMacro(Type(Name(JSONObject)), Name(toJSON),
    Call(Attr(Call(Type(Name(JSONObject)), $type=4.quark.JSONObject),
      Name(setNumber), $type=4.quark.JSONObject.setNumber), Var(Name(self),
     $type=1.quark.integral<1.quark.integral.T>), $type=4.quark.JSONObject)),

   MethodMacro(Type(Name(JSONObject)), Name(__to_JSONObject),
    Call(Attr(Var(Name(self), $type=1.quark.integral<1.quark.integral.T>),
      Name(toJSON), $type=1.quark.integral.toJSON), $type=4.quark.JSONObject)),

   MethodMacro(Type(Name(T)), Name(__bitwise_or__),
    Param(Type(Name(T)), Name(other), $type=1.quark.integral.T),
    Native(NativeCase(Fixed('(('), Var(Name(self),
      $type=1.quark.integral<1.quark.integral.T>), Fixed(') | ('),
      Var(Name(other), $type=1.quark.integral.T), Fixed('))')))),

   MethodMacro(Type(Name(T)), Name(__bitwise_xor__),
    Param(Type(Name(T)), Name(other), $type=1.quark.integral.T),
    Native(NativeCase(Fixed('(('), Var(Name(self),
      $type=1.quark.integral<1.quark.integral.T>), Fixed(') ^ ('),
      Var(Name(other), $type=1.quark.integral.T), Fixed('))')))),

   MethodMacro(Type(Name(T)), Name(__bitwise_and__),
    Param(Type(Name(T)), Name(other), $type=1.quark.integral.T),
    Native(NativeCase(Fixed('(('), Var(Name(self),
      $type=1.quark.integral<1.quark.integral.T>), Fixed(') & ('),
      Var(Name(other), $type=1.quark.integral.T), Fixed('))')))),

   MethodMacro(Type(Name(T)), Name(__bitwise_not__),
    Native(NativeCase(Fixed('(~('), Var(Name(self),
      $type=1.quark.integral<1.quark.integral.T>), Fixed('))'))))),

  Primitive(Annotation(Name(mapping), Native(NativeCase(java, Fixed('Byte')),
     NativeCase(py, Fixed('int')), NativeCase(js, Fixed('Number')),
     NativeCase(rb, Fixed('::Integer')))), Name(byte), Type(Name(integral),
    Type(Name(byte))),

   ConstructorMacro(Name(byte), Native(NativeCase(java, Fixed('new Byte()')),
     NativeCase(py, Fixed('int()')), NativeCase(rb, Fixed('0')), NativeCase(js,
      Fixed('Number()')))),

   MethodMacro(Type(Name(String)), Name(toString), Native(NativeCase(java,
      Fixed('Byte.toString('), Var(Name(self), $type=1.quark.byte),
      Fixed(')')), NativeCase(py, Fixed('_toString('), Var(Name(self),
      $type=1.quark.byte), Fixed(')')), NativeCase(rb, Fixed('('),
      Var(Name(self), $type=1.quark.byte), Fixed(').to_s')), NativeCase(js,
      Fixed('_qrt.toString('), Var(Name(self), $type=1.quark.byte),
      Fixed(')')))),

   MethodMacro(Type(Name(short)), Name(__to_short), Var(Name(self),
    $type=1.quark.byte)),

   MethodMacro(Type(Name(int)), Name(__to_int), Var(Name(self),
    $type=1.quark.byte))),

  Primitive(Annotation(Name(mapping), Native(NativeCase(java, Fixed('Short')),
     NativeCase(py, Fixed('int')), NativeCase(js, Fixed('Number')),
     NativeCase(rb, Fixed('::Integer')))), Name(short), Type(Name(integral),
    Type(Name(short))),

   ConstructorMacro(Name(short), Native(NativeCase(java, Fixed('new Short()')),
     NativeCase(py, Fixed('int()')), NativeCase(rb, Fixed('0')), NativeCase(js,
      Fixed('Number()')))),

   MethodMacro(Type(Name(String)), Name(toString), Native(NativeCase(java,
      Fixed('Short.toString('), Var(Name(self), $type=1.quark.short),
      Fixed(')')), NativeCase(py, Fixed('_toString('), Var(Name(self),
      $type=1.quark.short), Fixed(')')), NativeCase(rb, Fixed('('),
      Var(Name(self), $type=1.quark.short), Fixed(').to_s')), NativeCase(js,
      Fixed('_qrt.toString('), Var(Name(self), $type=1.quark.short),
      Fixed(')')))),

   MethodMacro(Type(Name(byte)), Name(__to_byte), Var(Name(self),
    $type=1.quark.short)),

   MethodMacro(Type(Name(int)), Name(__to_int), Var(Name(self),
    $type=1.quark.short))),

  Primitive(Annotation(Name(mapping), Native(NativeCase(java,
      Fixed('Integer')), NativeCase(py, Fixed('int')), NativeCase(js,
      Fixed('Number')), NativeCase(rb, Fixed('::Integer')))), Name(int),
   Type(Name(integral), Type(Name(int))),

   ConstructorMacro(Name(int), Native(NativeCase(java, Fixed('new Integer()')),
     NativeCase(py, Fixed('int()')), NativeCase(rb, Fixed('0')), NativeCase(js,
      Fixed('Number()')))),

   MethodMacro(Type(Name(String)), Name(toString), Native(NativeCase(java,
      Fixed('Integer.toString('), Var(Name(self), $type=1.quark.int),
      Fixed(')')), NativeCase(py, Fixed('_toString('), Var(Name(self),
      $type=1.quark.int), Fixed(')')), NativeCase(rb, Fixed('('),
      Var(Name(self), $type=1.quark.int), Fixed(').to_s')), NativeCase(js,
      Fixed('_qrt.toString('), Var(Name(self), $type=1.quark.int),
      Fixed(')')))),

   MethodMacro(Type(Name(byte)), Name(__to_byte), Native(NativeCase(java,
      Fixed('(byte)((Integer) ('), Var(Name(self), $type=1.quark.int),
      Fixed(')).intValue()')), NativeCase(py, Fixed('('), Var(Name(self),
      $type=1.quark.int), Fixed(')')), NativeCase(rb, Fixed('('),
      Var(Name(self), $type=1.quark.int), Fixed(')')), NativeCase(js,
      Fixed('('), Var(Name(self), $type=1.quark.int), Fixed(')')))),

   MethodMacro(Type(Name(short)), Name(__to_short), Native(NativeCase(java,
      Fixed('(short) ((Integer) ('), Var(Name(self), $type=1.quark.int),
      Fixed(')).intValue()')), NativeCase(py, Fixed('('), Var(Name(self),
      $type=1.quark.int), Fixed(')')), NativeCase(rb, Fixed('('),
      Var(Name(self), $type=1.quark.int), Fixed(')')), NativeCase(js,
      Fixed('('), Var(Name(self), $type=1.quark.int), Fixed(')')))),

   MethodMacro(Type(Name(long)), Name(__to_long), Native(NativeCase(java,
      Fixed('new Long('), Var(Name(self), $type=1.quark.int), Fixed(')')),
     NativeCase(py, Fixed('('), Var(Name(self), $type=1.quark.int),
      Fixed(')')), NativeCase(rb, Fixed('('), Var(Name(self),
      $type=1.quark.int), Fixed(')')), NativeCase(js, Fixed('('),
      Var(Name(self), $type=1.quark.int), Fixed(')'))))),

  Primitive(Annotation(Name(mapping), Native(NativeCase(java, Fixed('Long')),
     NativeCase(py, Fixed('long')), NativeCase(js, Fixed('Number')),
     NativeCase(rb, Fixed('::Integer')))), Name(long), Type(Name(integral),
    Type(Name(long))),

   ConstructorMacro(Name(long), Native(NativeCase(java, Fixed('new Long()')),
     NativeCase(py, Fixed('int()')), NativeCase(rb, Fixed('0')), NativeCase(js,
      Fixed('Number()')))),

   MethodMacro(Type(Name(String)), Name(toString), Native(NativeCase(java,
      Fixed('Long.toString('), Var(Name(self), $type=1.quark.long),
      Fixed(')')), NativeCase(py, Fixed('_toString('), Var(Name(self),
      $type=1.quark.long), Fixed(')')), NativeCase(rb, Fixed('('),
      Var(Name(self), $type=1.quark.long), Fixed(').to_s')), NativeCase(js,
      Fixed('_qrt.toString('), Var(Name(self), $type=1.quark.long),
      Fixed(')')))),

   MethodMacro(Type(Name(int)), Name(__to_int), Native(NativeCase(java,
      Fixed('(int) ((Long) ('), Var(Name(self), $type=1.quark.long),
      Fixed(')).intValue()')), NativeCase(py, Fixed('('), Var(Name(self),
      $type=1.quark.long), Fixed(')')), NativeCase(rb, Fixed('('),
      Var(Name(self), $type=1.quark.long), Fixed(')')), NativeCase(js,
      Fixed('('), Var(Name(self), $type=1.quark.long), Fixed(')'))))),

  Primitive(Annotation(Name(mapping), Native(NativeCase(java, Fixed('Double')),
     NativeCase(py, Fixed('float')), NativeCase(js, Fixed('Number')),
     NativeCase(rb, Fixed('::Float')))), Name(float), Type(Name(numeric),
    Type(Name(float))),

   MethodMacro(Type(Name(float)), Name(__div__),
    Param(Type(Name(float)), Name(other), $type=1.quark.float),
    Native(NativeCase(java,
      Fixed('('), Var(Name(self), $type=1.quark.float), Fixed(') / ('),
      Var(Name(other), $type=1.quark.float), Fixed(')')), NativeCase(py,
      Fixed('float('), Var(Name(self), $type=1.quark.float),
      Fixed(') / float('), Var(Name(other), $type=1.quark.float), Fixed(')')),
     NativeCase(rb, Fixed('('), Var(Name(self), $type=1.quark.float),
      Fixed(') / ('), Var(Name(other), $type=1.quark.float), Fixed(')')),
     NativeCase(js, Fixed('('), Var(Name(self), $type=1.quark.float),
      Fixed(') / ('), Var(Name(other), $type=1.quark.float), Fixed(')')))),

   MethodMacro(Type(Name(long)), Name(round), Native(NativeCase(java,
      Fixed('Math.round('), Var(Name(self), $type=1.quark.float), Fixed(')')),
     NativeCase(py, Fixed('long(round('), Var(Name(self), $type=1.quark.float),
      Fixed('))')), NativeCase(rb, Fixed('('), Var(Name(self),
      $type=1.quark.float), Fixed(').round()')), NativeCase(js,
      Fixed('Math.round('), Var(Name(self), $type=1.quark.float),
      Fixed(')')))),

   MethodMacro(Type(Name(String)), Name(toString), Native(NativeCase(java,
      Fixed('Double.toString('), Var(Name(self), $type=1.quark.float),
      Fixed(')')), NativeCase(py, Fixed('repr('), Var(Name(self),
      $type=1.quark.float), Fixed(')')), NativeCase(rb, Fixed('('),
      Var(Name(self), $type=1.quark.float), Fixed(').to_s')), NativeCase(js,
      Fixed('_qrt.toString('), Var(Name(self), $type=1.quark.float),
      Fixed(')')))),

   MethodMacro(Type(Name(JSONObject)), Name(toJSON),
    Call(Attr(Call(Type(Name(JSONObject)), $type=4.quark.JSONObject),
      Name(setNumber), $type=4.quark.JSONObject.setNumber), Var(Name(self),
     $type=1.quark.float), $type=4.quark.JSONObject)),

   MethodMacro(Type(Name(JSONObject)), Name(__to_JSONObject),
    Call(Attr(Var(Name(self), $type=1.quark.float), Name(toJSON),
     $type=1.quark.float.toJSON), $type=4.quark.JSONObject))),

  Primitive(Annotation(Name(mapping), Native(NativeCase(java, Fixed('String')),
     NativeCase(py, Fixed('unicode')), NativeCase(js, Fixed('String')),
     NativeCase(rb, Fixed('::String')))), Name(String),

   MethodMacro(Type(Name(String)), Name(__add__),
    Param(Type(Name(String)), Name(other), $type=1.quark.String),
    Native(NativeCase(Fixed('('), Var(Name(self), $type=1.quark.String),
      Fixed(') + ('), Var(Name(other), $type=1.quark.String), Fixed(')')))),

   MethodMacro(Type(Name(int)), Name(size), Native(NativeCase(java, Fixed('('),
      Var(Name(self), $type=1.quark.String), Fixed(').length()')),
     NativeCase(py, Fixed('len('), Var(Name(self), $type=1.quark.String),
      Fixed(')')), NativeCase(rb, Fixed('('), Var(Name(self),
      $type=1.quark.String), Fixed(').size')), NativeCase(js, Fixed('('),
      Var(Name(self), $type=1.quark.String), Fixed(').length')))),

   MethodMacro(Type(Name(bool)), Name(startsWith),
    Param(Type(Name(String)), Name(other), $type=1.quark.String),
    Native(NativeCase(java,
      Fixed('Boolean.valueOf(('), Var(Name(self), $type=1.quark.String),
      Fixed(').startsWith('), Var(Name(other), $type=1.quark.String),
      Fixed('))')), NativeCase(py, Fixed('('), Var(Name(self),
      $type=1.quark.String), Fixed(').startswith('), Var(Name(other),
      $type=1.quark.String), Fixed(')')), NativeCase(rb, Fixed('('),
      Var(Name(self), $type=1.quark.String), Fixed(').start_with?('),
      Var(Name(other), $type=1.quark.String), Fixed(')')), NativeCase(js,
      Fixed('(('), Var(Name(self), $type=1.quark.String), Fixed(').indexOf('),
      Var(Name(other), $type=1.quark.String), Fixed(')===0)')))),

   MethodMacro(Type(Name(bool)), Name(endsWith),
    Param(Type(Name(String)), Name(other), $type=1.quark.String),
    Native(NativeCase(java,
      Fixed('Boolean.valueOf(('), Var(Name(self), $type=1.quark.String),
      Fixed(').endsWith('), Var(Name(other), $type=1.quark.String),
      Fixed('))')), NativeCase(py, Fixed('('), Var(Name(self),
      $type=1.quark.String), Fixed(').endswith('), Var(Name(other),
      $type=1.quark.String), Fixed(')')), NativeCase(rb, Fixed('('),
      Var(Name(self), $type=1.quark.String), Fixed(').end_with?('),
      Var(Name(other), $type=1.quark.String), Fixed(')')), NativeCase(js,
      Fixed('(('), Var(Name(self), $type=1.quark.String), Fixed(').indexOf(('),
      Var(Name(other), $type=1.quark.String), Fixed('), ('), Var(Name(self),
      $type=1.quark.String), Fixed(').length - ('), Var(Name(other),
      $type=1.quark.String), Fixed(').length) !== -1)')))),

   MethodMacro(Type(Name(int)), Name(find),
    Param(Type(Name(String)), Name(other), $type=1.quark.String),
    Native(NativeCase(java,
      Fixed('('), Var(Name(self), $type=1.quark.String), Fixed(').indexOf('),
      Var(Name(other), $type=1.quark.String), Fixed(')')), NativeCase(py,
      Fixed('('), Var(Name(self), $type=1.quark.String), Fixed(').find('),
      Var(Name(other), $type=1.quark.String), Fixed(')')), NativeCase(rb,
      Fixed('(('), Var(Name(self), $type=1.quark.String), Fixed(').index('),
      Var(Name(other), $type=1.quark.String), Fixed(') or -1)')),
     NativeCase(js, Fixed('('), Var(Name(self), $type=1.quark.String),
      Fixed(').indexOf('), Var(Name(other), $type=1.quark.String),
      Fixed(')')))),

   MethodMacro(Type(Name(String)), Name(substring),
    Param(Type(Name(int)), Name(start), $type=1.quark.int),
    Param(Type(Name(int)), Name(end), $type=1.quark.int),
    Native(NativeCase(java,
      Fixed('('), Var(Name(self), $type=1.quark.String),
      Fixed(').substring(('), Var(Name(start), $type=1.quark.int),
      Fixed('), ('), Var(Name(end), $type=1.quark.int), Fixed('))')),
     NativeCase(py, Fixed('('), Var(Name(self), $type=1.quark.String),
      Fixed(')[('), Var(Name(start), $type=1.quark.int), Fixed('):('),
      Var(Name(end), $type=1.quark.int), Fixed(')]')), NativeCase(rb,
      Fixed('('), Var(Name(self), $type=1.quark.String), Fixed(')[('),
      Var(Name(start), $type=1.quark.int), Fixed(')...('), Var(Name(end),
      $type=1.quark.int), Fixed(')]')), NativeCase(js, Fixed('('),
      Var(Name(self), $type=1.quark.String), Fixed(').substring(('),
      Var(Name(start), $type=1.quark.int), Fixed('), ('), Var(Name(end),
      $type=1.quark.int), Fixed('))')))),

   MethodMacro(Type(Name(String)), Name(replace),
    Param(Type(Name(String)), Name(from), $type=1.quark.String),
    Param(Type(Name(String)), Name(to), $type=1.quark.String),
    Native(NativeCase(java,
      Fixed('('), Var(Name(self), $type=1.quark.String),
      Fixed(').replaceFirst(java.util.regex.Pattern.quote('), Var(Name(from),
      $type=1.quark.String), Fixed('), ('), Var(Name(to),
      $type=1.quark.String), Fixed('))')), NativeCase(py, Fixed('('),
      Var(Name(self), $type=1.quark.String), Fixed(').replace(('),
      Var(Name(from), $type=1.quark.String), Fixed('), ('), Var(Name(to),
      $type=1.quark.String), Fixed('), 1)')), NativeCase(rb, Fixed('('),
      Var(Name(self), $type=1.quark.String), Fixed(').sub(('), Var(Name(from),
      $type=1.quark.String), Fixed('), ('), Var(Name(to),
      $type=1.quark.String), Fixed('))')), NativeCase(js, Fixed('('),
      Var(Name(self), $type=1.quark.String), Fixed(').replace(('),
      Var(Name(from), $type=1.quark.String), Fixed('), ('), Var(Name(to),
      $type=1.quark.String), Fixed('))')))),

   MethodMacro(Type(Name(List), Type(Name(String))), Name(split),
    Param(Type(Name(String)), Name(sep), $type=1.quark.String),
    Native(NativeCase(java,
      Fixed('new java.util.ArrayList<String>(java.util.Arrays.asList(('),
      Var(Name(self), $type=1.quark.String),
      Fixed(').split(java.util.regex.Pattern.quote('), Var(Name(sep),
      $type=1.quark.String), Fixed('), -1)))')), NativeCase(py, Fixed('('),
      Var(Name(self), $type=1.quark.String), Fixed(').split('), Var(Name(sep),
      $type=1.quark.String), Fixed(')')), NativeCase(rb,
      Fixed('::DatawireQuarkCore.split('), Var(Name(self),
      $type=1.quark.String), Fixed(', '), Var(Name(sep), $type=1.quark.String),
      Fixed(')')), NativeCase(js, Fixed('('), Var(Name(self),
      $type=1.quark.String), Fixed(').split('), Var(Name(sep),
      $type=1.quark.String), Fixed(')')))),

   MethodMacro(Type(Name(String)), Name(join),
    Param(Type(Name(List), Type(Name(String))), Name(parts),
    $type=1.quark.List<1.quark.String>),
    Native(NativeCase(java,
      Fixed('io.datawire.quark.runtime.Builtins.join(('), Var(Name(self),
      $type=1.quark.String), Fixed('), ('), Var(Name(parts),
      $type=1.quark.List<1.quark.String>), Fixed('))')), NativeCase(py,
      Fixed('('), Var(Name(self), $type=1.quark.String), Fixed(').join('),
      Var(Name(parts), $type=1.quark.List<1.quark.String>), Fixed(')')),
     NativeCase(rb, Fixed('('), Var(Name(parts),
      $type=1.quark.List<1.quark.String>), Fixed(').join('), Var(Name(self),
      $type=1.quark.String), Fixed(')')), NativeCase(js, Fixed('('),
      Var(Name(parts), $type=1.quark.List<1.quark.String>), Fixed(').join('),
      Var(Name(self), $type=1.quark.String), Fixed(')')))),

   MethodMacro(Type(Name(String)), Name(toUpper), Native(NativeCase(java,
      Fixed('('), Var(Name(self), $type=1.quark.String),
      Fixed(').toUpperCase()')), NativeCase(py, Fixed('('), Var(Name(self),
      $type=1.quark.String), Fixed(').upper()')), NativeCase(rb, Fixed('('),
      Var(Name(self), $type=1.quark.String), Fixed(').upcase')), NativeCase(js,
      Fixed('('), Var(Name(self), $type=1.quark.String),
      Fixed(').toUpperCase()')))),

   MethodMacro(Type(Name(String)), Name(toLower), Native(NativeCase(java,
      Fixed('('), Var(Name(self), $type=1.quark.String),
      Fixed(').toLowerCase()')), NativeCase(py, Fixed('('), Var(Name(self),
      $type=1.quark.String), Fixed(').lower()')), NativeCase(rb, Fixed('('),
      Var(Name(self), $type=1.quark.String), Fixed(').downcase')),
     NativeCase(js, Fixed('('), Var(Name(self), $type=1.quark.String),
      Fixed(').toLowerCase()')))),

   MethodMacro(Type(Name(JSONObject)), Name(toJSON),
    Call(Attr(Call(Type(Name(JSONObject)), $type=4.quark.JSONObject),
      Name(setString), $type=4.quark.JSONObject.setString), Var(Name(self),
     $type=1.quark.String), $type=4.quark.JSONObject)),

   MethodMacro(Type(Name(JSONObject)), Name(__to_JSONObject),
    Call(Attr(Var(Name(self), $type=1.quark.String), Name(toJSON),
     $type=1.quark.String.toJSON), $type=4.quark.JSONObject)),

   MethodMacro(Type(Name(JSONObject)), Name(parseJSON), Native(NativeCase(java,
      Fixed('io.datawire.quark.runtime.JSONObject.parse('), Var(Name(self),
      $type=1.quark.String), Fixed(')')), NativeCase(py,
      Fixed('_JSONObject.parse('), Var(Name(self), $type=1.quark.String),
      Fixed(')')), NativeCase(rb,
      Fixed('::DatawireQuarkCore::JSONObject.parse('), Var(Name(self),
      $type=1.quark.String), Fixed(')')), NativeCase(js,
      Fixed('_qrt.json_from_string('), Var(Name(self), $type=1.quark.String),
      Fixed(')')))),
   Field(static=True, Type(Name(reflect), Name(Class)),
    Name(quark_List_quark_String__ref), Attr(Attr(Var(Name(quark_md),
      $type=15.quark_md), Name(Root), $type=15.quark_md.Root),
     Name(quark_List_quark_String__md), $type=3.quark.reflect.Class),
   $type=3.quark.reflect.Class)),

  Primitive(Annotation(Name(doc),
    String("A stateless buffer of bytes. Default byte order is network byte order.",
    $type=1.quark.String)), Annotation(Name(mapping), Native(NativeCase(java,
      Fixed('io.datawire.quark.runtime.Buffer')))), Name(Buffer),

   Method(static=False, Annotation(Name(doc), String("capacity of the buffer",
     $type=1.quark.String)), Type(Name(int)), Name(capacity)),

   Method(static=False, Annotation(Name(doc),
     String("read a byte at the specified index", $type=1.quark.String)),
    Type(Name(byte)), Name(getByte),
    Param(Type(Name(int)), Name(index), $type=1.quark.int)),

   Method(static=False, Annotation(Name(doc),
     String("write a byte at the specified index", $type=1.quark.String)),
    Type(Name(void)), Name(putByte),
    Param(Type(Name(int)), Name(index), $type=1.quark.int),
    Param(Type(Name(byte)), Name(value), $type=1.quark.byte)),

   Method(static=False, Annotation(Name(doc),
     String("read a short at the specified index", $type=1.quark.String)),
    Type(Name(short)), Name(getShort),
    Param(Type(Name(int)), Name(index), $type=1.quark.int)),

   Method(static=False, Annotation(Name(doc),
     String("write a short at the specified index", $type=1.quark.String)),
    Type(Name(void)), Name(putShort),
    Param(Type(Name(int)), Name(index), $type=1.quark.int),
    Param(Type(Name(short)), Name(value), $type=1.quark.short)),

   Method(static=False, Annotation(Name(doc),
     String("read an int at the specified index", $type=1.quark.String)),
    Type(Name(int)), Name(getInt),
    Param(Type(Name(int)), Name(index), $type=1.quark.int)),

   Method(static=False, Annotation(Name(doc),
     String("write an int at the specified index", $type=1.quark.String)),
    Type(Name(void)), Name(putInt),
    Param(Type(Name(int)), Name(index), $type=1.quark.int),
    Param(Type(Name(int)), Name(value), $type=1.quark.int)),

   Method(static=False, Annotation(Name(doc),
     String("read a long at the specified index", $type=1.quark.String)),
    Type(Name(long)), Name(getLong),
    Param(Type(Name(int)), Name(index), $type=1.quark.int)),

   Method(static=False, Annotation(Name(doc),
     String("write a long at the specified index", $type=1.quark.String)),
    Type(Name(void)), Name(putLong),
    Param(Type(Name(int)), Name(index), $type=1.quark.int),
    Param(Type(Name(long)), Name(value), $type=1.quark.long)),

   Method(static=False, Annotation(Name(doc),
     String("read a float at the specified index", $type=1.quark.String)),
    Type(Name(float)), Name(getFloat),
    Param(Type(Name(int)), Name(index), $type=1.quark.int)),

   Method(static=False, Annotation(Name(doc),
     String("write a float at the specified index", $type=1.quark.String)),
    Type(Name(void)), Name(putFloat),
    Param(Type(Name(int)), Name(index), $type=1.quark.int),
    Param(Type(Name(float)), Name(value), $type=1.quark.float)),

   Method(static=False, Annotation(Name(doc),
     String("decode length bytes as a UTF8 string at the specified index",
     $type=1.quark.String)), Type(Name(String)), Name(getStringUTF8),
    Param(Type(Name(int)), Name(index), $type=1.quark.int),
    Param(Type(Name(int)), Name(length), $type=1.quark.int)),

   Method(static=False, Annotation(Name(doc),
     String("write a string encoded in UTF8 at the specified index and return encoded length",
     $type=1.quark.String)), Type(Name(int)), Name(putStringUTF8),
    Param(Type(Name(int)), Name(index), $type=1.quark.int),
    Param(Type(Name(String)), Name(value), $type=1.quark.String)),

   Method(static=False, Annotation(Name(doc), String("get a view of the range",
     $type=1.quark.String)), Type(Name(Buffer)), Name(getSlice),
    Param(Type(Name(int)), Name(index), $type=1.quark.int),
    Param(Type(Name(int)), Name(length), $type=1.quark.int)),

   Method(static=False, Annotation(Name(doc),
     String("copy length bytes from the source buffer starting at offset to the specified index",
     $type=1.quark.String)), Type(Name(void)), Name(putSlice),
    Param(Type(Name(int)), Name(index), $type=1.quark.int),
    Param(Type(Name(Buffer)), Name(source), $type=1.quark.Buffer),
    Param(Type(Name(int)), Name(offset), $type=1.quark.int),
    Param(Type(Name(int)), Name(length), $type=1.quark.int)),

   Method(static=False, Annotation(Name(doc),
     String("get a littleEndian view of the same buffer",
     $type=1.quark.String)), Type(Name(Buffer)), Name(littleEndian)),

   Method(static=False, Annotation(Name(doc),
     String("true if the buffer decodes in network byte order",
     $type=1.quark.String)), Type(Name(bool)), Name(isNetworkByteOrder))),

  Primitive(Annotation(Name(doc),
    String("Various String and Buffer conversion routines",
    $type=1.quark.String)), Annotation(Name(mapping), Native(NativeCase(java,
      Fixed('io.datawire.quark.runtime.Codec')))), Name(Codec),

   Method(static=False, Annotation(Name(doc),
     String("Create an empty buffer with the specified capacity",
     $type=1.quark.String)), Type(Name(Buffer)), Name(buffer),
    Param(Type(Name(int)), Name(capacity), $type=1.quark.int)),

   Method(static=False, Annotation(Name(doc),
     String("Encode the specified slice of the buffer and insert a space every 2^spaceScale bytes",
     $type=1.quark.String)), Type(Name(String)), Name(toHexdump),
    Param(Type(Name(Buffer)), Name(buffer), $type=1.quark.Buffer),
    Param(Type(Name(int)), Name(offeset), $type=1.quark.int),
    Param(Type(Name(int)), Name(length), $type=1.quark.int),
    Param(Type(Name(int)), Name(spaceScale), $type=1.quark.int)),

   Method(static=False, Annotation(Name(doc),
     String("decode the hexdump ignoring leading 0x and any intervening spaces",
     $type=1.quark.String)), Type(Name(Buffer)), Name(fromHexdump),
    Param(Type(Name(String)), Name(hex), $type=1.quark.String)),

   Method(static=False, Annotation(Name(doc),
     String("Encode the specified slice of the buffer as Base64",
     $type=1.quark.String)), Type(Name(String)), Name(toBase64),
    Param(Type(Name(Buffer)), Name(buffer), $type=1.quark.Buffer),
    Param(Type(Name(int)), Name(offset), $type=1.quark.int),
    Param(Type(Name(int)), Name(length), $type=1.quark.int)),

   Method(static=False, Annotation(Name(doc),
     String("decode the Base64 enccoded string", $type=1.quark.String)),
    Type(Name(Buffer)), Name(fromBase64),
    Param(Type(Name(String)), Name(base64), $type=1.quark.String))),

  Class(Name(ListUtil), TypeParam(Name(T)),

   Method(static=False, Type(Name(List), Type(Name(T))), Name(slice),
    Param(Type(Name(List), Type(Name(T))), Name(list),
    $type=1.quark.List<1.quark.ListUtil.T>),
    Param(Type(Name(int)), Name(start), $type=1.quark.int),
    Param(Type(Name(int)), Name(stop), $type=1.quark.int),
    Block(
     Local(
      Declaration(Type(Name(List), Type(Name(T))), Name(result), List(,
       $type=1.quark.List<1.quark.ListUtil.T>),
      $type=1.quark.List<1.quark.ListUtil.T>)),
     If(Call(Attr(Var(Name(start), $type=1.quark.int), Name(__ge__),
       $type=1.quark.numeric.__ge__), Call(Attr(Var(Name(list),
         $type=1.quark.List<1.quark.ListUtil.T>), Name(size),
        $type=1.quark.List.size), $type=1.quark.int), $type=1.quark.bool),
      Block(
       Assign(Var(Name(start), $type=1.quark.int), Call(Attr(Var(Name(list),
          $type=1.quark.List<1.quark.ListUtil.T>), Name(size),
         $type=1.quark.List.size), $type=1.quark.int))), Block(
       Assign(Var(Name(start), $type=1.quark.int), Call(Attr(Var(Name(start),
          $type=1.quark.int), Name(__mod__), $type=1.quark.integral.__mod__),
         Call(Attr(Var(Name(list), $type=1.quark.List<1.quark.ListUtil.T>),
           Name(size), $type=1.quark.List.size), $type=1.quark.int),
        $type=1.quark.int)))),
     If(Call(Attr(Var(Name(stop), $type=1.quark.int), Name(__ge__),
       $type=1.quark.numeric.__ge__), Call(Attr(Var(Name(list),
         $type=1.quark.List<1.quark.ListUtil.T>), Name(size),
        $type=1.quark.List.size), $type=1.quark.int), $type=1.quark.bool),
      Block(
       Assign(Var(Name(stop), $type=1.quark.int), Call(Attr(Var(Name(list),
          $type=1.quark.List<1.quark.ListUtil.T>), Name(size),
         $type=1.quark.List.size), $type=1.quark.int))), Block(
       Assign(Var(Name(stop), $type=1.quark.int), Call(Attr(Var(Name(stop),
          $type=1.quark.int), Name(__mod__), $type=1.quark.integral.__mod__),
         Call(Attr(Var(Name(list), $type=1.quark.List<1.quark.ListUtil.T>),
           Name(size), $type=1.quark.List.size), $type=1.quark.int),
        $type=1.quark.int)))),
     Local(
      Declaration(Type(Name(int)), Name(idx), Var(Name(start),
       $type=1.quark.int), $type=1.quark.int)),
     While(Call(Attr(Var(Name(idx), $type=1.quark.int), Name(__lt__),
       $type=1.quark.numeric.__lt__), Var(Name(stop), $type=1.quark.int),
      $type=1.quark.bool), Block(
       ExprStmt(Call(Attr(Var(Name(result),
          $type=1.quark.List<1.quark.ListUtil.T>), Name(add),
         $type=1.quark.List.add), Call(Attr(Var(Name(list),
           $type=1.quark.List<1.quark.ListUtil.T>), Name(__get__),
          $type=1.quark.List.__get__), Var(Name(idx), $type=1.quark.int),
         $type=1.quark.ListUtil.T), $type=1.quark.void)),
       Assign(Var(Name(idx), $type=1.quark.int), Call(Attr(Var(Name(idx),
          $type=1.quark.int), Name(__add__), $type=1.quark.numeric.__add__),
         Number(1, $type=1.quark.int), $type=1.quark.int)))),
     Return(Var(Name(result), $type=1.quark.List<1.quark.ListUtil.T>)))),

   Method(static=False, Type(Name(String)), Name(_getClass), Block(
     Return(String("quark.ListUtil<quark.Object>", $type=1.quark.String)))),

   Method(static=False, Type(Name(Object)), Name(_getField),
    Param(Type(Name(String)), Name(name), $type=1.quark.String),
    Block(
     Return(Null(null, $type=1.quark.Object)))),

   Method(static=False, Type(Name(void)), Name(_setField),
    Param(Type(Name(String)), Name(name), $type=1.quark.String),
    Param(Type(Name(Object)), Name(value), $type=1.quark.Object),
    Block()),
   Field(static=True, Type(Name(reflect), Name(Class)),
    Name(quark_List_quark_Object__ref), Attr(Attr(Var(Name(quark_md),
      $type=15.quark_md), Name(Root), $type=15.quark_md.Root),
     Name(quark_List_quark_Object__md), $type=3.quark.reflect.Class),
   $type=3.quark.reflect.Class)),

  Primitive(Annotation(Name(mapping), Native(NativeCase(java,
      Fixed('java.util.ArrayList')), NativeCase(py, Fixed('_List')),
     NativeCase(js, Fixed('Array')), NativeCase(rb,
      Fixed('::DatawireQuarkCore::List')))), Name(List), TypeParam(Name(T)),

   MethodMacro(Type(Name(void)), Name(add),
    Param(Type(Name(T)), Name(element), $type=1.quark.List.T),
    Native(NativeCase(java,
      Fixed('('), Var(Name(self), $type=1.quark.List<1.quark.List.T>),
      Fixed(').add('), Var(Name(element), $type=1.quark.List.T), Fixed(')')),
     NativeCase(py, Fixed('('), Var(Name(self),
      $type=1.quark.List<1.quark.List.T>), Fixed(').append('),
      Var(Name(element), $type=1.quark.List.T), Fixed(')')), NativeCase(rb,
      Fixed('('), Var(Name(self), $type=1.quark.List<1.quark.List.T>),
      Fixed(') << ('), Var(Name(element), $type=1.quark.List.T), Fixed(')')),
     NativeCase(js, Fixed('('), Var(Name(self),
      $type=1.quark.List<1.quark.List.T>), Fixed(').push('), Var(Name(element),
      $type=1.quark.List.T), Fixed(')')))),

   MethodMacro(Type(Name(void)), Name(insert),
    Param(Type(Name(int)), Name(index), $type=1.quark.int),
    Param(Type(Name(T)), Name(element), $type=1.quark.List.T),
    Native(NativeCase(java,
      Fixed('('), Var(Name(self), $type=1.quark.List<1.quark.List.T>),
      Fixed(').add(('), Var(Name(index), $type=1.quark.int), Fixed('), ('),
      Var(Name(element), $type=1.quark.List.T), Fixed('))')), NativeCase(py,
      Fixed('('), Var(Name(self), $type=1.quark.List<1.quark.List.T>),
      Fixed(').insert(('), Var(Name(index), $type=1.quark.int), Fixed('), ('),
      Var(Name(element), $type=1.quark.List.T), Fixed('))')), NativeCase(rb,
      Fixed('('), Var(Name(self), $type=1.quark.List<1.quark.List.T>),
      Fixed(').insert(('), Var(Name(index), $type=1.quark.int), Fixed('), ('),
      Var(Name(element), $type=1.quark.List.T), Fixed('))')), NativeCase(js,
      Fixed('('), Var(Name(self), $type=1.quark.List<1.quark.List.T>),
      Fixed(').splice(('), Var(Name(index), $type=1.quark.int),
      Fixed('), 0, ('), Var(Name(element), $type=1.quark.List.T),
      Fixed('))')))),

   MethodMacro(Type(Name(T)), Name(__get__),
    Param(Type(Name(int)), Name(index), $type=1.quark.int),
    Native(NativeCase(java,
      Fixed('('), Var(Name(self), $type=1.quark.List<1.quark.List.T>),
      Fixed(').get('), Var(Name(index), $type=1.quark.int), Fixed(')')),
     NativeCase(py, Fixed('('), Var(Name(self),
      $type=1.quark.List<1.quark.List.T>), Fixed(')['), Var(Name(index),
      $type=1.quark.int), Fixed(']')), NativeCase(rb, Fixed('('),
      Var(Name(self), $type=1.quark.List<1.quark.List.T>), Fixed(')['),
      Var(Name(index), $type=1.quark.int), Fixed(']')), NativeCase(js,
      Fixed('('), Var(Name(self), $type=1.quark.List<1.quark.List.T>),
      Fixed(')['), Var(Name(index), $type=1.quark.int), Fixed(']')))),

   MethodMacro(Type(Name(void)), Name(__set__),
    Param(Type(Name(int)), Name(index), $type=1.quark.int),
    Param(Type(Name(T)), Name(value), $type=1.quark.List.T),
    Native(NativeCase(java,
      Fixed('('), Var(Name(self), $type=1.quark.List<1.quark.List.T>),
      Fixed(').set(('), Var(Name(index), $type=1.quark.int), Fixed('), ('),
      Var(Name(value), $type=1.quark.List.T), Fixed('))')), NativeCase(py,
      Fixed('('), Var(Name(self), $type=1.quark.List<1.quark.List.T>),
      Fixed(')['), Var(Name(index), $type=1.quark.int), Fixed('] = ('),
      Var(Name(value), $type=1.quark.List.T), Fixed(')')), NativeCase(rb,
      Fixed('('), Var(Name(self), $type=1.quark.List<1.quark.List.T>),
      Fixed(')['), Var(Name(index), $type=1.quark.int), Fixed('] = ('),
      Var(Name(value), $type=1.quark.List.T), Fixed(')')), NativeCase(js,
      Fixed('('), Var(Name(self), $type=1.quark.List<1.quark.List.T>),
      Fixed(')['), Var(Name(index), $type=1.quark.int), Fixed('] = ('),
      Var(Name(value), $type=1.quark.List.T), Fixed(')')))),

   MethodMacro(Annotation(Name(doc),
     String("Mutates the list, removing the element at the specified position.",
     $type=1.quark.String)), Annotation(Name(doc),
     String("Shifts any subsequent elements to the left (subtracts one from their indices).",
     $type=1.quark.String)), Annotation(Name(doc),
     String("Returns the element that was removed.", $type=1.quark.String)),
    Type(Name(T)), Name(remove),
    Param(Type(Name(int)), Name(index), $type=1.quark.int),
    Native(NativeCase(java,
      Fixed('('), Var(Name(self), $type=1.quark.List<1.quark.List.T>),
      Fixed(').remove('), Var(Name(index), $type=1.quark.int), Fixed(')')),
     NativeCase(py, Fixed('('), Var(Name(self),
      $type=1.quark.List<1.quark.List.T>), Fixed(').pop('), Var(Name(index),
      $type=1.quark.int), Fixed(')')), NativeCase(rb, Fixed('('),
      Var(Name(self), $type=1.quark.List<1.quark.List.T>),
      Fixed(').delete_at('), Var(Name(index), $type=1.quark.int), Fixed(')')),
     NativeCase(js, Fixed('_qrt.list_remove(('), Var(Name(self),
      $type=1.quark.List<1.quark.List.T>), Fixed('), ('), Var(Name(index),
      $type=1.quark.int), Fixed('))')))),

   MethodMacro(Type(Name(List), Type(Name(T))), Name(slice),
    Param(Type(Name(int)), Name(start), $type=1.quark.int),
    Param(Type(Name(int)), Name(stop), $type=1.quark.int),
    Call(Attr(Call(Type(Name(ListUtil), Type(Name(T))),
      $type=1.quark.ListUtil<1.quark.List.T>), Name(slice),
     $type=1.quark.ListUtil.slice), Var(Name(self),
     $type=1.quark.List<1.quark.List.T>), Var(Name(start), $type=1.quark.int),
     Var(Name(stop), $type=1.quark.int), $type=1.quark.List<1.quark.List.T>)),

   MethodMacro(Type(Name(int)), Name(size), Native(NativeCase(java, Fixed('('),
      Var(Name(self), $type=1.quark.List<1.quark.List.T>), Fixed(').size()')),
     NativeCase(py, Fixed('len('), Var(Name(self),
      $type=1.quark.List<1.quark.List.T>), Fixed(')')), NativeCase(rb,
      Fixed('('), Var(Name(self), $type=1.quark.List<1.quark.List.T>),
      Fixed(').size')), NativeCase(js, Fixed('('), Var(Name(self),
      $type=1.quark.List<1.quark.List.T>), Fixed(').length')))),

   MethodMacro(Type(Name(void)), Name(sort), Native(NativeCase(java,
      Fixed('java.util.Collections.sort('), Var(Name(self),
      $type=1.quark.List<1.quark.List.T>),
      Fixed(', io.datawire.quark.runtime.Builtins.COMPARATOR)')),
     NativeCase(py, Fixed('('), Var(Name(self),
      $type=1.quark.List<1.quark.List.T>), Fixed(').sort()')), NativeCase(rb,
      Fixed('('), Var(Name(self), $type=1.quark.List<1.quark.List.T>),
      Fixed(').sort!')), NativeCase(js, Fixed('('), Var(Name(self),
      $type=1.quark.List<1.quark.List.T>), Fixed(').sort()')))),

   MethodMacro(Type(Name(JSONObject)), Name(toJSON), Call(Attr(Var(Name(quark),
      $type=0.quark), Name(toJSON), $type=4.quark.toJSON), Var(Name(self),
     $type=1.quark.List<1.quark.List.T>), Call(Attr(Var(Name(self),
       $type=1.quark.List<1.quark.List.T>), Name(getClass),
      $type=1.quark.Object.getClass), $type=3.quark.reflect.Class),
    $type=4.quark.JSONObject)),

   MethodMacro(Type(Name(JSONObject)), Name(__to_JSONObject),
    Call(Attr(Var(Name(self), $type=1.quark.List<1.quark.List.T>),
      Name(toJSON), $type=1.quark.List.toJSON), $type=4.quark.JSONObject)),
   Field(static=True, Type(Name(reflect), Name(Class)),
    Name(quark_ListUtil_quark_Object__ref), Attr(Attr(Var(Name(quark_md),
      $type=15.quark_md), Name(Root), $type=15.quark_md.Root),
     Name(quark_ListUtil_quark_Object__md), $type=3.quark.reflect.Class),
   $type=3.quark.reflect.Class)),

  Primitive(Annotation(Name(mapping), Native(NativeCase(java,
      Fixed('java.util.HashMap')), NativeCase(py, Fixed('_Map')),
     NativeCase(js, Fixed('Map')), NativeCase(rb, Fixed('::Hash')))),
   Name(Map), TypeParam(Name(K)), TypeParam(Name(V)),

   MethodMacro(Type(Name(void)), Name(__set__),
    Param(Type(Name(K)), Name(key), $type=1.quark.Map.K),
    Param(Type(Name(V)), Name(value), $type=1.quark.Map.V),
    Native(NativeCase(java,
      Fixed('('), Var(Name(self),
      $type=1.quark.Map<1.quark.Map.K,1.quark.Map.V>), Fixed(').put(('),
      Var(Name(key), $type=1.quark.Map.K), Fixed('), ('), Var(Name(value),
      $type=1.quark.Map.V), Fixed('))')), NativeCase(py, Fixed('('),
      Var(Name(self), $type=1.quark.Map<1.quark.Map.K,1.quark.Map.V>),
      Fixed(')['), Var(Name(key), $type=1.quark.Map.K), Fixed('] = ('),
      Var(Name(value), $type=1.quark.Map.V), Fixed(')')), NativeCase(rb,
      Fixed('('), Var(Name(self),
      $type=1.quark.Map<1.quark.Map.K,1.quark.Map.V>), Fixed(')['),
      Var(Name(key), $type=1.quark.Map.K), Fixed('] = ('), Var(Name(value),
      $type=1.quark.Map.V), Fixed(')')), NativeCase(js, Fixed('('),
      Var(Name(self), $type=1.quark.Map<1.quark.Map.K,1.quark.Map.V>),
      Fixed(').set(('), Var(Name(key), $type=1.quark.Map.K), Fixed('), ('),
      Var(Name(value), $type=1.quark.Map.V), Fixed('))')))),

   MethodMacro(Type(Name(V)), Name(__get__),
    Param(Type(Name(K)), Name(key), $type=1.quark.Map.K),
    Native(NativeCase(java,
      Fixed('('), Var(Name(self),
      $type=1.quark.Map<1.quark.Map.K,1.quark.Map.V>), Fixed(').get('),
      Var(Name(key), $type=1.quark.Map.K), Fixed(')')), NativeCase(py,
      Fixed('('), Var(Name(self),
      $type=1.quark.Map<1.quark.Map.K,1.quark.Map.V>), Fixed(').get('),
      Var(Name(key), $type=1.quark.Map.K), Fixed(')')), NativeCase(rb,
      Fixed('('), Var(Name(self),
      $type=1.quark.Map<1.quark.Map.K,1.quark.Map.V>), Fixed(')['),
      Var(Name(key), $type=1.quark.Map.K), Fixed(']')), NativeCase(js,
      Fixed('_qrt.map_get(('), Var(Name(self),
      $type=1.quark.Map<1.quark.Map.K,1.quark.Map.V>), Fixed('), ('),
      Var(Name(key), $type=1.quark.Map.K), Fixed('))')))),

   MethodMacro(Annotation(Name(doc),
     String("Mutates the map, removing the specified key.",
     $type=1.quark.String)), Annotation(Name(doc),
     String("Returns the previous value associated with key, or null.",
     $type=1.quark.String)), Type(Name(V)), Name(remove),
    Param(Type(Name(K)), Name(key), $type=1.quark.Map.K),
    Native(NativeCase(java,
      Fixed('('), Var(Name(self),
      $type=1.quark.Map<1.quark.Map.K,1.quark.Map.V>), Fixed(').remove('),
      Var(Name(key), $type=1.quark.Map.K), Fixed(')')), NativeCase(py,
      Fixed('_map_remove(('), Var(Name(self),
      $type=1.quark.Map<1.quark.Map.K,1.quark.Map.V>), Fixed('), ('),
      Var(Name(key), $type=1.quark.Map.K), Fixed('))')), NativeCase(rb,
      Fixed('('), Var(Name(self),
      $type=1.quark.Map<1.quark.Map.K,1.quark.Map.V>), Fixed(').delete('),
      Var(Name(key), $type=1.quark.Map.K), Fixed(')')), NativeCase(js,
      Fixed('_qrt.map_remove(('), Var(Name(self),
      $type=1.quark.Map<1.quark.Map.K,1.quark.Map.V>), Fixed('), ('),
      Var(Name(key), $type=1.quark.Map.K), Fixed('))')))),

   MethodMacro(Type(Name(bool)), Name(contains),
    Param(Type(Name(K)), Name(key), $type=1.quark.Map.K),
    Native(NativeCase(java,
      Fixed('('), Var(Name(self),
      $type=1.quark.Map<1.quark.Map.K,1.quark.Map.V>), Fixed(').containsKey('),
      Var(Name(key), $type=1.quark.Map.K), Fixed(')')), NativeCase(py,
      Fixed('('), Var(Name(key), $type=1.quark.Map.K), Fixed(') in ('),
      Var(Name(self), $type=1.quark.Map<1.quark.Map.K,1.quark.Map.V>),
      Fixed(')')), NativeCase(rb, Fixed('('), Var(Name(self),
      $type=1.quark.Map<1.quark.Map.K,1.quark.Map.V>), Fixed(').key?('),
      Var(Name(key), $type=1.quark.Map.K), Fixed(')')), NativeCase(js,
      Fixed('('), Var(Name(self),
      $type=1.quark.Map<1.quark.Map.K,1.quark.Map.V>), Fixed(').has('),
      Var(Name(key), $type=1.quark.Map.K), Fixed(')')))),

   MethodMacro(Type(Name(List), Type(Name(K))), Name(keys),
    Native(NativeCase(java, Fixed('new java.util.ArrayList(('), Var(Name(self),
      $type=1.quark.Map<1.quark.Map.K,1.quark.Map.V>), Fixed(').keySet())')),
     NativeCase(py, Fixed('_List(('), Var(Name(self),
      $type=1.quark.Map<1.quark.Map.K,1.quark.Map.V>), Fixed(').keys())')),
     NativeCase(rb, Fixed('::DatawireQuarkCore::List.new(('), Var(Name(self),
      $type=1.quark.Map<1.quark.Map.K,1.quark.Map.V>), Fixed(').keys)')),
     NativeCase(js, Fixed('Array.from(('), Var(Name(self),
      $type=1.quark.Map<1.quark.Map.K,1.quark.Map.V>), Fixed(').keys())')))),

   MethodMacro(Type(Name(void)), Name(update),
    Param(Type(Name(Map), Type(Name(K)), Type(Name(V))), Name(other),
    $type=1.quark.Map<1.quark.Map.K,1.quark.Map.V>),
    Native(NativeCase(java,
      Fixed('('), Var(Name(self),
      $type=1.quark.Map<1.quark.Map.K,1.quark.Map.V>), Fixed(').putAll('),
      Var(Name(other), $type=1.quark.Map<1.quark.Map.K,1.quark.Map.V>),
      Fixed(')')), NativeCase(py, Fixed('('), Var(Name(self),
      $type=1.quark.Map<1.quark.Map.K,1.quark.Map.V>), Fixed(').update('),
      Var(Name(other), $type=1.quark.Map<1.quark.Map.K,1.quark.Map.V>),
      Fixed(')')), NativeCase(rb, Fixed('('), Var(Name(self),
      $type=1.quark.Map<1.quark.Map.K,1.quark.Map.V>), Fixed(').merge!('),
      Var(Name(other), $type=1.quark.Map<1.quark.Map.K,1.quark.Map.V>),
      Fixed(')')), NativeCase(js, Fixed('('), Var(Name(other),
      $type=1.quark.Map<1.quark.Map.K,1.quark.Map.V>),
      Fixed(').forEach(function (v, k) '), Fixed('{'), Fixed(' ('),
      Var(Name(self), $type=1.quark.Map<1.quark.Map.K,1.quark.Map.V>),
      Fixed(').set(k, v); '), Fixed('}'), Fixed(')')))),

   MethodMacro(Type(Name(String)), Name(urlencode), Native(NativeCase(java,
      Fixed('io.datawire.quark.runtime.Builtins.urlencode('), Var(Name(self),
      $type=1.quark.Map<1.quark.Map.K,1.quark.Map.V>), Fixed(')')),
     NativeCase(py, Fixed('_urlencode('), Var(Name(self),
      $type=1.quark.Map<1.quark.Map.K,1.quark.Map.V>), Fixed(')')),
     NativeCase(rb, Fixed('::DatawireQuarkCore.urlencode('), Var(Name(self),
      $type=1.quark.Map<1.quark.Map.K,1.quark.Map.V>), Fixed(')')),
     NativeCase(js, Fixed('_qrt.urlencode('), Var(Name(self),
      $type=1.quark.Map<1.quark.Map.K,1.quark.Map.V>), Fixed(')')))),

   MethodMacro(Type(Name(JSONObject)), Name(toJSON), Call(Attr(Var(Name(quark),
      $type=0.quark), Name(toJSON), $type=4.quark.toJSON), Var(Name(self),
     $type=1.quark.Map<1.quark.Map.K,1.quark.Map.V>), Call(Attr(Var(Name(self),
       $type=1.quark.Map<1.quark.Map.K,1.quark.Map.V>), Name(getClass),
      $type=1.quark.Object.getClass), $type=3.quark.reflect.Class),
    $type=4.quark.JSONObject)),

   MethodMacro(Type(Name(JSONObject)), Name(__to_JSONObject),
    Call(Attr(Var(Name(self), $type=1.quark.Map<1.quark.Map.K,1.quark.Map.V>),
      Name(toJSON), $type=1.quark.Map.toJSON), $type=4.quark.JSONObject)),
   Field(static=True, Type(Name(reflect), Name(Class)),
    Name(quark_Map_quark_Object_quark_Object__ref),
    Attr(Attr(Var(Name(quark_md), $type=15.quark_md), Name(Root),
     $type=15.quark_md.Root), Name(quark_Map_quark_Object_quark_Object__md),
    $type=3.quark.reflect.Class), $type=3.quark.reflect.Class)))
)