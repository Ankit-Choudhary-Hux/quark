File(Import(Name(quark)), CompilerVersionSpec(),
 Include(url=io/datawire/quark/runtime/Logger.java),
 Include(url=io/datawire/quark/runtime/QuarkJavaLogger.java),
 Include(url=io/datawire/quark/runtime/LoggerConfig.java),

 Package(Name(quark),

  Package(Name(logging),

   Interface(Annotation(Name(doc),
     String("Destination for logging, just a marker interface for now",
     $type=1.quark.String)), Name(Appender),
    Field(static=True, Type(Name(reflect), Name(Class)),
     Name(quark_logging_Appender_ref), Call(Attr(Var(Name(reflect),
       $type=3.quark.reflect), Name(__register__),
      $type=3.quark.reflect.__register__), Attr(Attr(Var(Name(quark_md),
        $type=15.quark_md), Name(Root), $type=15.quark_md.Root),
       Name(quark_logging_Appender_md), $type=3.quark.reflect.Class),
     $type=3.quark.reflect.Class), $type=3.quark.reflect.Class)),

   Macro(Type(Name(Appender)), Name(stdout), Native(NativeCase(java,
      Fixed('io.datawire.quark.runtime.LoggerConfig.stdout()')), NativeCase(py,
      Fixed('_LoggerConfig.stdout()')), NativeCase(rb,
      Fixed('::DatawireQuarkCore::LoggerConfig.stdout()')), NativeCase(js,
      Fixed('_qrt.LoggerConfig.stdout()')))),

   Macro(Type(Name(Appender)), Name(stderr), Native(NativeCase(java,
      Fixed('io.datawire.quark.runtime.LoggerConfig.stderr()')), NativeCase(py,
      Fixed('_LoggerConfig.stderr()')), NativeCase(rb,
      Fixed('::DatawireQuarkCore::LoggerConfig.stderr()')), NativeCase(js,
      Fixed('_qrt.LoggerConfig.stderr()')))),

   Macro(Type(Name(Appender)), Name(file),
    Param(Type(Name(String)), Name(path), $type=1.quark.String),
    Native(NativeCase(java,
      Fixed('io.datawire.quark.runtime.LoggerConfig.file('), Var(Name(path),
      $type=1.quark.String), Fixed(')')), NativeCase(py,
      Fixed('_LoggerConfig.file('), Var(Name(path), $type=1.quark.String),
      Fixed(')')), NativeCase(rb,
      Fixed('::DatawireQuarkCore::LoggerConfig.file('), Var(Name(path),
      $type=1.quark.String), Fixed(')')), NativeCase(js,
      Fixed('_qrt.LoggerConfig.file('), Var(Name(path), $type=1.quark.String),
      Fixed(')')))),

   Interface(Annotation(Name(doc), String("Logging configurator",
     $type=1.quark.String)), Name(Config),

    Method(static=False, Annotation(Name(doc),
      String("Set the destination for logging, default stderr()",
      $type=1.quark.String)), Type(Name(Config)), Name(setAppender),
     Param(Type(Name(Appender)), Name(appender),
     $type=2.quark.logging.Appender)),

    Method(static=False, Annotation(Name(doc),
      String("set the logging level [trace|debug|info|warn|error], default 'info'",
      $type=1.quark.String)), Type(Name(Config)), Name(setLevel),
     Param(Type(Name(String)), Name(level), $type=1.quark.String)),

    Method(static=False, Annotation(Name(doc), String("Configure the logging",
      $type=1.quark.String)), Type(Name(void)), Name(configure)),
    Field(static=True, Type(Name(reflect), Name(Class)),
     Name(quark_logging_Config_ref), Call(Attr(Var(Name(reflect),
       $type=3.quark.reflect), Name(__register__),
      $type=3.quark.reflect.__register__), Attr(Attr(Var(Name(quark_md),
        $type=15.quark_md), Name(Root), $type=15.quark_md.Root),
       Name(quark_logging_Config_md), $type=3.quark.reflect.Class),
     $type=3.quark.reflect.Class), $type=3.quark.reflect.Class)),

   Macro(Type(Name(Config)), Name(makeConfig), Native(NativeCase(java,
      Fixed('io.datawire.quark.runtime.LoggerConfig.config()')), NativeCase(py,
      Fixed('_LoggerConfig.config()')), NativeCase(rb,
      Fixed('::DatawireQuarkCore::LoggerConfig.config()')), NativeCase(js,
      Fixed('_qrt.LoggerConfig.config()'))))),

  Primitive(Annotation(Name(doc), String("A logging facility",
    $type=1.quark.String)), Annotation(Name(mapping), Native(NativeCase(java,
      Fixed('io.datawire.quark.runtime.Logger')))), Name(Logger),

   ConstructorMacro(Name(Logger),
    Param(Type(Name(String)), Name(topic), $type=1.quark.String),
    Call(Attr(Call(Attr(Call(Attr(Attr(Attr(Var(Name(quark), $type=0.quark),
            Name(concurrent), $type=6.quark.concurrent), Name(Context),
          $type=6.quark.concurrent.Context), Name(current),
         $type=6.quark.concurrent.Context.current),
        $type=6.quark.concurrent.Context), Name(runtime),
       $type=6.quark.concurrent.Context.runtime), $type=0.quark.Runtime),
      Name(logger), $type=0.quark.Runtime.logger), Var(Name(topic),
     $type=1.quark.String), $type=2.quark.Logger)),

   Method(static=False, Annotation(Name(doc),
     String("emit a log at trace level", $type=1.quark.String)),
    Type(Name(void)), Name(trace),
    Param(Type(Name(String)), Name(msg), $type=1.quark.String)),

   Method(static=False, Annotation(Name(doc),
     String("emit a log at debug level", $type=1.quark.String)),
    Type(Name(void)), Name(debug),
    Param(Type(Name(String)), Name(msg), $type=1.quark.String)),

   Method(static=False, Annotation(Name(doc),
     String("emit a log at info level", $type=1.quark.String)),
    Type(Name(void)), Name(info),
    Param(Type(Name(String)), Name(msg), $type=1.quark.String)),

   Method(static=False, Annotation(Name(doc),
     String("emit a log at warn level", $type=1.quark.String)),
    Type(Name(void)), Name(warn),
    Param(Type(Name(String)), Name(msg), $type=1.quark.String)),

   Method(static=False, Annotation(Name(doc),
     String("emit a log at error level", $type=1.quark.String)),
    Type(Name(void)), Name(error),
    Param(Type(Name(String)), Name(msg), $type=1.quark.String))))
)