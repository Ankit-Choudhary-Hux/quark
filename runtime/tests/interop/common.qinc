// pacakge interop {

    class EntrypointSetup {
        EntrypointSetup() {
            logging.defaultConfig().setLevel("debug").setAppender(logging.stdout()).configure();
        }
    }

    interface ClientCheck {
        void check(TimeoutClient client);
    }

    interface ResponseCheck {
        void checkResponse(HTTPResponse response);
    }

    interface ClientResponseCheck extends ClientCheck, ResponseCheck {
        void check(TimeoutClient client) {
            if (client.response != null) {
                self.checkResponse(client.response);
            } else {
                print("FAIL: No response");
            }
        }
    }

    interface RequestCheck {
        void checkRequest(HTTPRequest request);
    }

    class CheckCode extends ResponseCheck {
        int expected;
        CheckCode(int code) {
            self.expected = code;
        }
        void checkResponse(HTTPResponse response) {
            int actual = response.getCode();
            if (actual != expected) {
                print("FAIL: Response code " + actual.toString() + " expected " + expected.toString());
            } else {
                print("OK: Response code " + actual.toString());
            }
        }
    }

    class ClientResponseCheckCode extends CheckCode, ClientResponseCheck {}

    class CheckRequestUrl extends RequestCheck {
        String expected;
        CheckRequestUrl(String url) {
            self.expected = url;
        }
        void checkRequest(HTTPRequest request) {
            String actual = request.getUrl();
            if (actual != expected) {
                print("FAIL: Request URL " + actual + " expected " + expected);
            } else {
                print("OK: Request URL " + actual);
            }
        }
    }

    class CheckRequestMethod extends RequestCheck {
        String expected;
        CheckRequestUrl(String method) {
            self.expected = method;
        }
        void checkRequest(HTTPRequest request) {
            String actual = request.getMethod();
            if (actual != expected) {
                print("FAIL: Request method " + actual + " expected " + expected);
            } else {
                print("OK: Request method " + actual);
            }
        }
    }

    class CheckBody {
        String expected;
        CheckBody(String body) {
            self.expected = body;
        }
        void checkBody(String actual) {
            if (actual != expected) {
                print("FAIL: Response body " + actual + " expected " + expected);
            } else {
                print("OK: Response body " + actual);
            }
        }
    }

    class ClientResponseCheckBody extends CheckBody, ClientResponseCheck {
        void checkResponse(HTTPResponse response) {
            self.checkBody(response.getBody());
        }
    }

    class CheckRequestBody extends CheckBody, RequestCheck {
        void checkRequest(HTTPRequest request) {
            self.checkBody(request.getBody());
        }
    }

    interface Headers {
        String getHeader(String key);
        List<String> getHeaders();
    }

    class CheckHeader {
        String key;
        String expected;
        CheckHeader(String key, String value) {
            self.key = key;
            self.expected = value;
        }
        void checkHeader(Headers thing, String name) {
            String actual = thing.getHeader(self.key);
            if (actual != expected) {
                if (actual == null) {
                    print("FAIL: missing header " + self.key +
                          " in " + name + " headers: " +
                          ", ".join(thing.getHeaders()));
                } else {
                    print("FAIL: " + name + " header " + self.key + ": " + actual + " expected " + expected);
                }
            } else {
                print("OK: " + name + " header " + self.key + ": " + actual);
            }
        }
    }

    class RequestHeaders extends Headers {
        HTTPRequest request;
        RequestHeaders(HTTPRequest request) { self.request = request; }
        String getHeader(String key) { return self.request.getHeader(key); }
        List<String> getHeaders() { return self.request.getHeaders(); }
    }

    class CheckRequestHeader extends CheckHeader, RequestCheck {
        void checkRequest(HTTPRequest request) {
            self.checkHeader(RequestHeaders(request), "request");
        }
    }


    class ResponseHeaders extends Headers {
        HTTPResponse response;
        ResponseHeaders(HTTPResponse response) { self.response = response; }
        String getHeader(String key) { return self.response.getHeader(key); }
        List<String> getHeaders() {
            return self.response.getHeaders();
        }
    }

    class CheckResponseHeader extends CheckHeader<HTTPResponse>, ResponseCheck {
        void checkResponse(HTTPResponse response) {
            self.checkHeader(ResponseHeaders(response), "response");
        }
    }

    class ClientResponseCheckHeader extends CheckResponseHeader, ClientResponseCheck {}

long slow_round(float v) {
    long ret = 0;
    long l = 1024*1024;
    float f = 1024.0 * 1024.0;
    while (l > 0) {
        if ( v > f ) {
            v = v - f;
            ret = ret + l;
        }
        f = f / 2.0;
        l = l / 2;
    }
    return ret;
}
    class Timeout extends concurrent.TimeoutListener {
        concurrent.Timeout timeout;
        bool timedOut = false;
        String name;
        Timeout(float timeout, String name) {
            self.timeout = new concurrent.Timeout(timeout);
            self.name = name;
        }
        void start() {
            print("Timeout for " + self.name + " starting");
             self.timeout.start(self);
        }
        void cancel() {
             self.timeout.cancel();
        }
        void onTimeout(concurrent.Timeout timeout) {
            self.timedOut = true;
            print("FAIL: " + self.name + " timed out");
        }
    }

    class TimeoutClient extends HTTPHandler {
        HTTPRequest request;
        HTTPResponse response;
        String prefix;
        List<ClientCheck> expectations;
        Timeout timeout;
        TimeoutClient(int port) {
            self.prefix = "http://127.0.0.1:" + port.toString();
            self.expectations = new List<ClientCheck>();
        }
        TimeoutClient url(String path) {
            self.request = HTTPRequest(self.prefix + path);
            return self;
        }
        TimeoutClient body(String body) {
            self.request.setBody(body);
            return self;
        }
        TimeoutClient method(String method) {
            self.request.setMethod(method);
            return self;
        }
        TimeoutClient header(String key, String value) {
            self.request.setHeader(key, value);
            return self;
        }
        TimeoutClient expectCode(int code) {
            self.expectations.add(ClientResponseCheckCode(code));
            return self;
        }
        TimeoutClient expectBody(String body) {
            self.expectations.add(ClientResponseCheckBody(body));
            return self;
        }
        TimeoutClient expectHeader(String key, String value) {
            self.expectations.add(ClientResponseCheckHeader(key, value));
            return self;
        }
        void check(float timeout) {
            self.timeout = Timeout(timeout, "http request");
            self.response = null;
            if (self.request != null) {
                self.timeout.start();
                concurrent.Context.runtime().request(self.request, self);
            } else {
                print("FAIL: cannot check without request");
            }
        }
        void onHTTPInit(HTTPRequest request) {
            print("onHTTPInit " + request.getUrl());
        }
        void onHTTPError(HTTPRequest request, String error) {
            self.timeout.cancel();
            if (self.timeout.timedOut) {
                print ("FAIL: too late error");
                return;
            }
            print("onHTTPError " + request.getUrl() + " : " + error);
        }
        void onHTTPFinal(HTTPRequest request) {
            print("onHTTPFinal " + request.getUrl());
        }
        void onHTTPResponse(HTTPRequest request, HTTPResponse response) {
            self.timeout.cancel();
            if (self.timeout.timedOut) {
                print("FAIL: too late response");
                return;
            }
            self.response = response;
            int i = 0;

            while (i < self.expectations.size()) {
                self.expectations[i].check(self);
                i = i + 1;
            }
        }
    }


    class TimeoutServletRequestCheck {
        List<RequestCheck> expectations;
        Timeout timeout;
        TimeoutServletRequestCheck() {
            self.expectations = new List<RequestCheck>();
            self.timeout = null;
        }
        void init() {
            if (self.timeout == null) {
                print("FAIL: servlet check without timeout");
            } else {
                print("starting request check init timeout");
                self.timeout.start();
            }
        }
        TimeoutServletRequestCheck expectMethod(String method) {
            self.expectations.add(CheckRequestMethod(method));
            return self;
        }
        TimeoutServletRequestCheck expectUrl(String url) {
            self.expectations.add(CheckRequestUrl(url));
            return self;
        }
        TimeoutServletRequestCheck expectBody(String body) {
            self.expectations.add(CheckRequestBody(body));
            return self;
        }
        TimeoutServletRequestCheck expectHeader(String key, String value) {
            self.expectations.add(CheckRequestHeader(key, value));
            return self;
        }
        void check(float timeout) {
            self.timeout = Timeout(timeout, "incoming request");
        }
        void onHTTPRequest(HTTPRequest request) {
            if (self.timeout == null) {
                print("FAIL: timeout not set");
                return;
            } else {
                self.timeout.cancel();
                if (self.timeout.timedOut) {
                    print("FAIL: too late HTTP request");
                    return;
                } else {
                    print("OK: incoming HTTP request");
                }
            }
            int i = 0;
            while (i < self.expectations.size()) {
                self.expectations[i].checkRequest(request);
                i = i + 1;
            }
        }
    }

// }
